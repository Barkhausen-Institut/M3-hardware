// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module Frontend(
  input         clock,
                reset,
                auto_icache_master_out_a_ready,
                auto_icache_master_out_d_valid,
  input  [2:0]  auto_icache_master_out_d_bits_opcode,
  input  [3:0]  auto_icache_master_out_d_bits_size,
  input  [63:0] auto_icache_master_out_d_bits_data,
  input         auto_icache_master_out_d_bits_corrupt,
                io_cpu_might_request,
                io_cpu_req_valid,
  input  [39:0] io_cpu_req_bits_pc,
  input         io_cpu_req_bits_speculative,
                io_cpu_sfence_valid,
                io_cpu_sfence_bits_rs1,
                io_cpu_sfence_bits_rs2,
  input  [38:0] io_cpu_sfence_bits_addr,
  input         io_cpu_resp_ready,
                io_cpu_btb_update_valid,
  input  [4:0]  io_cpu_btb_update_bits_prediction_entry,
  input  [38:0] io_cpu_btb_update_bits_pc,
  input         io_cpu_btb_update_bits_isValid,
  input  [38:0] io_cpu_btb_update_bits_br_pc,
  input  [1:0]  io_cpu_btb_update_bits_cfiType,
  input         io_cpu_bht_update_valid,
  input  [7:0]  io_cpu_bht_update_bits_prediction_history,
  input  [38:0] io_cpu_bht_update_bits_pc,
  input         io_cpu_bht_update_bits_branch,
                io_cpu_bht_update_bits_taken,
                io_cpu_bht_update_bits_mispredict,
                io_cpu_flush_icache,
                io_cpu_progress,
                io_ptw_req_ready,
                io_ptw_resp_valid,
                io_ptw_resp_bits_ae_ptw,
                io_ptw_resp_bits_ae_final,
                io_ptw_resp_bits_pf,
                io_ptw_resp_bits_gf,
                io_ptw_resp_bits_hr,
                io_ptw_resp_bits_hw,
                io_ptw_resp_bits_hx,
  input  [43:0] io_ptw_resp_bits_pte_ppn,
  input         io_ptw_resp_bits_pte_d,
                io_ptw_resp_bits_pte_a,
                io_ptw_resp_bits_pte_g,
                io_ptw_resp_bits_pte_u,
                io_ptw_resp_bits_pte_x,
                io_ptw_resp_bits_pte_w,
                io_ptw_resp_bits_pte_r,
                io_ptw_resp_bits_pte_v,
  input  [1:0]  io_ptw_resp_bits_level,
  input         io_ptw_resp_bits_homogeneous,
  input  [3:0]  io_ptw_ptbr_mode,
  input         io_ptw_status_debug,
  input  [1:0]  io_ptw_status_prv,
  input         io_ptw_pmp_0_cfg_l,
  input  [1:0]  io_ptw_pmp_0_cfg_a,
  input         io_ptw_pmp_0_cfg_x,
                io_ptw_pmp_0_cfg_w,
                io_ptw_pmp_0_cfg_r,
  input  [29:0] io_ptw_pmp_0_addr,
  input  [31:0] io_ptw_pmp_0_mask,
  input         io_ptw_pmp_1_cfg_l,
  input  [1:0]  io_ptw_pmp_1_cfg_a,
  input         io_ptw_pmp_1_cfg_x,
                io_ptw_pmp_1_cfg_w,
                io_ptw_pmp_1_cfg_r,
  input  [29:0] io_ptw_pmp_1_addr,
  input  [31:0] io_ptw_pmp_1_mask,
  input         io_ptw_pmp_2_cfg_l,
  input  [1:0]  io_ptw_pmp_2_cfg_a,
  input         io_ptw_pmp_2_cfg_x,
                io_ptw_pmp_2_cfg_w,
                io_ptw_pmp_2_cfg_r,
  input  [29:0] io_ptw_pmp_2_addr,
  input  [31:0] io_ptw_pmp_2_mask,
  input         io_ptw_pmp_3_cfg_l,
  input  [1:0]  io_ptw_pmp_3_cfg_a,
  input         io_ptw_pmp_3_cfg_x,
                io_ptw_pmp_3_cfg_w,
                io_ptw_pmp_3_cfg_r,
  input  [29:0] io_ptw_pmp_3_addr,
  input  [31:0] io_ptw_pmp_3_mask,
  input         io_ptw_pmp_4_cfg_l,
  input  [1:0]  io_ptw_pmp_4_cfg_a,
  input         io_ptw_pmp_4_cfg_x,
                io_ptw_pmp_4_cfg_w,
                io_ptw_pmp_4_cfg_r,
  input  [29:0] io_ptw_pmp_4_addr,
  input  [31:0] io_ptw_pmp_4_mask,
  input         io_ptw_pmp_5_cfg_l,
  input  [1:0]  io_ptw_pmp_5_cfg_a,
  input         io_ptw_pmp_5_cfg_x,
                io_ptw_pmp_5_cfg_w,
                io_ptw_pmp_5_cfg_r,
  input  [29:0] io_ptw_pmp_5_addr,
  input  [31:0] io_ptw_pmp_5_mask,
  input         io_ptw_pmp_6_cfg_l,
  input  [1:0]  io_ptw_pmp_6_cfg_a,
  input         io_ptw_pmp_6_cfg_x,
                io_ptw_pmp_6_cfg_w,
                io_ptw_pmp_6_cfg_r,
  input  [29:0] io_ptw_pmp_6_addr,
  input  [31:0] io_ptw_pmp_6_mask,
  input         io_ptw_pmp_7_cfg_l,
  input  [1:0]  io_ptw_pmp_7_cfg_a,
  input         io_ptw_pmp_7_cfg_x,
                io_ptw_pmp_7_cfg_w,
                io_ptw_pmp_7_cfg_r,
  input  [29:0] io_ptw_pmp_7_addr,
  input  [31:0] io_ptw_pmp_7_mask,
  input  [63:0] io_ptw_customCSRs_csrs_0_value,
  output        auto_icache_master_out_a_valid,
  output [31:0] auto_icache_master_out_a_bits_address,
  output        io_cpu_resp_valid,
                io_cpu_resp_bits_btb_taken,
                io_cpu_resp_bits_btb_bridx,
  output [4:0]  io_cpu_resp_bits_btb_entry,
  output [7:0]  io_cpu_resp_bits_btb_bht_history,
  output [39:0] io_cpu_resp_bits_pc,
  output [31:0] io_cpu_resp_bits_data,
  output        io_cpu_resp_bits_xcpt_pf_inst,
                io_cpu_resp_bits_xcpt_gf_inst,
                io_cpu_resp_bits_xcpt_ae_inst,
                io_cpu_resp_bits_replay,
                io_cpu_gpa_valid,
                io_ptw_req_valid,
                io_ptw_req_bits_valid,
  output [26:0] io_ptw_req_bits_bits_addr,
  output        io_ptw_req_bits_bits_need_gpa,
                io_ptw_req_bits_bits_vstage1,
                io_ptw_req_bits_bits_stage2
);

  wire        s2_redirect;	// @[Frontend.scala:140:32, :331:26, :332:20, :336:{31,45}]
  wire [39:0] predicted_npc;	// @[Frontend.scala:265:25, :325:19, :326:21]
  wire        updateBTB;	// @[Frontend.scala:265:25, :293:125, :294:21]
  wire [1:0]  _GEN;	// @[Frontend.scala:265:25, :269:40]
  wire [1:0]  after_idx;	// @[Frontend.scala:265:25, :267:19]
  wire        taken_taken;	// @[Frontend.scala:250:71]
  wire [39:0] _io_cpu_npc_T_3;	// @[Frontend.scala:376:27]
  wire        _fq_io_enq_valid_T_6;	// @[Frontend.scala:179:52]
  wire        _btb_io_resp_valid;	// @[Frontend.scala:193:21]
  wire        _btb_io_resp_bits_taken;	// @[Frontend.scala:193:21]
  wire        _btb_io_resp_bits_bridx;	// @[Frontend.scala:193:21]
  wire [38:0] _btb_io_resp_bits_target;	// @[Frontend.scala:193:21]
  wire [4:0]  _btb_io_resp_bits_entry;	// @[Frontend.scala:193:21]
  wire [7:0]  _btb_io_resp_bits_bht_history;	// @[Frontend.scala:193:21]
  wire        _btb_io_resp_bits_bht_value;	// @[Frontend.scala:193:21]
  wire        _btb_io_ras_head_valid;	// @[Frontend.scala:193:21]
  wire [38:0] _btb_io_ras_head_bits;	// @[Frontend.scala:193:21]
  wire        _tlb_io_resp_miss;	// @[Frontend.scala:100:19]
  wire [31:0] _tlb_io_resp_paddr;	// @[Frontend.scala:100:19]
  wire        _tlb_io_resp_pf_inst;	// @[Frontend.scala:100:19]
  wire        _tlb_io_resp_ae_inst;	// @[Frontend.scala:100:19]
  wire        _tlb_io_resp_cacheable;	// @[Frontend.scala:100:19]
  wire        _tlb_io_ptw_req_valid;	// @[Frontend.scala:100:19]
  wire        _fq_io_enq_ready;	// @[Frontend.scala:86:64]
  wire [4:0]  _fq_io_mask;	// @[Frontend.scala:86:64]
  wire        _icache_io_resp_valid;	// @[Frontend.scala:65:26]
  wire [31:0] _icache_io_resp_bits_data;	// @[Frontend.scala:65:26]
  wire        _icache_io_resp_bits_replay;	// @[Frontend.scala:65:26]
  wire        _icache_io_resp_bits_ae;	// @[Frontend.scala:65:26]
  reg         s1_valid;	// @[Frontend.scala:102:21]
  reg         s2_valid;	// @[Frontend.scala:103:25]
  wire        s0_valid = io_cpu_req_valid | ~(_fq_io_mask[2]) | ~(_fq_io_mask[3]) & (~s1_valid | ~s2_valid) | ~(_fq_io_mask[4]) & ~s1_valid & ~s2_valid;	// @[Frontend.scala:86:64, :102:21, :103:25, :105:{5,16}, :106:{6,17,41,45,55,58}, :107:{6,17,41}, :108:35]
  reg  [39:0] s1_pc;	// @[Frontend.scala:110:18]
  reg         s1_speculative;	// @[Frontend.scala:111:27]
  reg  [39:0] s2_pc;	// @[Frontend.scala:112:22]
  reg         s2_btb_resp_valid;	// @[Frontend.scala:113:44]
  reg         s2_btb_resp_bits_taken;	// @[Frontend.scala:114:29]
  reg         s2_btb_resp_bits_bridx;	// @[Frontend.scala:114:29]
  reg  [4:0]  s2_btb_resp_bits_entry;	// @[Frontend.scala:114:29]
  reg  [7:0]  s2_btb_resp_bits_bht_history;	// @[Frontend.scala:114:29]
  reg         s2_btb_resp_bits_bht_value;	// @[Frontend.scala:114:29]
  wire        s2_btb_taken = s2_btb_resp_valid & s2_btb_resp_bits_taken;	// @[Frontend.scala:113:44, :114:29, :115:40]
  reg         s2_tlb_resp_miss;	// @[Frontend.scala:116:24]
  reg         s2_tlb_resp_pf_inst;	// @[Frontend.scala:116:24]
  reg         s2_tlb_resp_gf_inst;	// @[Frontend.scala:116:24]
  reg         s2_tlb_resp_ae_inst;	// @[Frontend.scala:116:24]
  reg         s2_tlb_resp_cacheable;	// @[Frontend.scala:116:24]
  wire        s2_xcpt = s2_tlb_resp_ae_inst | s2_tlb_resp_pf_inst | s2_tlb_resp_gf_inst;	// @[Frontend.scala:116:24, :117:60]
  reg         s2_speculative;	// @[Frontend.scala:118:31]
  reg         s2_partial_insn_valid;	// @[Frontend.scala:119:38]
  reg  [15:0] s2_partial_insn;	// @[Frontend.scala:120:28]
  reg         wrong_path;	// @[Frontend.scala:121:27]
  wire        _T_37 = _fq_io_enq_ready & _fq_io_enq_valid_T_6;	// @[Decoupled.scala:51:35, Frontend.scala:86:64, :179:52]
  reg         s2_replay_REG;	// @[Frontend.scala:129:56]
  wire        s2_replay = s2_valid & ~_T_37 | s2_replay_REG;	// @[Decoupled.scala:51:35, Frontend.scala:103:25, :129:{26,29,46,56}]
  reg  [1:0]  recent_progress_counter;	// @[Frontend.scala:150:40]
  wire        s2_kill_speculative_tlb_refill = s2_speculative & ~(|recent_progress_counter);	// @[Frontend.scala:118:31, :150:40, :151:49, :155:{55,58}]
  wire        _icache_io_s2_kill_T_2 = s2_speculative & ~(s2_tlb_resp_cacheable & ~(io_ptw_customCSRs_csrs_0_value[3])) | s2_xcpt;	// @[CustomCSRs.scala:40:69, Frontend.scala:116:24, :117:60, :118:31, :174:{59,62}, :175:{39,42,71}]
  reg         fq_io_enq_valid_REG;	// @[Frontend.scala:179:29]
  wire        _fq_io_enq_bits_replay_T_5 = s2_kill_speculative_tlb_refill & s2_tlb_resp_miss;	// @[Frontend.scala:116:24, :155:55, :179:112]
  assign _fq_io_enq_valid_T_6 = fq_io_enq_valid_REG & s2_valid & (_icache_io_resp_valid | _fq_io_enq_bits_replay_T_5 | ~s2_tlb_resp_miss & _icache_io_s2_kill_T_2);	// @[Frontend.scala:65:26, :103:25, :116:24, :175:71, :179:{29,52,112,133,137,155}]
  assign _io_cpu_npc_T_3 = ~(~(io_cpu_req_valid ? io_cpu_req_bits_pc : s2_replay ? s2_pc : predicted_npc) | 40'h1);	// @[Frontend.scala:112:22, :129:46, :130:16, :181:28, :265:25, :325:19, :326:21, :376:{27,29,33}]
  wire [2:0]  _fq_io_enq_bits_mask_T_1 = 3'h3 << s2_pc[1];	// @[Frontend.scala:112:22, :184:50, package.scala:155:13]
  wire        predicted_taken = _btb_io_resp_valid & _btb_io_resp_bits_taken;	// @[Frontend.scala:193:21, :208:29]
  wire [39:0] s2_base_pc = ~(~s2_pc | 40'h3);	// @[Frontend.scala:112:22, :123:29, :217:{22,24,31}]
  wire        taken_prevRVI = s2_partial_insn_valid & (&(s2_partial_insn[1:0]));	// @[Frontend.scala:119:38, :120:28, :228:{39,45}, :229:31]
  wire        taken_valid = _fq_io_enq_bits_mask_T_1[0] & ~taken_prevRVI;	// @[Frontend.scala:184:50, :229:31, :230:{38,44,47}]
  wire        taken_rviBranch = s2_partial_insn[6:0] == 7'h63;	// @[Frontend.scala:120:28, :234:{30,36}]
  wire        taken_rviJump = s2_partial_insn[6:0] == 7'h6F;	// @[Frontend.scala:120:28, :234:30, :235:34]
  wire        taken_rviJALR = s2_partial_insn[6:0] == 7'h67;	// @[Frontend.scala:120:28, :234:30, :236:34]
  wire        taken_rviReturn = taken_rviJALR & ~(s2_partial_insn[7]) & {_icache_io_resp_bits_data[3:2], _icache_io_resp_bits_data[0], s2_partial_insn[15]} == 4'h1;	// @[Frontend.scala:65:26, :120:28, :236:34, :237:{34,42,46,66,77}]
  wire        _taken_taken_T = taken_rviJALR | taken_rviJump;	// @[Frontend.scala:235:34, :236:34, :238:30]
  wire        taken_rviCall = _taken_taken_T & s2_partial_insn[7];	// @[Frontend.scala:120:28, :237:42, :238:{30,42}]
  wire [4:0]  _GEN_0 = {_icache_io_resp_bits_data[15:13], _icache_io_resp_bits_data[1:0]};	// @[Frontend.scala:65:26, :239:28]
  wire        taken_rvcBranch = _GEN_0 == 5'h19 | _GEN_0 == 5'h1D;	// @[Frontend.scala:239:{28,52,60}]
  wire        taken_rvcJump = _GEN_0 == 5'h15;	// @[Frontend.scala:239:28, :241:26]
  wire [5:0]  _GEN_1 = {_icache_io_resp_bits_data[15:12], _icache_io_resp_bits_data[1:0]};	// @[Frontend.scala:65:26, :239:28, :243:24]
  wire        taken_rvcJR = _GEN_1 == 6'h22 & ~(|(_icache_io_resp_bits_data[6:2]));	// @[Frontend.scala:65:26, :231:37, :243:{24,46,53,59}]
  wire        taken_rvcReturn = taken_rvcJR & {_icache_io_resp_bits_data[11:10], _icache_io_resp_bits_data[8:7]} == 4'h1;	// @[Frontend.scala:65:26, :237:66, :243:46, :244:{29,49}]
  wire        taken_rvcJALR = _GEN_1 == 6'h26 & ~(|(_icache_io_resp_bits_data[6:2]));	// @[Frontend.scala:65:26, :231:37, :243:{24,53,59}, :245:{26,49,62}]
  assign taken_taken = taken_prevRVI & (_taken_taken_T | taken_rviBranch & s2_btb_resp_bits_bht_value) | taken_valid & (taken_rvcJump | taken_rvcJALR | taken_rvcJR | taken_rvcBranch & s2_btb_resp_bits_bht_value);	// @[Frontend.scala:114:29, :229:31, :230:44, :234:36, :238:30, :239:52, :241:26, :243:46, :245:49, :250:{17,40,53,71}, :251:{15,47,60}]
  wire        taken_predictReturn = _btb_io_ras_head_valid & (taken_prevRVI & taken_rviReturn | taken_valid & taken_rvcReturn);	// @[Frontend.scala:193:21, :229:31, :230:44, :237:46, :244:29, :252:{49,61,74,83}]
  wire        taken_predictJump = taken_prevRVI & taken_rviJump | taken_valid & taken_rvcJump;	// @[Frontend.scala:229:31, :230:44, :235:34, :241:26, :253:{33,44,53}]
  wire        _taken_T_19 = taken_prevRVI & taken_rviBranch;	// @[Frontend.scala:229:31, :234:36, :254:53]
  wire        _taken_T_20 = taken_valid & taken_rvcBranch;	// @[Frontend.scala:230:44, :239:52, :254:75]
  wire        taken_predictBranch = s2_btb_resp_bits_bht_value & (_taken_T_19 | _taken_T_20);	// @[Frontend.scala:114:29, :254:{41,53,66,75}]
  wire        _taken_T_29 = s2_valid & s2_btb_resp_valid;	// @[Frontend.scala:103:25, :113:44, :256:22]
  wire        _taken_T_5 = _taken_T_29 & ~s2_btb_resp_bits_bridx & taken_valid & (&(_icache_io_resp_bits_data[1:0]));	// @[Frontend.scala:65:26, :114:29, :228:{39,45}, :230:44, :231:37, :256:{22,69,88}]
  wire [32:0] _taken_npc_T_2 = taken_prevRVI ? {{13{_icache_io_resp_bits_data[15]}}, s2_partial_insn[3] ? {_icache_io_resp_bits_data[3:0], s2_partial_insn[15:12], _icache_io_resp_bits_data[4], _icache_io_resp_bits_data[14:5]} : {{8{_icache_io_resp_bits_data[15]}}, s2_partial_insn[7], _icache_io_resp_bits_data[14:9], s2_partial_insn[11:8]}, 1'h0} - 33'h2 : {{22{_icache_io_resp_bits_data[12]}}, _icache_io_resp_bits_data[14] ? {{3{_icache_io_resp_bits_data[12]}}, _icache_io_resp_bits_data[6:5], _icache_io_resp_bits_data[2], _icache_io_resp_bits_data[11:10], _icache_io_resp_bits_data[4:3]} : {_icache_io_resp_bits_data[8], _icache_io_resp_bits_data[10:9], _icache_io_resp_bits_data[6], _icache_io_resp_bits_data[7], _icache_io_resp_bits_data[2], _icache_io_resp_bits_data[11], _icache_io_resp_bits_data[5:3]}, 1'h0};	// @[Cat.scala:33:92, Frontend.scala:65:26, :120:28, :229:31, :231:37, :237:42, :242:{23,28}, :247:{23,31}, :284:{44,61}, RVC.scala:44:{36,42,51,57,69,76}, :45:{27,35,43,49,59}, RocketCore.scala:1167:44, :1169:65, :1171:39, :1173:62, :1175:57]
  wire        taken_prevRVI_1 = taken_valid & (&(_icache_io_resp_bits_data[1:0]));	// @[Frontend.scala:65:26, :228:{39,45}, :229:31, :230:44, :231:37]
  wire        taken_valid_1 = _fq_io_enq_bits_mask_T_1[1] & ~taken_prevRVI_1;	// @[Frontend.scala:184:50, :229:31, :230:{38,44,47}]
  wire        taken_rviBranch_1 = _icache_io_resp_bits_data[6:0] == 7'h63;	// @[Frontend.scala:65:26, :234:{30,36}]
  wire        taken_rviJump_1 = _icache_io_resp_bits_data[6:0] == 7'h6F;	// @[Frontend.scala:65:26, :234:30, :235:34]
  wire        taken_rviJALR_1 = _icache_io_resp_bits_data[6:0] == 7'h67;	// @[Frontend.scala:65:26, :234:30, :236:34]
  wire        taken_rviReturn_1 = taken_rviJALR_1 & ~(_icache_io_resp_bits_data[7]) & {_icache_io_resp_bits_data[19:18], _icache_io_resp_bits_data[16:15]} == 4'h1;	// @[Frontend.scala:65:26, :236:34, :237:{34,42,46,66}]
  wire        _taken_taken_T_9 = taken_rviJALR_1 | taken_rviJump_1;	// @[Frontend.scala:235:34, :236:34, :238:30]
  wire        taken_rviCall_1 = _taken_taken_T_9 & _icache_io_resp_bits_data[7];	// @[Frontend.scala:65:26, :237:42, :238:{30,42}]
  wire [4:0]  _GEN_2 = {_icache_io_resp_bits_data[31:29], _icache_io_resp_bits_data[17:16]};	// @[Frontend.scala:65:26, :239:28]
  wire        taken_rvcBranch_1 = _GEN_2 == 5'h19 | _GEN_2 == 5'h1D;	// @[Frontend.scala:239:{28,52,60}]
  wire        taken_rvcJump_1 = _GEN_2 == 5'h15;	// @[Frontend.scala:239:28, :241:26]
  wire [5:0]  _GEN_3 = {_icache_io_resp_bits_data[31:28], _icache_io_resp_bits_data[17:16]};	// @[Frontend.scala:65:26, :239:28, :243:24]
  wire        taken_rvcJR_1 = _GEN_3 == 6'h22 & ~(|(_icache_io_resp_bits_data[22:18]));	// @[Frontend.scala:65:26, :231:37, :243:{24,46,53,59}]
  wire        taken_rvcReturn_1 = taken_rvcJR_1 & {_icache_io_resp_bits_data[27:26], _icache_io_resp_bits_data[24:23]} == 4'h1;	// @[Frontend.scala:65:26, :237:66, :243:46, :244:{29,49}]
  wire        taken_rvcJALR_1 = _GEN_3 == 6'h26 & ~(|(_icache_io_resp_bits_data[22:18]));	// @[Frontend.scala:65:26, :231:37, :243:{24,53,59}, :245:{26,49,62}]
  wire        taken_taken_1 = taken_prevRVI_1 & (_taken_taken_T_9 | taken_rviBranch_1 & s2_btb_resp_bits_bht_value) | taken_valid_1 & (taken_rvcJump_1 | taken_rvcJALR_1 | taken_rvcJR_1 | taken_rvcBranch_1 & s2_btb_resp_bits_bht_value);	// @[Frontend.scala:114:29, :229:31, :230:44, :234:36, :238:30, :239:52, :241:26, :243:46, :245:49, :250:{17,40,53,71}, :251:{15,47,60}]
  wire        taken_predictReturn_1 = _btb_io_ras_head_valid & (taken_prevRVI_1 & taken_rviReturn_1 | taken_valid_1 & taken_rvcReturn_1);	// @[Frontend.scala:193:21, :229:31, :230:44, :237:46, :244:29, :252:{49,61,74,83}]
  wire        taken_predictJump_1 = taken_prevRVI_1 & taken_rviJump_1 | taken_valid_1 & taken_rvcJump_1;	// @[Frontend.scala:229:31, :230:44, :235:34, :241:26, :253:{33,44,53}]
  wire        _taken_T_48 = taken_prevRVI_1 & taken_rviBranch_1;	// @[Frontend.scala:229:31, :234:36, :254:53]
  wire        _taken_T_49 = taken_valid_1 & taken_rvcBranch_1;	// @[Frontend.scala:230:44, :239:52, :254:75]
  wire        taken_predictBranch_1 = s2_btb_resp_bits_bht_value & (_taken_T_48 | _taken_T_49);	// @[Frontend.scala:114:29, :254:{41,53,66,75}]
  wire        _taken_T_34 = _taken_T_29 & s2_btb_resp_bits_bridx & taken_valid_1 & (&(_icache_io_resp_bits_data[17:16]));	// @[Frontend.scala:65:26, :114:29, :228:{39,45}, :230:44, :231:37, :256:{22,88}]
  assign after_idx = taken_taken ? 2'h1 : 2'h2;	// @[Frontend.scala:250:71, :265:25, :267:19]
  assign _GEN = taken_taken ? ((taken_prevRVI ? taken_rviReturn : taken_rvcReturn) ? 2'h3 : (taken_prevRVI ? taken_rviCall : taken_rvcJALR) ? 2'h2 : {1'h0, ~(taken_prevRVI ? taken_rviBranch : taken_rvcBranch)}) : (taken_prevRVI_1 ? taken_rviReturn_1 : taken_rvcReturn_1) ? 2'h3 : (taken_prevRVI_1 ? taken_rviCall_1 : taken_rvcJALR_1) ? 2'h2 : {1'h0, ~(taken_prevRVI_1 ? taken_rviBranch_1 : taken_rvcBranch_1)};	// @[Frontend.scala:123:29, :229:31, :234:36, :237:46, :238:42, :239:52, :244:29, :245:49, :250:71, :265:25, :269:{40,46,50}, :270:{46,50}, :271:{46,50}]
  wire [39:0] taken_pc_1 = s2_base_pc | 40'h2;	// @[Frontend.scala:217:22, :282:33]
  wire [30:0] _GEN_4 = taken_prevRVI_1 ? {{12{_icache_io_resp_bits_data[31]}}, _icache_io_resp_bits_data[3] ? {_icache_io_resp_bits_data[19:12], _icache_io_resp_bits_data[20], _icache_io_resp_bits_data[30:21]} : {{8{_icache_io_resp_bits_data[31]}}, _icache_io_resp_bits_data[7], _icache_io_resp_bits_data[30:25], _icache_io_resp_bits_data[11:8]}} : {{21{_icache_io_resp_bits_data[28]}}, _icache_io_resp_bits_data[30] ? {{3{_icache_io_resp_bits_data[28]}}, _icache_io_resp_bits_data[22:21], _icache_io_resp_bits_data[18], _icache_io_resp_bits_data[27:26], _icache_io_resp_bits_data[20:19]} : {_icache_io_resp_bits_data[24], _icache_io_resp_bits_data[26:25], _icache_io_resp_bits_data[22], _icache_io_resp_bits_data[23], _icache_io_resp_bits_data[18], _icache_io_resp_bits_data[27], _icache_io_resp_bits_data[21:19]}};	// @[Cat.scala:33:92, Frontend.scala:65:26, :229:31, :231:37, :237:42, :242:{23,28}, :247:{23,31}, :285:71, RVC.scala:44:{36,42,51,57,69,76}, :45:{27,35,43,49,59}, RocketCore.scala:1167:44, :1169:65, :1171:39, :1173:62, :1175:57]
  assign updateBTB = ~taken_taken & ~s2_btb_resp_valid & (taken_predictBranch_1 & s2_btb_resp_bits_bht_value | taken_predictJump_1 | taken_predictReturn_1) | ~s2_btb_resp_valid & (taken_predictBranch & s2_btb_resp_bits_bht_value | taken_predictJump | taken_predictReturn);	// @[Frontend.scala:113:44, :114:29, :250:71, :252:49, :253:44, :254:41, :265:{13,25}, :293:{15,34,52,106,125}, :294:21]
  wire        taken = taken_taken | taken_taken_1;	// @[Frontend.scala:250:71, :306:19]
  assign predicted_npc = ~taken_taken & ~s2_btb_taken & s2_valid & taken_predictReturn_1 | ~s2_btb_taken & s2_valid & taken_predictReturn ? {1'h0, _btb_io_ras_head_bits} : ~taken_taken & ~s2_btb_taken & s2_valid & (taken_predictBranch_1 | taken_predictJump_1) ? (taken_prevRVI_1 ? taken_pc_1 - 40'h2 : taken_pc_1) + {{8{_GEN_4[30]}}, _GEN_4, 1'h0} : ~s2_btb_taken & s2_valid & (taken_predictBranch | taken_predictJump) ? s2_base_pc + {{7{_taken_npc_T_2[32]}}, _taken_npc_T_2} : predicted_taken ? {_btb_io_resp_bits_target[38], _btb_io_resp_bits_target} : ~(~s1_pc | 40'h3) + 40'h4;	// @[Cat.scala:33:92, Frontend.scala:103:25, :110:18, :115:40, :123:{20,22,29}, :124:25, :125:34, :193:21, :208:{29,56}, :209:21, :217:22, :220:29, :229:31, :250:71, :252:49, :253:44, :254:41, :265:{13,25}, :274:{15,30}, :278:44, :279:20, :281:{44,61}, :282:33, :284:{39,44}, :285:{23,36,66,71}, :286:27, :325:19, :326:21, package.scala:124:38]
  wire        _GEN_5 = ~s2_btb_taken & taken;	// @[Frontend.scala:115:40, :186:22, :306:19, :331:{11,26}, :332:20, :333:34]
  assign s2_redirect = ~s2_btb_taken & taken & _T_37 | io_cpu_req_valid;	// @[Decoupled.scala:51:35, Frontend.scala:115:40, :140:32, :306:19, :331:{11,26}, :332:20, :336:{31,45}]
  reg         gpa_valid;	// @[Frontend.scala:348:22]
  wire        _GEN_6 = s2_btb_taken ? _taken_T_5 | wrong_path : _T_37 & taken_taken & ~taken_predictBranch & ~taken_predictJump & ~taken_predictReturn | _taken_T_5 | wrong_path;	// @[Decoupled.scala:51:35, Frontend.scala:115:40, :121:27, :250:71, :252:49, :253:44, :254:41, :256:{88,97}, :261:20, :274:30, :275:{44,62,75,78,94}, :276:24]
  wire        _taken_T_61 = taken_valid_1 & ~taken_taken & (&(_icache_io_resp_bits_data[17:16]));	// @[Frontend.scala:65:26, :228:{39,45}, :230:44, :231:37, :250:71, :265:13, :301:37]
  always @(posedge clock) begin
    s1_valid <= s0_valid;	// @[Frontend.scala:102:21, :108:35]
    s1_pc <= _io_cpu_npc_T_3;	// @[Frontend.scala:110:18, :376:27]
    if (io_cpu_req_valid)
      s1_speculative <= io_cpu_req_bits_speculative;	// @[Frontend.scala:111:27]
    else if (s2_replay)	// @[Frontend.scala:129:46]
      s1_speculative <= s2_speculative;	// @[Frontend.scala:111:27, :118:31]
    else	// @[Frontend.scala:129:46]
      s1_speculative <= s1_speculative | s2_valid & ~s2_speculative | predicted_taken;	// @[Frontend.scala:103:25, :111:27, :118:31, :136:{53,56,72}, :208:29]
    if (~s2_replay) begin	// @[Frontend.scala:129:46]
      s2_btb_resp_valid <= _btb_io_resp_valid;	// @[Frontend.scala:113:44, :193:21]
      s2_btb_resp_bits_taken <= _btb_io_resp_bits_taken;	// @[Frontend.scala:114:29, :193:21]
      s2_btb_resp_bits_bridx <= _btb_io_resp_bits_bridx;	// @[Frontend.scala:114:29, :193:21]
      s2_btb_resp_bits_entry <= _btb_io_resp_bits_entry;	// @[Frontend.scala:114:29, :193:21]
      s2_btb_resp_bits_bht_history <= _btb_io_resp_bits_bht_history;	// @[Frontend.scala:114:29, :193:21]
      s2_btb_resp_bits_bht_value <= _btb_io_resp_bits_bht_value;	// @[Frontend.scala:114:29, :193:21]
      s2_tlb_resp_miss <= _tlb_io_resp_miss;	// @[Frontend.scala:100:19, :116:24]
      s2_tlb_resp_pf_inst <= _tlb_io_resp_pf_inst;	// @[Frontend.scala:100:19, :116:24]
      s2_tlb_resp_ae_inst <= _tlb_io_resp_ae_inst;	// @[Frontend.scala:100:19, :116:24]
      s2_tlb_resp_cacheable <= _tlb_io_resp_cacheable;	// @[Frontend.scala:100:19, :116:24]
    end
    s2_tlb_resp_gf_inst <= s2_replay & s2_tlb_resp_gf_inst;	// @[Frontend.scala:116:24, :129:46, :142:21, :146:17]
    if (_T_37 & _taken_T_61)	// @[Decoupled.scala:51:35, Frontend.scala:120:28, :299:31, :301:{37,46}, :303:29]
      s2_partial_insn <= _icache_io_resp_bits_data[31:16] | 16'h3;	// @[Frontend.scala:65:26, :120:28, :231:37, :303:37]
    fq_io_enq_valid_REG <= s1_valid;	// @[Frontend.scala:102:21, :179:29]
    if (reset) begin
      s2_valid <= 1'h0;	// @[Frontend.scala:103:25]
      s2_pc <= 40'h10040;	// @[Frontend.scala:112:22]
      s2_speculative <= 1'h0;	// @[Frontend.scala:118:31]
      s2_partial_insn_valid <= 1'h0;	// @[Frontend.scala:119:38]
      wrong_path <= 1'h0;	// @[Frontend.scala:121:27]
      s2_replay_REG <= 1'h1;	// @[Frontend.scala:129:56]
      recent_progress_counter <= 2'h3;	// @[Frontend.scala:123:29, :150:40]
    end
    else begin
      s2_valid <= ~s2_replay & ~s2_redirect;	// @[Frontend.scala:103:25, :129:46, :140:32, :141:12, :142:{9,21}, :143:{14,17}, :331:26, :332:20, :336:{31,45}]
      if (~s2_replay) begin	// @[Frontend.scala:129:46]
        s2_pc <= s1_pc;	// @[Frontend.scala:110:18, :112:22]
        s2_speculative <= s1_speculative;	// @[Frontend.scala:111:27, :118:31]
      end
      s2_partial_insn_valid <= ~(s2_redirect | _T_37 & (s2_btb_taken | taken)) & (_T_37 ? _taken_T_61 : s2_partial_insn_valid);	// @[Decoupled.scala:51:35, Frontend.scala:115:40, :119:38, :140:32, :299:31, :301:{37,46}, :306:19, :328:{26,43,54}, :329:29, :331:26, :332:20, :336:{31,45}, :341:{24,48}]
      wrong_path <= ~io_cpu_req_valid & (taken_taken | s2_btb_taken ? _taken_T_34 | _GEN_6 : _T_37 & taken_taken_1 & ~taken_predictBranch_1 & ~taken_predictJump_1 & ~taken_predictReturn_1 | _taken_T_34 | _GEN_6);	// @[Decoupled.scala:51:35, Frontend.scala:115:40, :121:27, :250:71, :252:49, :253:44, :254:41, :256:{88,97}, :261:20, :265:25, :274:30, :275:{44,62,75,78,94}, :276:24, :342:{29,42}]
      s2_replay_REG <= s2_replay & ~s0_valid;	// @[Frontend.scala:108:35, :129:{46,56,67,70}]
      if (io_cpu_progress)
        recent_progress_counter <= 2'h3;	// @[Frontend.scala:123:29, :150:40]
      else if (io_ptw_req_ready & _tlb_io_ptw_req_valid & (|recent_progress_counter))	// @[Frontend.scala:100:19, :150:40, :151:49, :152:24]
        recent_progress_counter <= recent_progress_counter - 2'h1;	// @[Frontend.scala:150:40, :152:97]
    end
    if (io_cpu_req_valid)
      gpa_valid <= 1'h0;	// @[Frontend.scala:348:22]
    else
      gpa_valid <= _T_37 & s2_tlb_resp_gf_inst | gpa_valid;	// @[Decoupled.scala:51:35, Frontend.scala:116:24, :348:22, :350:{24,48}, :354:15]
  end // always @(posedge)
  `ifndef SYNTHESIS
    always @(posedge clock) begin	// @[Frontend.scala:91:9]
      if (~reset & ~(~(io_cpu_req_valid | io_cpu_sfence_valid | io_cpu_flush_icache | io_cpu_bht_update_valid | io_cpu_btb_update_valid) | io_cpu_might_request)) begin	// @[Frontend.scala:91:{9,10,102,130}]
        if (`ASSERT_VERBOSE_COND_)	// @[Frontend.scala:91:9]
          $error("Assertion failed\n    at Frontend.scala:91 assert(!(io.cpu.req.valid || io.cpu.sfence.valid || io.cpu.flush_icache || io.cpu.bht_update.valid || io.cpu.btb_update.valid) || io.cpu.might_request)\n");	// @[Frontend.scala:91:9]
        if (`STOP_COND_)	// @[Frontend.scala:91:9]
          $fatal;	// @[Frontend.scala:91:9]
      end
      if (~reset & s2_speculative & io_ptw_customCSRs_csrs_0_value[3] & ~_icache_io_s2_kill_T_2) begin	// @[CustomCSRs.scala:40:69, Frontend.scala:118:31, :175:71, :189:{9,113}]
        if (`ASSERT_VERBOSE_COND_)	// @[Frontend.scala:189:9]
          $error("Assertion failed\n    at Frontend.scala:189 assert(!(s2_speculative && io.ptw.customCSRs.asInstanceOf[RocketCustomCSRs].disableSpeculativeICacheRefill && !icache.io.s2_kill))\n");	// @[Frontend.scala:189:9]
        if (`STOP_COND_)	// @[Frontend.scala:189:9]
          $fatal;	// @[Frontend.scala:189:9]
      end
      if (~reset & ~(~s2_partial_insn_valid | _fq_io_enq_bits_mask_T_1[0])) begin	// @[Frontend.scala:119:38, :184:50, :230:38, :340:{11,12,35}]
        if (`ASSERT_VERBOSE_COND_)	// @[Frontend.scala:340:11]
          $error("Assertion failed\n    at Frontend.scala:340 assert(!s2_partial_insn_valid || fq.io.enq.bits.mask(0))\n");	// @[Frontend.scala:340:11]
        if (`STOP_COND_)	// @[Frontend.scala:340:11]
          $fatal;	// @[Frontend.scala:340:11]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        s1_valid = _RANDOM_0[1];	// @[Frontend.scala:102:21]
        s2_valid = _RANDOM_0[2];	// @[Frontend.scala:102:21, :103:25]
        s1_pc = {_RANDOM_0[31:3], _RANDOM_1[10:0]};	// @[Frontend.scala:102:21, :110:18]
        s1_speculative = _RANDOM_1[11];	// @[Frontend.scala:110:18, :111:27]
        s2_pc = {_RANDOM_1[31:12], _RANDOM_2[19:0]};	// @[Frontend.scala:110:18, :112:22]
        s2_btb_resp_valid = _RANDOM_2[20];	// @[Frontend.scala:112:22, :113:44]
        s2_btb_resp_bits_taken = _RANDOM_2[23];	// @[Frontend.scala:112:22, :114:29]
        s2_btb_resp_bits_bridx = _RANDOM_2[26];	// @[Frontend.scala:112:22, :114:29]
        s2_btb_resp_bits_entry = _RANDOM_4[6:2];	// @[Frontend.scala:114:29]
        s2_btb_resp_bits_bht_history = _RANDOM_4[14:7];	// @[Frontend.scala:114:29]
        s2_btb_resp_bits_bht_value = _RANDOM_4[15];	// @[Frontend.scala:114:29]
        s2_tlb_resp_miss = _RANDOM_4[16];	// @[Frontend.scala:114:29, :116:24]
        s2_tlb_resp_pf_inst = _RANDOM_6[28];	// @[Frontend.scala:116:24]
        s2_tlb_resp_gf_inst = _RANDOM_6[31];	// @[Frontend.scala:116:24]
        s2_tlb_resp_ae_inst = _RANDOM_7[2];	// @[Frontend.scala:116:24]
        s2_tlb_resp_cacheable = _RANDOM_7[6];	// @[Frontend.scala:116:24]
        s2_speculative = _RANDOM_7[9];	// @[Frontend.scala:116:24, :118:31]
        s2_partial_insn_valid = _RANDOM_7[10];	// @[Frontend.scala:116:24, :119:38]
        s2_partial_insn = _RANDOM_7[26:11];	// @[Frontend.scala:116:24, :120:28]
        wrong_path = _RANDOM_7[27];	// @[Frontend.scala:116:24, :121:27]
        s2_replay_REG = _RANDOM_7[28];	// @[Frontend.scala:116:24, :129:56]
        recent_progress_counter = _RANDOM_7[30:29];	// @[Frontend.scala:116:24, :150:40]
        fq_io_enq_valid_REG = _RANDOM_7[31];	// @[Frontend.scala:116:24, :179:29]
        gpa_valid = _RANDOM_8[0];	// @[Frontend.scala:348:22]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  ICache icache (	// @[Frontend.scala:65:26]
    .clock                          (clock),
    .reset                          (reset),
    .auto_master_out_a_ready        (auto_icache_master_out_a_ready),
    .auto_master_out_d_valid        (auto_icache_master_out_d_valid),
    .auto_master_out_d_bits_opcode  (auto_icache_master_out_d_bits_opcode),
    .auto_master_out_d_bits_size    (auto_icache_master_out_d_bits_size),
    .auto_master_out_d_bits_data    (auto_icache_master_out_d_bits_data),
    .auto_master_out_d_bits_corrupt (auto_icache_master_out_d_bits_corrupt),
    .io_req_valid                   (s0_valid),	// @[Frontend.scala:108:35]
    .io_req_bits_addr               (_io_cpu_npc_T_3[38:0]),	// @[Frontend.scala:169:27, :376:27]
    .io_s1_paddr                    (_tlb_io_resp_paddr),	// @[Frontend.scala:100:19]
    .io_s1_kill                     (s2_redirect | _tlb_io_resp_miss | s2_replay),	// @[Frontend.scala:100:19, :129:46, :140:32, :173:56, :331:26, :332:20, :336:{31,45}]
    .io_s2_kill                     (_icache_io_s2_kill_T_2),	// @[Frontend.scala:175:71]
    .io_invalidate                  (io_cpu_flush_icache),
    .auto_master_out_a_valid        (auto_icache_master_out_a_valid),
    .auto_master_out_a_bits_address (auto_icache_master_out_a_bits_address),
    .io_resp_valid                  (_icache_io_resp_valid),
    .io_resp_bits_data              (_icache_io_resp_bits_data),
    .io_resp_bits_replay            (_icache_io_resp_bits_replay),
    .io_resp_bits_ae                (_icache_io_resp_bits_ae)
  );
  ShiftQueue fq (	// @[Frontend.scala:86:64]
    .clock                       (clock),
    .reset                       (reset | io_cpu_req_valid),	// @[Frontend.scala:86:35]
    .io_enq_valid                (_fq_io_enq_valid_T_6),	// @[Frontend.scala:179:52]
    .io_enq_bits_btb_taken       (_GEN_5 | s2_btb_taken),	// @[Frontend.scala:115:40, :186:22, :187:28, :331:26, :332:20, :333:34, :334:34]
    .io_enq_bits_btb_bridx       (_GEN_5 ? ~taken_taken : s2_btb_resp_bits_bridx),	// @[Frontend.scala:114:29, :186:22, :250:71, :265:13, :331:26, :332:20, :333:34]
    .io_enq_bits_btb_entry       (_GEN_5 ? 5'h1C : s2_btb_resp_bits_entry),	// @[Frontend.scala:114:29, :186:22, :315:47, :331:26, :332:20, :333:34, :335:34]
    .io_enq_bits_btb_bht_history (s2_btb_resp_bits_bht_history),	// @[Frontend.scala:114:29]
    .io_enq_bits_pc              (s2_pc),	// @[Frontend.scala:112:22]
    .io_enq_bits_data            (_icache_io_resp_bits_data),	// @[Frontend.scala:65:26]
    .io_enq_bits_xcpt_pf_inst    (s2_tlb_resp_pf_inst),	// @[Frontend.scala:116:24]
    .io_enq_bits_xcpt_gf_inst    (s2_tlb_resp_gf_inst),	// @[Frontend.scala:116:24]
    .io_enq_bits_xcpt_ae_inst    (_icache_io_resp_valid & _icache_io_resp_bits_ae | s2_tlb_resp_ae_inst),	// @[Frontend.scala:65:26, :116:24, :188:23, :190:{30,57,87}]
    .io_enq_bits_replay          (_taken_T_34 | _taken_T_5 | _icache_io_resp_bits_replay | _icache_io_s2_kill_T_2 & ~_icache_io_resp_valid & ~s2_xcpt | _fq_io_enq_bits_replay_T_5),	// @[Frontend.scala:65:26, :117:60, :175:71, :179:112, :185:{25,80,102,105}, :256:{88,97}, :260:31]
    .io_deq_ready                (io_cpu_resp_ready),
    .io_enq_ready                (_fq_io_enq_ready),
    .io_deq_valid                (io_cpu_resp_valid),
    .io_deq_bits_btb_taken       (io_cpu_resp_bits_btb_taken),
    .io_deq_bits_btb_bridx       (io_cpu_resp_bits_btb_bridx),
    .io_deq_bits_btb_entry       (io_cpu_resp_bits_btb_entry),
    .io_deq_bits_btb_bht_history (io_cpu_resp_bits_btb_bht_history),
    .io_deq_bits_pc              (io_cpu_resp_bits_pc),
    .io_deq_bits_data            (io_cpu_resp_bits_data),
    .io_deq_bits_xcpt_pf_inst    (io_cpu_resp_bits_xcpt_pf_inst),
    .io_deq_bits_xcpt_gf_inst    (io_cpu_resp_bits_xcpt_gf_inst),
    .io_deq_bits_xcpt_ae_inst    (io_cpu_resp_bits_xcpt_ae_inst),
    .io_deq_bits_replay          (io_cpu_resp_bits_replay),
    .io_mask                     (_fq_io_mask)
  );
  TLB_1 tlb (	// @[Frontend.scala:100:19]
    .clock                         (clock),
    .reset                         (reset),
    .io_req_valid                  (s1_valid & ~s2_replay),	// @[Frontend.scala:102:21, :129:46, :142:9, :158:32]
    .io_req_bits_vaddr             (s1_pc),	// @[Frontend.scala:110:18]
    .io_req_bits_prv               (io_ptw_status_prv),
    .io_sfence_valid               (io_cpu_sfence_valid),
    .io_sfence_bits_rs1            (io_cpu_sfence_bits_rs1),
    .io_sfence_bits_rs2            (io_cpu_sfence_bits_rs2),
    .io_sfence_bits_addr           (io_cpu_sfence_bits_addr),
    .io_ptw_req_ready              (io_ptw_req_ready),
    .io_ptw_resp_valid             (io_ptw_resp_valid),
    .io_ptw_resp_bits_ae_ptw       (io_ptw_resp_bits_ae_ptw),
    .io_ptw_resp_bits_ae_final     (io_ptw_resp_bits_ae_final),
    .io_ptw_resp_bits_pf           (io_ptw_resp_bits_pf),
    .io_ptw_resp_bits_gf           (io_ptw_resp_bits_gf),
    .io_ptw_resp_bits_hr           (io_ptw_resp_bits_hr),
    .io_ptw_resp_bits_hw           (io_ptw_resp_bits_hw),
    .io_ptw_resp_bits_hx           (io_ptw_resp_bits_hx),
    .io_ptw_resp_bits_pte_ppn      (io_ptw_resp_bits_pte_ppn),
    .io_ptw_resp_bits_pte_d        (io_ptw_resp_bits_pte_d),
    .io_ptw_resp_bits_pte_a        (io_ptw_resp_bits_pte_a),
    .io_ptw_resp_bits_pte_g        (io_ptw_resp_bits_pte_g),
    .io_ptw_resp_bits_pte_u        (io_ptw_resp_bits_pte_u),
    .io_ptw_resp_bits_pte_x        (io_ptw_resp_bits_pte_x),
    .io_ptw_resp_bits_pte_w        (io_ptw_resp_bits_pte_w),
    .io_ptw_resp_bits_pte_r        (io_ptw_resp_bits_pte_r),
    .io_ptw_resp_bits_pte_v        (io_ptw_resp_bits_pte_v),
    .io_ptw_resp_bits_level        (io_ptw_resp_bits_level),
    .io_ptw_resp_bits_homogeneous  (io_ptw_resp_bits_homogeneous),
    .io_ptw_ptbr_mode              (io_ptw_ptbr_mode),
    .io_ptw_status_debug           (io_ptw_status_debug),
    .io_ptw_pmp_0_cfg_l            (io_ptw_pmp_0_cfg_l),
    .io_ptw_pmp_0_cfg_a            (io_ptw_pmp_0_cfg_a),
    .io_ptw_pmp_0_cfg_x            (io_ptw_pmp_0_cfg_x),
    .io_ptw_pmp_0_cfg_w            (io_ptw_pmp_0_cfg_w),
    .io_ptw_pmp_0_cfg_r            (io_ptw_pmp_0_cfg_r),
    .io_ptw_pmp_0_addr             (io_ptw_pmp_0_addr),
    .io_ptw_pmp_0_mask             (io_ptw_pmp_0_mask),
    .io_ptw_pmp_1_cfg_l            (io_ptw_pmp_1_cfg_l),
    .io_ptw_pmp_1_cfg_a            (io_ptw_pmp_1_cfg_a),
    .io_ptw_pmp_1_cfg_x            (io_ptw_pmp_1_cfg_x),
    .io_ptw_pmp_1_cfg_w            (io_ptw_pmp_1_cfg_w),
    .io_ptw_pmp_1_cfg_r            (io_ptw_pmp_1_cfg_r),
    .io_ptw_pmp_1_addr             (io_ptw_pmp_1_addr),
    .io_ptw_pmp_1_mask             (io_ptw_pmp_1_mask),
    .io_ptw_pmp_2_cfg_l            (io_ptw_pmp_2_cfg_l),
    .io_ptw_pmp_2_cfg_a            (io_ptw_pmp_2_cfg_a),
    .io_ptw_pmp_2_cfg_x            (io_ptw_pmp_2_cfg_x),
    .io_ptw_pmp_2_cfg_w            (io_ptw_pmp_2_cfg_w),
    .io_ptw_pmp_2_cfg_r            (io_ptw_pmp_2_cfg_r),
    .io_ptw_pmp_2_addr             (io_ptw_pmp_2_addr),
    .io_ptw_pmp_2_mask             (io_ptw_pmp_2_mask),
    .io_ptw_pmp_3_cfg_l            (io_ptw_pmp_3_cfg_l),
    .io_ptw_pmp_3_cfg_a            (io_ptw_pmp_3_cfg_a),
    .io_ptw_pmp_3_cfg_x            (io_ptw_pmp_3_cfg_x),
    .io_ptw_pmp_3_cfg_w            (io_ptw_pmp_3_cfg_w),
    .io_ptw_pmp_3_cfg_r            (io_ptw_pmp_3_cfg_r),
    .io_ptw_pmp_3_addr             (io_ptw_pmp_3_addr),
    .io_ptw_pmp_3_mask             (io_ptw_pmp_3_mask),
    .io_ptw_pmp_4_cfg_l            (io_ptw_pmp_4_cfg_l),
    .io_ptw_pmp_4_cfg_a            (io_ptw_pmp_4_cfg_a),
    .io_ptw_pmp_4_cfg_x            (io_ptw_pmp_4_cfg_x),
    .io_ptw_pmp_4_cfg_w            (io_ptw_pmp_4_cfg_w),
    .io_ptw_pmp_4_cfg_r            (io_ptw_pmp_4_cfg_r),
    .io_ptw_pmp_4_addr             (io_ptw_pmp_4_addr),
    .io_ptw_pmp_4_mask             (io_ptw_pmp_4_mask),
    .io_ptw_pmp_5_cfg_l            (io_ptw_pmp_5_cfg_l),
    .io_ptw_pmp_5_cfg_a            (io_ptw_pmp_5_cfg_a),
    .io_ptw_pmp_5_cfg_x            (io_ptw_pmp_5_cfg_x),
    .io_ptw_pmp_5_cfg_w            (io_ptw_pmp_5_cfg_w),
    .io_ptw_pmp_5_cfg_r            (io_ptw_pmp_5_cfg_r),
    .io_ptw_pmp_5_addr             (io_ptw_pmp_5_addr),
    .io_ptw_pmp_5_mask             (io_ptw_pmp_5_mask),
    .io_ptw_pmp_6_cfg_l            (io_ptw_pmp_6_cfg_l),
    .io_ptw_pmp_6_cfg_a            (io_ptw_pmp_6_cfg_a),
    .io_ptw_pmp_6_cfg_x            (io_ptw_pmp_6_cfg_x),
    .io_ptw_pmp_6_cfg_w            (io_ptw_pmp_6_cfg_w),
    .io_ptw_pmp_6_cfg_r            (io_ptw_pmp_6_cfg_r),
    .io_ptw_pmp_6_addr             (io_ptw_pmp_6_addr),
    .io_ptw_pmp_6_mask             (io_ptw_pmp_6_mask),
    .io_ptw_pmp_7_cfg_l            (io_ptw_pmp_7_cfg_l),
    .io_ptw_pmp_7_cfg_a            (io_ptw_pmp_7_cfg_a),
    .io_ptw_pmp_7_cfg_x            (io_ptw_pmp_7_cfg_x),
    .io_ptw_pmp_7_cfg_w            (io_ptw_pmp_7_cfg_w),
    .io_ptw_pmp_7_cfg_r            (io_ptw_pmp_7_cfg_r),
    .io_ptw_pmp_7_addr             (io_ptw_pmp_7_addr),
    .io_ptw_pmp_7_mask             (io_ptw_pmp_7_mask),
    .io_kill                       (~s2_valid | s2_kill_speculative_tlb_refill),	// @[Frontend.scala:103:25, :106:58, :155:55, :166:28]
    .io_resp_miss                  (_tlb_io_resp_miss),
    .io_resp_paddr                 (_tlb_io_resp_paddr),
    .io_resp_pf_inst               (_tlb_io_resp_pf_inst),
    .io_resp_ae_inst               (_tlb_io_resp_ae_inst),
    .io_resp_cacheable             (_tlb_io_resp_cacheable),
    .io_ptw_req_valid              (_tlb_io_ptw_req_valid),
    .io_ptw_req_bits_valid         (io_ptw_req_bits_valid),
    .io_ptw_req_bits_bits_addr     (io_ptw_req_bits_bits_addr),
    .io_ptw_req_bits_bits_need_gpa (io_ptw_req_bits_bits_need_gpa),
    .io_ptw_req_bits_bits_vstage1  (io_ptw_req_bits_bits_vstage1),
    .io_ptw_req_bits_bits_stage2   (io_ptw_req_bits_bits_stage2)
  );
  BTB btb (	// @[Frontend.scala:193:21]
    .clock                                 (clock),
    .reset                                 (reset),
    .io_req_bits_addr                      (s1_pc[38:0]),	// @[Frontend.scala:110:18, :196:26]
    .io_btb_update_valid                   (io_cpu_btb_update_valid ? io_cpu_btb_update_valid : _T_37 & ~wrong_path & ~(_fq_io_mask[1]) & updateBTB),	// @[Decoupled.scala:51:35, Frontend.scala:86:64, :121:27, :197:23, :265:25, :293:125, :294:21, :312:37, :313:{33,44}, :314:{31,52,87}]
    .io_btb_update_bits_prediction_entry   (io_cpu_btb_update_valid ? io_cpu_btb_update_bits_prediction_entry : 5'h1C),	// @[Frontend.scala:197:23, :312:37, :315:47]
    .io_btb_update_bits_pc                 (io_cpu_btb_update_valid ? io_cpu_btb_update_bits_pc : s2_base_pc[38:0]),	// @[Frontend.scala:197:23, :217:22, :312:37, :319:33]
    .io_btb_update_bits_isValid            (~io_cpu_btb_update_valid | io_cpu_btb_update_bits_isValid),	// @[Frontend.scala:197:23, :312:{11,37}, :316:38]
    .io_btb_update_bits_br_pc              (io_cpu_btb_update_valid ? io_cpu_btb_update_bits_br_pc : s2_base_pc[38:0] | {37'h0, ~taken_taken, 1'h0}),	// @[Frontend.scala:197:23, :217:22, :250:71, :265:13, :312:37, :318:{36,50}]
    .io_btb_update_bits_cfiType            (io_cpu_btb_update_valid ? io_cpu_btb_update_bits_cfiType : _GEN),	// @[Frontend.scala:197:23, :265:25, :269:40, :312:37, :317:38]
    .io_bht_update_valid                   (io_cpu_bht_update_valid),
    .io_bht_update_bits_prediction_history (io_cpu_bht_update_bits_prediction_history),
    .io_bht_update_bits_pc                 (io_cpu_bht_update_bits_pc),
    .io_bht_update_bits_branch             (io_cpu_bht_update_bits_branch),
    .io_bht_update_bits_taken              (io_cpu_bht_update_bits_taken),
    .io_bht_update_bits_mispredict         (io_cpu_bht_update_bits_mispredict),
    .io_bht_advance_valid                  (~taken_taken & (_taken_T_48 | _taken_T_49) ? _T_37 & ~wrong_path : (_taken_T_19 | _taken_T_20) & _T_37 & ~wrong_path),	// @[Decoupled.scala:51:35, Frontend.scala:121:27, :201:30, :250:71, :254:{53,75}, :265:{13,25}, :268:54, :289:{36,59}, :290:{36,54}]
    .io_bht_advance_bits_bht_value         (s2_btb_resp_bits_bht_value),	// @[Frontend.scala:114:29]
    .io_ras_update_valid                   (taken_taken ? _T_37 & ~wrong_path & (taken_prevRVI & (taken_rviCall | taken_rviReturn) | taken_valid & (taken_rvcJALR | taken_rvcReturn)) : _T_37 & ~wrong_path & (taken_prevRVI_1 & (taken_rviCall_1 | taken_rviReturn_1) | taken_valid_1 & (taken_rvcJALR_1 | taken_rvcReturn_1))),	// @[Decoupled.scala:51:35, Frontend.scala:121:27, :229:31, :230:44, :237:46, :238:42, :244:29, :245:49, :250:71, :265:25, :268:{33,54,66,78,90,104,113,125}]
    .io_ras_update_bits_cfiType            (_GEN),	// @[Frontend.scala:265:25, :269:40]
    .io_ras_update_bits_returnAddr         (s2_base_pc[38:0] + {36'h0, after_idx, 1'h0}),	// @[Frontend.scala:217:22, :265:25, :267:19, :322:53]
    .io_flush                              (_taken_T_34 | _taken_T_5),	// @[Frontend.scala:256:{88,97}, :259:22]
    .io_resp_valid                         (_btb_io_resp_valid),
    .io_resp_bits_taken                    (_btb_io_resp_bits_taken),
    .io_resp_bits_bridx                    (_btb_io_resp_bits_bridx),
    .io_resp_bits_target                   (_btb_io_resp_bits_target),
    .io_resp_bits_entry                    (_btb_io_resp_bits_entry),
    .io_resp_bits_bht_history              (_btb_io_resp_bits_bht_history),
    .io_resp_bits_bht_value                (_btb_io_resp_bits_bht_value),
    .io_ras_head_valid                     (_btb_io_ras_head_valid),
    .io_ras_head_bits                      (_btb_io_ras_head_bits)
  );
  assign io_cpu_gpa_valid = gpa_valid;	// @[Frontend.scala:348:22]
  assign io_ptw_req_valid = _tlb_io_ptw_req_valid;	// @[Frontend.scala:100:19]
endmodule

