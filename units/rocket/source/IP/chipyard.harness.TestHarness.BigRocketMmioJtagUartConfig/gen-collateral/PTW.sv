// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module PTW(
  input         clock,
                reset,
                io_requestor_0_req_valid,
                io_requestor_0_req_bits_valid,
  input  [26:0] io_requestor_0_req_bits_bits_addr,
  input         io_requestor_0_req_bits_bits_need_gpa,
                io_requestor_0_req_bits_bits_vstage1,
                io_requestor_0_req_bits_bits_stage2,
                io_requestor_1_req_valid,
                io_requestor_1_req_bits_valid,
  input  [26:0] io_requestor_1_req_bits_bits_addr,
  input         io_requestor_1_req_bits_bits_need_gpa,
                io_requestor_1_req_bits_bits_vstage1,
                io_requestor_1_req_bits_bits_stage2,
                io_mem_req_ready,
                io_mem_s2_nack,
                io_mem_resp_valid,
  input  [63:0] io_mem_resp_bits_data,
  input         io_mem_s2_xcpt_ae_ld,
  input  [3:0]  io_dpath_ptbr_mode,
  input  [43:0] io_dpath_ptbr_ppn,
  input         io_dpath_sfence_valid,
                io_dpath_sfence_bits_rs1,
                io_dpath_status_debug,
  input  [1:0]  io_dpath_status_prv,
  input         io_dpath_status_mxr,
                io_dpath_status_sum,
                io_dpath_pmp_0_cfg_l,
  input  [1:0]  io_dpath_pmp_0_cfg_a,
  input         io_dpath_pmp_0_cfg_x,
                io_dpath_pmp_0_cfg_w,
                io_dpath_pmp_0_cfg_r,
  input  [29:0] io_dpath_pmp_0_addr,
  input  [31:0] io_dpath_pmp_0_mask,
  input         io_dpath_pmp_1_cfg_l,
  input  [1:0]  io_dpath_pmp_1_cfg_a,
  input         io_dpath_pmp_1_cfg_x,
                io_dpath_pmp_1_cfg_w,
                io_dpath_pmp_1_cfg_r,
  input  [29:0] io_dpath_pmp_1_addr,
  input  [31:0] io_dpath_pmp_1_mask,
  input         io_dpath_pmp_2_cfg_l,
  input  [1:0]  io_dpath_pmp_2_cfg_a,
  input         io_dpath_pmp_2_cfg_x,
                io_dpath_pmp_2_cfg_w,
                io_dpath_pmp_2_cfg_r,
  input  [29:0] io_dpath_pmp_2_addr,
  input  [31:0] io_dpath_pmp_2_mask,
  input         io_dpath_pmp_3_cfg_l,
  input  [1:0]  io_dpath_pmp_3_cfg_a,
  input         io_dpath_pmp_3_cfg_x,
                io_dpath_pmp_3_cfg_w,
                io_dpath_pmp_3_cfg_r,
  input  [29:0] io_dpath_pmp_3_addr,
  input  [31:0] io_dpath_pmp_3_mask,
  input         io_dpath_pmp_4_cfg_l,
  input  [1:0]  io_dpath_pmp_4_cfg_a,
  input         io_dpath_pmp_4_cfg_x,
                io_dpath_pmp_4_cfg_w,
                io_dpath_pmp_4_cfg_r,
  input  [29:0] io_dpath_pmp_4_addr,
  input  [31:0] io_dpath_pmp_4_mask,
  input         io_dpath_pmp_5_cfg_l,
  input  [1:0]  io_dpath_pmp_5_cfg_a,
  input         io_dpath_pmp_5_cfg_x,
                io_dpath_pmp_5_cfg_w,
                io_dpath_pmp_5_cfg_r,
  input  [29:0] io_dpath_pmp_5_addr,
  input  [31:0] io_dpath_pmp_5_mask,
  input         io_dpath_pmp_6_cfg_l,
  input  [1:0]  io_dpath_pmp_6_cfg_a,
  input         io_dpath_pmp_6_cfg_x,
                io_dpath_pmp_6_cfg_w,
                io_dpath_pmp_6_cfg_r,
  input  [29:0] io_dpath_pmp_6_addr,
  input  [31:0] io_dpath_pmp_6_mask,
  input         io_dpath_pmp_7_cfg_l,
  input  [1:0]  io_dpath_pmp_7_cfg_a,
  input         io_dpath_pmp_7_cfg_x,
                io_dpath_pmp_7_cfg_w,
                io_dpath_pmp_7_cfg_r,
  input  [29:0] io_dpath_pmp_7_addr,
  input  [31:0] io_dpath_pmp_7_mask,
  input  [63:0] io_dpath_customCSRs_csrs_0_value,
  output        io_requestor_0_req_ready,
                io_requestor_0_resp_valid,
                io_requestor_0_resp_bits_ae_ptw,
                io_requestor_0_resp_bits_ae_final,
                io_requestor_0_resp_bits_pf,
                io_requestor_0_resp_bits_gf,
                io_requestor_0_resp_bits_hr,
                io_requestor_0_resp_bits_hw,
                io_requestor_0_resp_bits_hx,
  output [43:0] io_requestor_0_resp_bits_pte_ppn,
  output        io_requestor_0_resp_bits_pte_d,
                io_requestor_0_resp_bits_pte_a,
                io_requestor_0_resp_bits_pte_g,
                io_requestor_0_resp_bits_pte_u,
                io_requestor_0_resp_bits_pte_x,
                io_requestor_0_resp_bits_pte_w,
                io_requestor_0_resp_bits_pte_r,
                io_requestor_0_resp_bits_pte_v,
  output [1:0]  io_requestor_0_resp_bits_level,
  output        io_requestor_0_resp_bits_homogeneous,
  output [3:0]  io_requestor_0_ptbr_mode,
  output        io_requestor_0_status_debug,
                io_requestor_0_status_mxr,
                io_requestor_0_status_sum,
                io_requestor_0_pmp_0_cfg_l,
  output [1:0]  io_requestor_0_pmp_0_cfg_a,
  output        io_requestor_0_pmp_0_cfg_x,
                io_requestor_0_pmp_0_cfg_w,
                io_requestor_0_pmp_0_cfg_r,
  output [29:0] io_requestor_0_pmp_0_addr,
  output [31:0] io_requestor_0_pmp_0_mask,
  output        io_requestor_0_pmp_1_cfg_l,
  output [1:0]  io_requestor_0_pmp_1_cfg_a,
  output        io_requestor_0_pmp_1_cfg_x,
                io_requestor_0_pmp_1_cfg_w,
                io_requestor_0_pmp_1_cfg_r,
  output [29:0] io_requestor_0_pmp_1_addr,
  output [31:0] io_requestor_0_pmp_1_mask,
  output        io_requestor_0_pmp_2_cfg_l,
  output [1:0]  io_requestor_0_pmp_2_cfg_a,
  output        io_requestor_0_pmp_2_cfg_x,
                io_requestor_0_pmp_2_cfg_w,
                io_requestor_0_pmp_2_cfg_r,
  output [29:0] io_requestor_0_pmp_2_addr,
  output [31:0] io_requestor_0_pmp_2_mask,
  output        io_requestor_0_pmp_3_cfg_l,
  output [1:0]  io_requestor_0_pmp_3_cfg_a,
  output        io_requestor_0_pmp_3_cfg_x,
                io_requestor_0_pmp_3_cfg_w,
                io_requestor_0_pmp_3_cfg_r,
  output [29:0] io_requestor_0_pmp_3_addr,
  output [31:0] io_requestor_0_pmp_3_mask,
  output        io_requestor_0_pmp_4_cfg_l,
  output [1:0]  io_requestor_0_pmp_4_cfg_a,
  output        io_requestor_0_pmp_4_cfg_x,
                io_requestor_0_pmp_4_cfg_w,
                io_requestor_0_pmp_4_cfg_r,
  output [29:0] io_requestor_0_pmp_4_addr,
  output [31:0] io_requestor_0_pmp_4_mask,
  output        io_requestor_0_pmp_5_cfg_l,
  output [1:0]  io_requestor_0_pmp_5_cfg_a,
  output        io_requestor_0_pmp_5_cfg_x,
                io_requestor_0_pmp_5_cfg_w,
                io_requestor_0_pmp_5_cfg_r,
  output [29:0] io_requestor_0_pmp_5_addr,
  output [31:0] io_requestor_0_pmp_5_mask,
  output        io_requestor_0_pmp_6_cfg_l,
  output [1:0]  io_requestor_0_pmp_6_cfg_a,
  output        io_requestor_0_pmp_6_cfg_x,
                io_requestor_0_pmp_6_cfg_w,
                io_requestor_0_pmp_6_cfg_r,
  output [29:0] io_requestor_0_pmp_6_addr,
  output [31:0] io_requestor_0_pmp_6_mask,
  output        io_requestor_0_pmp_7_cfg_l,
  output [1:0]  io_requestor_0_pmp_7_cfg_a,
  output        io_requestor_0_pmp_7_cfg_x,
                io_requestor_0_pmp_7_cfg_w,
                io_requestor_0_pmp_7_cfg_r,
  output [29:0] io_requestor_0_pmp_7_addr,
  output [31:0] io_requestor_0_pmp_7_mask,
  output        io_requestor_1_req_ready,
                io_requestor_1_resp_valid,
                io_requestor_1_resp_bits_ae_ptw,
                io_requestor_1_resp_bits_ae_final,
                io_requestor_1_resp_bits_pf,
                io_requestor_1_resp_bits_gf,
                io_requestor_1_resp_bits_hr,
                io_requestor_1_resp_bits_hw,
                io_requestor_1_resp_bits_hx,
  output [43:0] io_requestor_1_resp_bits_pte_ppn,
  output        io_requestor_1_resp_bits_pte_d,
                io_requestor_1_resp_bits_pte_a,
                io_requestor_1_resp_bits_pte_g,
                io_requestor_1_resp_bits_pte_u,
                io_requestor_1_resp_bits_pte_x,
                io_requestor_1_resp_bits_pte_w,
                io_requestor_1_resp_bits_pte_r,
                io_requestor_1_resp_bits_pte_v,
  output [1:0]  io_requestor_1_resp_bits_level,
  output        io_requestor_1_resp_bits_homogeneous,
  output [3:0]  io_requestor_1_ptbr_mode,
  output        io_requestor_1_status_debug,
  output [1:0]  io_requestor_1_status_prv,
  output        io_requestor_1_pmp_0_cfg_l,
  output [1:0]  io_requestor_1_pmp_0_cfg_a,
  output        io_requestor_1_pmp_0_cfg_x,
                io_requestor_1_pmp_0_cfg_w,
                io_requestor_1_pmp_0_cfg_r,
  output [29:0] io_requestor_1_pmp_0_addr,
  output [31:0] io_requestor_1_pmp_0_mask,
  output        io_requestor_1_pmp_1_cfg_l,
  output [1:0]  io_requestor_1_pmp_1_cfg_a,
  output        io_requestor_1_pmp_1_cfg_x,
                io_requestor_1_pmp_1_cfg_w,
                io_requestor_1_pmp_1_cfg_r,
  output [29:0] io_requestor_1_pmp_1_addr,
  output [31:0] io_requestor_1_pmp_1_mask,
  output        io_requestor_1_pmp_2_cfg_l,
  output [1:0]  io_requestor_1_pmp_2_cfg_a,
  output        io_requestor_1_pmp_2_cfg_x,
                io_requestor_1_pmp_2_cfg_w,
                io_requestor_1_pmp_2_cfg_r,
  output [29:0] io_requestor_1_pmp_2_addr,
  output [31:0] io_requestor_1_pmp_2_mask,
  output        io_requestor_1_pmp_3_cfg_l,
  output [1:0]  io_requestor_1_pmp_3_cfg_a,
  output        io_requestor_1_pmp_3_cfg_x,
                io_requestor_1_pmp_3_cfg_w,
                io_requestor_1_pmp_3_cfg_r,
  output [29:0] io_requestor_1_pmp_3_addr,
  output [31:0] io_requestor_1_pmp_3_mask,
  output        io_requestor_1_pmp_4_cfg_l,
  output [1:0]  io_requestor_1_pmp_4_cfg_a,
  output        io_requestor_1_pmp_4_cfg_x,
                io_requestor_1_pmp_4_cfg_w,
                io_requestor_1_pmp_4_cfg_r,
  output [29:0] io_requestor_1_pmp_4_addr,
  output [31:0] io_requestor_1_pmp_4_mask,
  output        io_requestor_1_pmp_5_cfg_l,
  output [1:0]  io_requestor_1_pmp_5_cfg_a,
  output        io_requestor_1_pmp_5_cfg_x,
                io_requestor_1_pmp_5_cfg_w,
                io_requestor_1_pmp_5_cfg_r,
  output [29:0] io_requestor_1_pmp_5_addr,
  output [31:0] io_requestor_1_pmp_5_mask,
  output        io_requestor_1_pmp_6_cfg_l,
  output [1:0]  io_requestor_1_pmp_6_cfg_a,
  output        io_requestor_1_pmp_6_cfg_x,
                io_requestor_1_pmp_6_cfg_w,
                io_requestor_1_pmp_6_cfg_r,
  output [29:0] io_requestor_1_pmp_6_addr,
  output [31:0] io_requestor_1_pmp_6_mask,
  output        io_requestor_1_pmp_7_cfg_l,
  output [1:0]  io_requestor_1_pmp_7_cfg_a,
  output        io_requestor_1_pmp_7_cfg_x,
                io_requestor_1_pmp_7_cfg_w,
                io_requestor_1_pmp_7_cfg_r,
  output [29:0] io_requestor_1_pmp_7_addr,
  output [31:0] io_requestor_1_pmp_7_mask,
  output [63:0] io_requestor_1_customCSRs_csrs_0_value,
  output        io_mem_req_valid,
  output [39:0] io_mem_req_bits_addr,
  output        io_mem_req_bits_dv,
                io_mem_s1_kill
);

  wire            do_switch;	// @[PTW.scala:583:30, :689:25, :692:21]
  reg             l2_refill;	// @[PTW.scala:410:26]
  wire [43:0]     _r_pte_barrier_io_y_ppn;	// @[package.scala:259:25]
  wire            _r_pte_barrier_io_y_d;	// @[package.scala:259:25]
  wire            _r_pte_barrier_io_y_a;	// @[package.scala:259:25]
  wire            _r_pte_barrier_io_y_g;	// @[package.scala:259:25]
  wire            _r_pte_barrier_io_y_u;	// @[package.scala:259:25]
  wire            _r_pte_barrier_io_y_x;	// @[package.scala:259:25]
  wire            _r_pte_barrier_io_y_w;	// @[package.scala:259:25]
  wire            _r_pte_barrier_io_y_r;	// @[package.scala:259:25]
  wire            _r_pte_barrier_io_y_v;	// @[package.scala:259:25]
  wire [2:0]      _state_barrier_io_y;	// @[package.scala:259:25]
  wire            _arb_io_out_valid;	// @[PTW.scala:236:19]
  wire            _arb_io_out_bits_valid;	// @[PTW.scala:236:19]
  wire [26:0]     _arb_io_out_bits_bits_addr;	// @[PTW.scala:236:19]
  wire            _arb_io_out_bits_bits_need_gpa;	// @[PTW.scala:236:19]
  wire            _arb_io_out_bits_bits_vstage1;	// @[PTW.scala:236:19]
  wire            _arb_io_out_bits_bits_stage2;	// @[PTW.scala:236:19]
  wire            _arb_io_chosen;	// @[PTW.scala:236:19]
  reg  [2:0]      state;	// @[PTW.scala:233:22]
  wire            _T_140 = state == 3'h0;	// @[PTW.scala:233:22, :240:30]
  wire            _arb_io_out_ready_T_2 = _T_140 & ~l2_refill;	// @[PTW.scala:240:{30,43,46}, :410:26]
  reg             resp_valid_0;	// @[PTW.scala:242:27]
  reg             resp_valid_1;	// @[PTW.scala:242:27]
  reg             invalidated;	// @[PTW.scala:251:24]
  reg  [1:0]      count;	// @[PTW.scala:259:18]
  reg             resp_ae_ptw;	// @[PTW.scala:260:24]
  reg             resp_ae_final;	// @[PTW.scala:261:26]
  reg             resp_pf;	// @[PTW.scala:262:20]
  reg             resp_gf;	// @[PTW.scala:263:20]
  reg             resp_hr;	// @[PTW.scala:264:20]
  reg             resp_hw;	// @[PTW.scala:265:20]
  reg             resp_hx;	// @[PTW.scala:266:20]
  reg  [26:0]     r_req_addr;	// @[PTW.scala:270:18]
  reg             r_req_need_gpa;	// @[PTW.scala:270:18]
  reg             r_req_vstage1;	// @[PTW.scala:270:18]
  reg             r_req_stage2;	// @[PTW.scala:270:18]
  reg             r_req_dest;	// @[PTW.scala:272:23]
  reg  [43:0]     r_pte_ppn;	// @[PTW.scala:275:18]
  reg             r_pte_d;	// @[PTW.scala:275:18]
  reg             r_pte_a;	// @[PTW.scala:275:18]
  reg             r_pte_g;	// @[PTW.scala:275:18]
  reg             r_pte_u;	// @[PTW.scala:275:18]
  reg             r_pte_x;	// @[PTW.scala:275:18]
  reg             r_pte_w;	// @[PTW.scala:275:18]
  reg             r_pte_r;	// @[PTW.scala:275:18]
  reg             r_pte_v;	// @[PTW.scala:275:18]
  reg  [43:0]     r_hgatp_ppn;	// @[PTW.scala:276:20]
  reg  [1:0]      aux_count;	// @[PTW.scala:278:22]
  reg  [43:0]     aux_pte_ppn;	// @[PTW.scala:280:20]
  reg             aux_pte_d;	// @[PTW.scala:280:20]
  reg             aux_pte_a;	// @[PTW.scala:280:20]
  reg             aux_pte_g;	// @[PTW.scala:280:20]
  reg             aux_pte_u;	// @[PTW.scala:280:20]
  reg             aux_pte_x;	// @[PTW.scala:280:20]
  reg             aux_pte_w;	// @[PTW.scala:280:20]
  reg             aux_pte_r;	// @[PTW.scala:280:20]
  reg             aux_pte_v;	// @[PTW.scala:280:20]
  reg             stage2;	// @[PTW.scala:283:19]
  reg             stage2_final;	// @[PTW.scala:284:25]
  wire            do_both_stages = r_req_vstage1 & r_req_stage2;	// @[PTW.scala:270:18, :289:38]
  wire            _max_count_T = count < aux_count;	// @[PTW.scala:259:18, :278:22, :290:25]
  wire [1:0]      max_count = _max_count_T ? aux_count : count;	// @[PTW.scala:259:18, :278:22, :290:25]
  wire [26:0]     _GEN = r_req_vstage1 & stage2 ? aux_pte_ppn[26:0] : r_req_addr;	// @[PTW.scala:270:18, :280:20, :283:19, :291:{16,31}]
  reg             mem_resp_valid;	// @[PTW.scala:293:31]
  reg  [63:0]     mem_resp_data;	// @[PTW.scala:294:30]
  wire [26:0]     _T_15 = do_both_stages & ~stage2 ? mem_resp_data[36:10] : {7'h0, mem_resp_data[29:10]};	// @[PTW.scala:283:19, :289:38, :294:30, :307:{19,35,38,54,99}]
  wire            aux_pte_pte_v = ~((mem_resp_data[1] | mem_resp_data[2] | mem_resp_data[3]) & (~(count[1]) & (|(mem_resp_data[18:10])) | count == 2'h0 & (|(mem_resp_data[27:19])))) & mem_resp_data[0];	// @[PTW.scala:259:18, :294:30, :305:37, :306:26, :308:{26,36}, :311:{21,28,38,97,106,114}]
  wire            invalid_paddr = do_both_stages & ~stage2 ? (|(mem_resp_data[53:37])) : (|(mem_resp_data[53:30]));	// @[PTW.scala:283:19, :289:38, :294:30, :307:38, :313:{14,30,51,63,81,93}]
  wire            traverse = aux_pte_pte_v & ~(mem_resp_data[1]) & ~(mem_resp_data[2]) & ~(mem_resp_data[3]) & ~(mem_resp_data[7]) & ~(mem_resp_data[6]) & ~(mem_resp_data[4]) & mem_resp_data[63:54] == 10'h0 & ~invalid_paddr & ~(count[1]);	// @[PTW.scala:139:{36,42,48,54,60,66,92}, :259:18, :294:30, :305:37, :306:26, :308:36, :311:{21,106,114}, :313:14, :316:{33,48,57}]
  wire            _leaf_T_5 = count == 2'h1;	// @[PTW.scala:259:18, :311:21, package.scala:33:86]
  wire            _T_237 = count == 2'h2;	// @[PTW.scala:259:18, package.scala:33:86]
  wire            _GEN_0 = (&count) | _T_237;	// @[PTW.scala:259:18, package.scala:33:{76,86}]
  wire [8:0]      pte_addr_vpn_idx = _GEN_0 ? _GEN[8:0] : _leaf_T_5 ? _GEN[17:9] : _GEN[26:18];	// @[PTW.scala:291:16, :321:{12,48}, package.scala:33:{76,86}]
  reg  [6:0]      state_reg;	// @[Replacement.scala:168:70]
  reg  [7:0]      valid;	// @[PTW.scala:364:24]
  reg  [31:0]     tags_0;	// @[PTW.scala:365:19]
  reg  [31:0]     tags_1;	// @[PTW.scala:365:19]
  reg  [31:0]     tags_2;	// @[PTW.scala:365:19]
  reg  [31:0]     tags_3;	// @[PTW.scala:365:19]
  reg  [31:0]     tags_4;	// @[PTW.scala:365:19]
  reg  [31:0]     tags_5;	// @[PTW.scala:365:19]
  reg  [31:0]     tags_6;	// @[PTW.scala:365:19]
  reg  [31:0]     tags_7;	// @[PTW.scala:365:19]
  reg  [19:0]     data_0;	// @[PTW.scala:367:19]
  reg  [19:0]     data_1;	// @[PTW.scala:367:19]
  reg  [19:0]     data_2;	// @[PTW.scala:367:19]
  reg  [19:0]     data_3;	// @[PTW.scala:367:19]
  reg  [19:0]     data_4;	// @[PTW.scala:367:19]
  reg  [19:0]     data_5;	// @[PTW.scala:367:19]
  reg  [19:0]     data_6;	// @[PTW.scala:367:19]
  reg  [19:0]     data_7;	// @[PTW.scala:367:19]
  wire            can_hit = ~(count[1]) & (r_req_vstage1 ? stage2 : ~r_req_stage2);	// @[PTW.scala:259:18, :270:18, :283:19, :311:21, :316:57, :370:{35,41,65}]
  wire [32:0]     tag = {r_req_vstage1, r_pte_ppn[19:0], pte_addr_vpn_idx, 3'h0};	// @[Cat.scala:33:92, PTW.scala:233:22, :270:18, :275:18, :329:23, package.scala:33:76]
  wire [7:0]      hits = {{1'h0, tags_7} == tag, {1'h0, tags_6} == tag, {1'h0, tags_5} == tag, {1'h0, tags_4} == tag, {1'h0, tags_3} == tag, {1'h0, tags_2} == tag, {1'h0, tags_1} == tag, {1'h0, tags_0} == tag} & valid;	// @[Cat.scala:33:92, PTW.scala:364:24, :365:19, :378:{27,43}]
  wire            pte_cache_hit = (|hits) & can_hit;	// @[PTW.scala:370:35, :378:43, :379:{20,24}]
  wire            _T_160 = state == 3'h1;	// @[PTW.scala:233:22, :384:15, :389:24]
  reg  [6:0]      state_reg_1;	// @[Replacement.scala:168:70]
  reg  [7:0]      valid_1;	// @[PTW.scala:364:24]
  reg  [31:0]     tags_1_0;	// @[PTW.scala:365:19]
  reg  [31:0]     tags_1_1;	// @[PTW.scala:365:19]
  reg  [31:0]     tags_1_2;	// @[PTW.scala:365:19]
  reg  [31:0]     tags_1_3;	// @[PTW.scala:365:19]
  reg  [31:0]     tags_1_4;	// @[PTW.scala:365:19]
  reg  [31:0]     tags_1_5;	// @[PTW.scala:365:19]
  reg  [31:0]     tags_1_6;	// @[PTW.scala:365:19]
  reg  [31:0]     tags_1_7;	// @[PTW.scala:365:19]
  reg  [19:0]     data_1_0;	// @[PTW.scala:367:19]
  reg  [19:0]     data_1_1;	// @[PTW.scala:367:19]
  reg  [19:0]     data_1_2;	// @[PTW.scala:367:19]
  reg  [19:0]     data_1_3;	// @[PTW.scala:367:19]
  reg  [19:0]     data_1_4;	// @[PTW.scala:367:19]
  reg  [19:0]     data_1_5;	// @[PTW.scala:367:19]
  reg  [19:0]     data_1_6;	// @[PTW.scala:367:19]
  reg  [19:0]     data_1_7;	// @[PTW.scala:367:19]
  wire [55:0]     _pmpHomogeneous_T = {r_pte_ppn, 12'h0};	// @[PTW.scala:275:18, :546:88]
  wire [55:0]     _GEN_1 = {24'h0, io_dpath_pmp_0_addr, 2'h0};	// @[PMP.scala:107:32, PTW.scala:313:93]
  wire [31:0]     pmpHomogeneous_pgMask = _GEN_0 ? 32'hFFFFF000 : _leaf_T_5 ? 32'hFFE00000 : 32'hC0000000;	// @[Parameters.scala:137:31, package.scala:33:{76,86}]
  wire [55:0]     _GEN_2 = {24'h0, io_dpath_pmp_1_addr, 2'h0};	// @[PMP.scala:107:32, PTW.scala:313:93]
  wire [31:0]     pmpHomogeneous_pgMask_1 = _GEN_0 ? 32'hFFFFF000 : _leaf_T_5 ? 32'hFFE00000 : 32'hC0000000;	// @[Parameters.scala:137:31, package.scala:33:{76,86}]
  wire [55:0]     _pmpHomogeneous_endsBeforeUpper_T_6 = _pmpHomogeneous_T & {24'h0, pmpHomogeneous_pgMask_1};	// @[PMP.scala:110:30, PTW.scala:313:93, :546:88, package.scala:33:76]
  wire [55:0]     _GEN_3 = {24'h0, io_dpath_pmp_2_addr, 2'h0};	// @[PMP.scala:107:32, PTW.scala:313:93]
  wire [31:0]     pmpHomogeneous_pgMask_2 = _GEN_0 ? 32'hFFFFF000 : _leaf_T_5 ? 32'hFFE00000 : 32'hC0000000;	// @[Parameters.scala:137:31, package.scala:33:{76,86}]
  wire [55:0]     _pmpHomogeneous_endsBeforeUpper_T_12 = _pmpHomogeneous_T & {24'h0, pmpHomogeneous_pgMask_2};	// @[PMP.scala:110:30, PTW.scala:313:93, :546:88, package.scala:33:76]
  wire [55:0]     _GEN_4 = {24'h0, io_dpath_pmp_3_addr, 2'h0};	// @[PMP.scala:107:32, PTW.scala:313:93]
  wire [31:0]     pmpHomogeneous_pgMask_3 = _GEN_0 ? 32'hFFFFF000 : _leaf_T_5 ? 32'hFFE00000 : 32'hC0000000;	// @[Parameters.scala:137:31, package.scala:33:{76,86}]
  wire [55:0]     _pmpHomogeneous_endsBeforeUpper_T_18 = _pmpHomogeneous_T & {24'h0, pmpHomogeneous_pgMask_3};	// @[PMP.scala:110:30, PTW.scala:313:93, :546:88, package.scala:33:76]
  wire [55:0]     _GEN_5 = {24'h0, io_dpath_pmp_4_addr, 2'h0};	// @[PMP.scala:107:32, PTW.scala:313:93]
  wire [31:0]     pmpHomogeneous_pgMask_4 = _GEN_0 ? 32'hFFFFF000 : _leaf_T_5 ? 32'hFFE00000 : 32'hC0000000;	// @[Parameters.scala:137:31, package.scala:33:{76,86}]
  wire [55:0]     _pmpHomogeneous_endsBeforeUpper_T_24 = _pmpHomogeneous_T & {24'h0, pmpHomogeneous_pgMask_4};	// @[PMP.scala:110:30, PTW.scala:313:93, :546:88, package.scala:33:76]
  wire [55:0]     _GEN_6 = {24'h0, io_dpath_pmp_5_addr, 2'h0};	// @[PMP.scala:107:32, PTW.scala:313:93]
  wire [31:0]     pmpHomogeneous_pgMask_5 = _GEN_0 ? 32'hFFFFF000 : _leaf_T_5 ? 32'hFFE00000 : 32'hC0000000;	// @[Parameters.scala:137:31, package.scala:33:{76,86}]
  wire [55:0]     _pmpHomogeneous_endsBeforeUpper_T_30 = _pmpHomogeneous_T & {24'h0, pmpHomogeneous_pgMask_5};	// @[PMP.scala:110:30, PTW.scala:313:93, :546:88, package.scala:33:76]
  wire [55:0]     _GEN_7 = {24'h0, io_dpath_pmp_6_addr, 2'h0};	// @[PMP.scala:107:32, PTW.scala:313:93]
  wire [31:0]     pmpHomogeneous_pgMask_6 = _GEN_0 ? 32'hFFFFF000 : _leaf_T_5 ? 32'hFFE00000 : 32'hC0000000;	// @[Parameters.scala:137:31, package.scala:33:{76,86}]
  wire [55:0]     _pmpHomogeneous_endsBeforeUpper_T_36 = _pmpHomogeneous_T & {24'h0, pmpHomogeneous_pgMask_6};	// @[PMP.scala:110:30, PTW.scala:313:93, :546:88, package.scala:33:76]
  wire [31:0]     pmpHomogeneous_pgMask_7 = _GEN_0 ? 32'hFFFFF000 : _leaf_T_5 ? 32'hFFE00000 : 32'hC0000000;	// @[Parameters.scala:137:31, package.scala:33:{76,86}]
  wire [55:0]     _pmpHomogeneous_endsBeforeUpper_T_42 = _pmpHomogeneous_T & {24'h0, pmpHomogeneous_pgMask_7};	// @[PMP.scala:110:30, PTW.scala:313:93, :546:88, package.scala:33:76]
  wire            homogeneous =
    (_GEN_0 ? {r_pte_ppn[43:3], r_pte_ppn[1:0]} == 43'h0 | r_pte_ppn == 44'h3 | r_pte_ppn[43:4] == 40'h1 | {r_pte_ppn[43:5] ^ 39'h8, r_pte_ppn[3:0]} == 43'h0 | r_pte_ppn[43:4] == 40'h200 | r_pte_ppn == 44'h2010 | r_pte_ppn == 44'h4000 | r_pte_ppn[43:14] == 30'h3 | r_pte_ppn[43:16] == 28'h1 | r_pte_ppn[43:17] == 27'h1 | r_pte_ppn[43:18] == 26'h1 | r_pte_ppn[43:19] == 25'h1 : _leaf_T_5 ? r_pte_ppn[43:14] == 30'h3 | r_pte_ppn[43:16] == 28'h1 | r_pte_ppn[43:17] == 27'h1 | r_pte_ppn[43:18] == 26'h1 | r_pte_ppn[43:19] == 25'h1 : r_pte_ppn[43:18] == 26'h1 | r_pte_ppn[43:18] == 26'h2) & (io_dpath_pmp_0_cfg_a[1] ? (_GEN_0 ? io_dpath_pmp_0_mask[11] : _leaf_T_5 ? io_dpath_pmp_0_mask[20] : io_dpath_pmp_0_mask[29]) | (_GEN_0 ? (|(r_pte_ppn ^ {24'h0, io_dpath_pmp_0_addr[29:10]})) : _leaf_T_5 ? (|(r_pte_ppn[43:9] ^ {24'h0, io_dpath_pmp_0_addr[29:19]})) : (|(r_pte_ppn[43:18] ^ {24'h0, io_dpath_pmp_0_addr[29:28]}))) : ~(io_dpath_pmp_0_cfg_a[0]) | _pmpHomogeneous_T >= _GEN_1 | (_pmpHomogeneous_T & {24'h0, pmpHomogeneous_pgMask}) < {24'h0, {io_dpath_pmp_0_addr, 2'h0} & pmpHomogeneous_pgMask}) & (io_dpath_pmp_1_cfg_a[1] ? (_GEN_0 ? io_dpath_pmp_1_mask[11] : _leaf_T_5 ? io_dpath_pmp_1_mask[20] : io_dpath_pmp_1_mask[29]) | (_GEN_0 ? (|(r_pte_ppn ^ {24'h0, io_dpath_pmp_1_addr[29:10]})) : _leaf_T_5 ? (|(r_pte_ppn[43:9] ^ {24'h0, io_dpath_pmp_1_addr[29:19]})) : (|(r_pte_ppn[43:18] ^ {24'h0, io_dpath_pmp_1_addr[29:28]}))) : ~(io_dpath_pmp_1_cfg_a[0]) | _pmpHomogeneous_endsBeforeUpper_T_6 < {24'h0, {io_dpath_pmp_0_addr, 2'h0} & pmpHomogeneous_pgMask_1} | _pmpHomogeneous_T >= _GEN_2 | _pmpHomogeneous_T >= _GEN_1 & _pmpHomogeneous_endsBeforeUpper_T_6 < {24'h0, {io_dpath_pmp_1_addr, 2'h0} & pmpHomogeneous_pgMask_1})
    & (io_dpath_pmp_2_cfg_a[1] ? (_GEN_0 ? io_dpath_pmp_2_mask[11] : _leaf_T_5 ? io_dpath_pmp_2_mask[20] : io_dpath_pmp_2_mask[29]) | (_GEN_0 ? (|(r_pte_ppn ^ {24'h0, io_dpath_pmp_2_addr[29:10]})) : _leaf_T_5 ? (|(r_pte_ppn[43:9] ^ {24'h0, io_dpath_pmp_2_addr[29:19]})) : (|(r_pte_ppn[43:18] ^ {24'h0, io_dpath_pmp_2_addr[29:28]}))) : ~(io_dpath_pmp_2_cfg_a[0]) | _pmpHomogeneous_endsBeforeUpper_T_12 < {24'h0, {io_dpath_pmp_1_addr, 2'h0} & pmpHomogeneous_pgMask_2} | _pmpHomogeneous_T >= _GEN_3 | _pmpHomogeneous_T >= _GEN_2 & _pmpHomogeneous_endsBeforeUpper_T_12 < {24'h0, {io_dpath_pmp_2_addr, 2'h0} & pmpHomogeneous_pgMask_2}) & (io_dpath_pmp_3_cfg_a[1] ? (_GEN_0 ? io_dpath_pmp_3_mask[11] : _leaf_T_5 ? io_dpath_pmp_3_mask[20] : io_dpath_pmp_3_mask[29]) | (_GEN_0 ? (|(r_pte_ppn ^ {24'h0, io_dpath_pmp_3_addr[29:10]})) : _leaf_T_5 ? (|(r_pte_ppn[43:9] ^ {24'h0, io_dpath_pmp_3_addr[29:19]})) : (|(r_pte_ppn[43:18] ^ {24'h0, io_dpath_pmp_3_addr[29:28]}))) : ~(io_dpath_pmp_3_cfg_a[0]) | _pmpHomogeneous_endsBeforeUpper_T_18 < {24'h0, {io_dpath_pmp_2_addr, 2'h0} & pmpHomogeneous_pgMask_3} | _pmpHomogeneous_T >= _GEN_4 | _pmpHomogeneous_T >= _GEN_3 & _pmpHomogeneous_endsBeforeUpper_T_18 < {24'h0, {io_dpath_pmp_3_addr, 2'h0} & pmpHomogeneous_pgMask_3}) & (io_dpath_pmp_4_cfg_a[1] ? (_GEN_0 ? io_dpath_pmp_4_mask[11] : _leaf_T_5 ? io_dpath_pmp_4_mask[20] : io_dpath_pmp_4_mask[29]) | (_GEN_0 ? (|(r_pte_ppn ^ {24'h0, io_dpath_pmp_4_addr[29:10]})) : _leaf_T_5 ? (|(r_pte_ppn[43:9] ^ {24'h0, io_dpath_pmp_4_addr[29:19]})) : (|(r_pte_ppn[43:18] ^ {24'h0, io_dpath_pmp_4_addr[29:28]}))) : ~(io_dpath_pmp_4_cfg_a[0]) | _pmpHomogeneous_endsBeforeUpper_T_24 < {24'h0, {io_dpath_pmp_3_addr, 2'h0} & pmpHomogeneous_pgMask_4} | _pmpHomogeneous_T >= _GEN_5 | _pmpHomogeneous_T >= _GEN_4 & _pmpHomogeneous_endsBeforeUpper_T_24 < {24'h0, {io_dpath_pmp_4_addr, 2'h0} & pmpHomogeneous_pgMask_4})
    & (io_dpath_pmp_5_cfg_a[1] ? (_GEN_0 ? io_dpath_pmp_5_mask[11] : _leaf_T_5 ? io_dpath_pmp_5_mask[20] : io_dpath_pmp_5_mask[29]) | (_GEN_0 ? (|(r_pte_ppn ^ {24'h0, io_dpath_pmp_5_addr[29:10]})) : _leaf_T_5 ? (|(r_pte_ppn[43:9] ^ {24'h0, io_dpath_pmp_5_addr[29:19]})) : (|(r_pte_ppn[43:18] ^ {24'h0, io_dpath_pmp_5_addr[29:28]}))) : ~(io_dpath_pmp_5_cfg_a[0]) | _pmpHomogeneous_endsBeforeUpper_T_30 < {24'h0, {io_dpath_pmp_4_addr, 2'h0} & pmpHomogeneous_pgMask_5} | _pmpHomogeneous_T >= _GEN_6 | _pmpHomogeneous_T >= _GEN_5 & _pmpHomogeneous_endsBeforeUpper_T_30 < {24'h0, {io_dpath_pmp_5_addr, 2'h0} & pmpHomogeneous_pgMask_5}) & (io_dpath_pmp_6_cfg_a[1] ? (_GEN_0 ? io_dpath_pmp_6_mask[11] : _leaf_T_5 ? io_dpath_pmp_6_mask[20] : io_dpath_pmp_6_mask[29]) | (_GEN_0 ? (|(r_pte_ppn ^ {24'h0, io_dpath_pmp_6_addr[29:10]})) : _leaf_T_5 ? (|(r_pte_ppn[43:9] ^ {24'h0, io_dpath_pmp_6_addr[29:19]})) : (|(r_pte_ppn[43:18] ^ {24'h0, io_dpath_pmp_6_addr[29:28]}))) : ~(io_dpath_pmp_6_cfg_a[0]) | _pmpHomogeneous_endsBeforeUpper_T_36 < {24'h0, {io_dpath_pmp_5_addr, 2'h0} & pmpHomogeneous_pgMask_6} | _pmpHomogeneous_T >= _GEN_7 | _pmpHomogeneous_T >= _GEN_6 & _pmpHomogeneous_endsBeforeUpper_T_36 < {24'h0, {io_dpath_pmp_6_addr, 2'h0} & pmpHomogeneous_pgMask_6}) & (io_dpath_pmp_7_cfg_a[1] ? (_GEN_0 ? io_dpath_pmp_7_mask[11] : _leaf_T_5 ? io_dpath_pmp_7_mask[20] : io_dpath_pmp_7_mask[29]) | (_GEN_0 ? (|(r_pte_ppn ^ {24'h0, io_dpath_pmp_7_addr[29:10]})) : _leaf_T_5 ? (|(r_pte_ppn[43:9] ^ {24'h0, io_dpath_pmp_7_addr[29:19]})) : (|(r_pte_ppn[43:18] ^ {24'h0, io_dpath_pmp_7_addr[29:28]}))) : ~(io_dpath_pmp_7_cfg_a[0]) | _pmpHomogeneous_endsBeforeUpper_T_42 < {24'h0, {io_dpath_pmp_6_addr, 2'h0} & pmpHomogeneous_pgMask_7} | _pmpHomogeneous_T >= {24'h0, io_dpath_pmp_7_addr, 2'h0} | _pmpHomogeneous_T >= _GEN_7 & _pmpHomogeneous_endsBeforeUpper_T_42 < {24'h0, {io_dpath_pmp_7_addr, 2'h0} & pmpHomogeneous_pgMask_7});	// @[PMP.scala:45:20, :46:26, :60:36, :97:93, :98:{21,53,78}, :106:32, :107:32, :110:{30,40,58}, :111:{40,53}, :113:62, :118:{8,45,58}, PTW.scala:275:18, :313:93, :546:88, :551:36, Parameters.scala:137:{31,45,65}, TLBPermissions.scala:101:65, package.scala:33:{76,86}]
  wire            _T_141 = _arb_io_out_ready_T_2 & _arb_io_out_valid;	// @[Decoupled.scala:51:35, PTW.scala:236:19, :240:43]
  wire            _GEN_8 = _T_140 & _T_141;	// @[Decoupled.scala:51:35, PTW.scala:240:30, :587:30]
  wire [7:0][2:0] _GEN_9 = {{3'h0}, {state}, {state}, {io_mem_s2_xcpt_ae_ld ? 3'h0 : 3'h5}, {state}, {3'h4}, {pte_cache_hit ? state : io_mem_req_ready ? 3'h2 : 3'h1}, {_T_141 ? {2'h0, _arb_io_out_bits_valid} : state}};	// @[Decoupled.scala:51:35, Mux.scala:47:70, PTW.scala:233:22, :236:19, :240:30, :379:24, :384:15, :389:24, :581:31, :585:18, :587:30, :595:{20,26}, :621:35, :627:34, :631:{20,26}, :636:18, :639:18, :641:35, :643:20, :648:18]
  wire [1:0]      _merged_pte_superpage_mask_T = stage2_final ? max_count : 2'h2;	// @[PTW.scala:284:25, :290:25, :662:45]
  wire            _r_pte_T_5 = _T_160 & pte_cache_hit;	// @[PTW.scala:379:24, :389:24, :672:50]
  wire            _r_pte_T_8 = ~traverse & r_req_vstage1 & stage2;	// @[PTW.scala:270:18, :283:19, :316:48, :676:{29,56}]
  wire            _GEN_10 = do_switch | ~mem_resp_valid;	// @[PTW.scala:293:31, :583:30, :674:8, :689:25, :692:21]
  wire            gf = stage2 & ~stage2_final & ~(aux_pte_pte_v & (mem_resp_data[1] | mem_resp_data[3] & ~(mem_resp_data[2])) & mem_resp_data[6] & mem_resp_data[1] & mem_resp_data[4]);	// @[PTW.scala:139:42, :141:{38,44}, :143:33, :283:19, :284:25, :294:30, :305:37, :306:26, :308:36, :311:{106,114}, :369:107, :696:{40,43}]
  wire            ae = aux_pte_pte_v & invalid_paddr;	// @[PTW.scala:306:26, :308:36, :311:{106,114}, :313:14, :697:22]
  wire            pf = aux_pte_pte_v & (|(mem_resp_data[63:54]));	// @[PTW.scala:294:30, :305:37, :306:26, :308:36, :311:{106,114}, :698:{22,49}]
  wire            success = aux_pte_pte_v & ~ae & ~pf & ~gf;	// @[PTW.scala:306:26, :308:36, :311:{106,114}, :696:40, :697:22, :698:22, :699:{30,37,41,44}]
  wire            _T_176 = do_both_stages & ~stage2_final & success;	// @[PTW.scala:284:25, :289:38, :369:107, :699:41, :701:45]
  assign do_switch = mem_resp_valid & (traverse ? do_both_stages & ~stage2 : _T_176 & ~stage2);	// @[PTW.scala:283:19, :289:38, :293:31, :307:38, :316:48, :583:30, :585:18, :689:25, :692:21, :693:{28,40}, :701:{45,57}, :702:23, :706:24]
  wire            _GEN_11 = traverse | _T_176;	// @[PTW.scala:316:48, :410:26, :692:21, :701:{45,57}, :711:19]
  wire [2:0]      _GEN_12 = hits[7:5] | hits[3:1];	// @[OneHot.scala:30:18, :31:18, :32:28, PTW.scala:378:43]
  wire            _T_45 = _GEN_12[2] | _GEN_12[0];	// @[OneHot.scala:30:18, :31:18, :32:28]
  wire [1:0]      _count_T_2 = count + 2'h1;	// @[PTW.scala:259:18, :311:21, :628:24]
  wire            _T_83 = mem_resp_valid & traverse;	// @[PTW.scala:293:31, :316:48, :381:26]
  wire            _T_38 = _T_83 & can_hit & ~(|hits) & ~invalidated;	// @[PTW.scala:251:24, :370:35, :378:43, :379:20, :381:{26,55,65,68}]
  wire [6:0]      _GEN_13 = ~(valid[6:0]);	// @[PTW.scala:364:24, :382:57]
  wire [2:0]      r = (&valid) ? {state_reg[6], state_reg[6] ? {state_reg[5], state_reg[5] ? state_reg[4] : state_reg[3]} : {state_reg[2], state_reg[2] ? state_reg[1] : state_reg[0]}} : _GEN_13[0] ? 3'h0 : _GEN_13[1] ? 3'h1 : _GEN_13[2] ? 3'h2 : _GEN_13[3] ? 3'h3 : _GEN_13[4] ? 3'h4 : _GEN_13[5] ? 3'h5 : {2'h3, ~(_GEN_13[6])};	// @[Cat.scala:33:92, Mux.scala:47:70, OneHot.scala:47:45, PTW.scala:233:22, :364:24, :382:{18,25,57}, :384:15, Replacement.scala:168:70, :243:38, :245:38, :250:16, package.scala:33:86, :155:13]
  wire [31:0]     _GEN_14 = {r_pte_ppn[19:0], pte_addr_vpn_idx, 3'h0};	// @[PTW.scala:233:22, :275:18, :329:23, :384:15, package.scala:33:76]
  wire            _T_89 = _T_83 & do_both_stages & ~stage2 & ~stage2_final & ~invalidated;	// @[PTW.scala:251:24, :283:19, :284:25, :289:38, :307:38, :369:107, :381:{26,65,68}]
  wire [6:0]      _GEN_15 = ~(valid_1[6:0]);	// @[PTW.scala:364:24, :382:57]
  wire [2:0]      r_1 = (&valid_1) ? {state_reg_1[6], state_reg_1[6] ? {state_reg_1[5], state_reg_1[5] ? state_reg_1[4] : state_reg_1[3]} : {state_reg_1[2], state_reg_1[2] ? state_reg_1[1] : state_reg_1[0]}} : _GEN_15[0] ? 3'h0 : _GEN_15[1] ? 3'h1 : _GEN_15[2] ? 3'h2 : _GEN_15[3] ? 3'h3 : _GEN_15[4] ? 3'h4 : _GEN_15[5] ? 3'h5 : {2'h3, ~(_GEN_15[6])};	// @[Cat.scala:33:92, Mux.scala:47:70, OneHot.scala:47:45, PTW.scala:233:22, :364:24, :382:{18,25,57}, :384:15, Replacement.scala:168:70, :243:38, :245:38, :250:16, package.scala:33:86, :155:13]
  wire            _T_150 = state == 3'h2;	// @[PTW.scala:233:22, :384:15, :585:18]
  wire            _T_151 = state == 3'h4;	// @[Mux.scala:47:70, PTW.scala:233:22, :585:18]
  wire            _GEN_16 = _T_160 | _T_150;	// @[PTW.scala:260:24, :389:24, :585:18]
  wire            _GEN_17 = _T_140 | _GEN_16;	// @[PTW.scala:240:30, :242:27, :260:24, :585:18]
  wire            _GEN_18 = _T_150 | _T_151 | ~((&state) & ~homogeneous);	// @[PTW.scala:233:22, :259:18, :551:36, :585:18, :650:{13,27}, :651:15]
  always @(posedge clock) begin
    if (reset) begin
      state <= 3'h0;	// @[PTW.scala:233:22]
      state_reg <= 7'h0;	// @[Replacement.scala:168:70]
      valid <= 8'h0;	// @[PTW.scala:364:24]
      state_reg_1 <= 7'h0;	// @[Replacement.scala:168:70]
      valid_1 <= 8'h0;	// @[PTW.scala:364:24]
    end
    else begin
      state <= _state_barrier_io_y;	// @[PTW.scala:233:22, package.scala:259:25]
      if (pte_cache_hit & _T_160)	// @[PTW.scala:379:24, :389:{15,24}]
        state_reg <= {~(|(hits[7:4])), (|(hits[7:4])) ? {~(|(_GEN_12[2:1])), (|(_GEN_12[2:1])) ? ~_T_45 : state_reg[4], (|(_GEN_12[2:1])) ? state_reg[3] : ~_T_45} : state_reg[5:3], (|(hits[7:4])) ? state_reg[2:0] : {~(|(_GEN_12[2:1])), (|(_GEN_12[2:1])) ? ~_T_45 : state_reg[1], (|(_GEN_12[2:1])) ? state_reg[0] : ~_T_45}};	// @[Cat.scala:33:92, OneHot.scala:30:18, :32:{14,28}, PTW.scala:378:43, Replacement.scala:168:70, :196:33, :198:38, :203:16, :206:16, :218:7, package.scala:155:13]
      else if (_T_38)	// @[PTW.scala:381:65]
        state_reg <= {~(r[2]), r[2] ? {~(r[1]), r[1] ? ~(r[0]) : state_reg[4], r[1] ? state_reg[3] : ~(r[0])} : state_reg[5:3], r[2] ? state_reg[2:0] : {~(r[1]), r[1] ? ~(r[0]) : state_reg[1], r[1] ? state_reg[0] : ~(r[0])}};	// @[Cat.scala:33:92, PTW.scala:382:18, Replacement.scala:168:70, :196:{33,43}, :198:38, :203:16, :206:16, :218:7, :245:38, package.scala:155:13]
      if (io_dpath_sfence_valid & ~io_dpath_sfence_bits_rs1)	// @[PTW.scala:390:{33,37}]
        valid <= 8'h0;	// @[PTW.scala:364:24]
      else	// @[PTW.scala:390:33]
        valid <= {8{_T_38}} & 8'h1 << r | valid;	// @[OneHot.scala:57:35, PTW.scala:364:24, :381:{65,82}, :382:18, :383:13]
      if (_T_89)	// @[PTW.scala:381:65]
        state_reg_1 <= {~(r_1[2]), r_1[2] ? {~(r_1[1]), r_1[1] ? ~(r_1[0]) : state_reg_1[4], r_1[1] ? state_reg_1[3] : ~(r_1[0])} : state_reg_1[5:3], r_1[2] ? state_reg_1[2:0] : {~(r_1[1]), r_1[1] ? ~(r_1[0]) : state_reg_1[1], r_1[1] ? state_reg_1[0] : ~(r_1[0])}};	// @[Cat.scala:33:92, PTW.scala:382:18, Replacement.scala:168:70, :196:{33,43}, :198:38, :203:16, :206:16, :218:7, :245:38, package.scala:155:13]
      if (io_dpath_sfence_valid & ~io_dpath_sfence_bits_rs1)	// @[PTW.scala:390:{33,37}]
        valid_1 <= 8'h0;	// @[PTW.scala:364:24]
      else	// @[PTW.scala:390:33]
        valid_1 <= {8{_T_89}} & 8'h1 << r_1 | valid_1;	// @[OneHot.scala:57:35, PTW.scala:364:24, :381:{65,82}, :382:18, :383:13]
    end
    resp_valid_0 <= mem_resp_valid & ~_GEN_11 & ~r_req_dest | ~_GEN_17 & (_T_151 ? io_mem_s2_xcpt_ae_ld & ~r_req_dest : (&state) & ~r_req_dest);	// @[PTW.scala:233:22, :242:27, :272:23, :293:31, :410:26, :585:18, :641:35, :644:32, :649:30, :683:30, :689:25, :692:21, :701:57, :711:19]
    resp_valid_1 <= mem_resp_valid & ~_GEN_11 & r_req_dest | ~_GEN_17 & (_T_151 ? io_mem_s2_xcpt_ae_ld & r_req_dest : (&state) & r_req_dest);	// @[PTW.scala:233:22, :242:27, :272:23, :293:31, :410:26, :585:18, :641:35, :644:32, :649:30, :683:30, :689:25, :692:21, :701:57, :711:19]
    invalidated <= io_dpath_sfence_valid | invalidated & (|state);	// @[PTW.scala:233:22, :244:24, :251:24, :523:{40,56}]
    if (do_switch) begin	// @[PTW.scala:583:30, :689:25, :692:21]
      count <= 2'h0;	// @[PTW.scala:259:18]
      if (traverse)	// @[PTW.scala:316:48]
        aux_count <= count + 2'h1;	// @[PTW.scala:259:18, :278:22, :311:21, :738:38]
      else	// @[PTW.scala:316:48]
        aux_count <= count;	// @[PTW.scala:259:18, :278:22]
      aux_pte_ppn <= {17'h0, traverse | _GEN_0 ? _T_15 : _leaf_T_5 ? {_T_15[26:9], r_req_addr[8:0]} : {_T_15[26:18], r_req_addr[17:0]}};	// @[Cat.scala:33:92, PTW.scala:270:18, :280:20, :291:16, :307:19, :316:48, :355:79, :663:64, :740:19, package.scala:33:{76,86}]
      aux_pte_d <= mem_resp_data[7];	// @[PTW.scala:280:20, :294:30, :305:37]
      aux_pte_a <= mem_resp_data[6];	// @[PTW.scala:280:20, :294:30, :305:37]
      aux_pte_g <= mem_resp_data[5];	// @[PTW.scala:280:20, :294:30, :305:37]
      aux_pte_u <= mem_resp_data[4];	// @[PTW.scala:280:20, :294:30, :305:37]
      aux_pte_x <= mem_resp_data[3];	// @[PTW.scala:280:20, :294:30, :305:37]
      aux_pte_w <= mem_resp_data[2];	// @[PTW.scala:280:20, :294:30, :305:37]
      aux_pte_r <= mem_resp_data[1];	// @[PTW.scala:280:20, :294:30, :305:37]
      aux_pte_v <= aux_pte_pte_v;	// @[PTW.scala:280:20, :306:26, :308:36, :311:{106,114}]
    end
    else begin	// @[PTW.scala:583:30, :689:25, :692:21]
      if (mem_resp_valid) begin	// @[PTW.scala:293:31]
        if (traverse)	// @[PTW.scala:316:48]
          count <= count + 2'h1;	// @[PTW.scala:259:18, :311:21, :694:22]
        else if (_T_176) begin	// @[PTW.scala:701:45]
          if (stage2)	// @[PTW.scala:283:19]
            count <= aux_count;	// @[PTW.scala:259:18, :278:22]
          else if (_T_140) begin	// @[PTW.scala:240:30]
            if (_T_141)	// @[Decoupled.scala:51:35]
              count <= 2'h0;	// @[PTW.scala:259:18]
          end
          else if (_T_160) begin	// @[PTW.scala:389:24]
            if (pte_cache_hit)	// @[PTW.scala:379:24]
              count <= _count_T_2;	// @[PTW.scala:259:18, :628:24]
          end
          else if (_GEN_18) begin	// @[PTW.scala:259:18, :585:18]
          end
          else	// @[PTW.scala:259:18, :585:18]
            count <= 2'h2;	// @[PTW.scala:259:18]
        end
        else if (_max_count_T)	// @[PTW.scala:290:25]
          count <= aux_count;	// @[PTW.scala:259:18, :278:22]
      end
      else if (_T_140) begin	// @[PTW.scala:240:30]
        if (_T_141)	// @[Decoupled.scala:51:35]
          count <= 2'h0;	// @[PTW.scala:259:18]
      end
      else if (_T_160) begin	// @[PTW.scala:389:24]
        if (pte_cache_hit)	// @[PTW.scala:379:24]
          count <= _count_T_2;	// @[PTW.scala:259:18, :628:24]
      end
      else if (_GEN_18) begin	// @[PTW.scala:259:18, :585:18]
      end
      else	// @[PTW.scala:259:18, :585:18]
        count <= 2'h2;	// @[PTW.scala:259:18]
      if (_T_140 & _T_141) begin	// @[Decoupled.scala:51:35, PTW.scala:240:30, :585:18, :587:30]
        aux_count <= 2'h0;	// @[PTW.scala:278:22]
        if (_arb_io_out_bits_bits_vstage1)	// @[PTW.scala:236:19]
          aux_pte_ppn <= 44'h0;	// @[PTW.scala:280:20]
        else	// @[PTW.scala:236:19]
          aux_pte_ppn <= {17'h0, _arb_io_out_bits_bits_addr};	// @[PTW.scala:236:19, :280:20, :291:16, :591:38]
      end
    end
    if (_T_140)	// @[PTW.scala:240:30]
      resp_ae_ptw <= ~_T_141 & resp_ae_ptw;	// @[Decoupled.scala:51:35, PTW.scala:260:24, :587:30, :603:21]
    else	// @[PTW.scala:240:30]
      resp_ae_ptw <= ~_GEN_16 & _T_151 & io_mem_s2_xcpt_ae_ld | resp_ae_ptw;	// @[PTW.scala:260:24, :585:18]
    if (~mem_resp_valid | _GEN_11) begin	// @[PTW.scala:293:31, :410:26, :585:18, :674:8, :689:25, :692:21, :701:57, :711:19]
      resp_ae_final <= ~_GEN_8 & resp_ae_final;	// @[PTW.scala:261:26, :585:18, :587:30, :604:23]
      resp_pf <= ~_GEN_8 & resp_pf;	// @[PTW.scala:261:26, :262:20, :585:18, :587:30, :604:23, :605:17]
      resp_gf <= ~_GEN_8 & resp_gf;	// @[PTW.scala:261:26, :263:20, :585:18, :587:30, :604:23, :606:17]
      resp_hr <= _GEN_8 | resp_hr;	// @[PTW.scala:264:20, :585:18, :587:30, :607:17]
      resp_hw <= _GEN_8 | resp_hw;	// @[PTW.scala:265:20, :585:18, :587:30, :608:17]
      resp_hx <= _GEN_8 | resp_hx;	// @[PTW.scala:266:20, :585:18, :587:30, :609:17]
    end
    else begin	// @[PTW.scala:585:18, :689:25, :692:21]
      resp_ae_final <= ae;	// @[PTW.scala:261:26, :697:22]
      resp_pf <= pf & ~stage2;	// @[PTW.scala:262:20, :283:19, :307:38, :698:22, :724:23]
      resp_gf <= gf | pf & stage2;	// @[PTW.scala:263:20, :283:19, :696:40, :698:22, :725:{23,30}]
      resp_hr <= ~stage2 | ~pf & ~gf & aux_pte_pte_v & (mem_resp_data[1] | mem_resp_data[3] & ~(mem_resp_data[2])) & mem_resp_data[6] & mem_resp_data[1] & mem_resp_data[4];	// @[PTW.scala:139:42, :141:{38,44}, :264:20, :283:19, :294:30, :305:37, :306:26, :307:38, :308:36, :311:{106,114}, :696:40, :698:22, :699:{37,44}, :726:{28,43}]
      resp_hw <= ~stage2 | ~pf & ~gf & aux_pte_pte_v & (mem_resp_data[1] | mem_resp_data[3] & ~(mem_resp_data[2])) & mem_resp_data[6] & mem_resp_data[2] & mem_resp_data[7] & mem_resp_data[4];	// @[PTW.scala:139:42, :141:{38,44}, :265:20, :283:19, :294:30, :305:37, :306:26, :307:38, :308:36, :311:{106,114}, :696:40, :698:22, :699:{37,44}, :727:{28,43}]
      resp_hx <= ~stage2 | ~pf & ~gf & aux_pte_pte_v & (mem_resp_data[1] | mem_resp_data[3] & ~(mem_resp_data[2])) & mem_resp_data[6] & mem_resp_data[3] & mem_resp_data[4];	// @[PTW.scala:139:42, :141:{38,44}, :266:20, :283:19, :294:30, :305:37, :306:26, :307:38, :308:36, :311:{106,114}, :696:40, :698:22, :699:{37,44}, :728:{28,43}]
    end
    if (_GEN_8) begin	// @[PTW.scala:587:30]
      r_req_addr <= _arb_io_out_bits_bits_addr;	// @[PTW.scala:236:19, :270:18]
      r_req_need_gpa <= _arb_io_out_bits_bits_need_gpa;	// @[PTW.scala:236:19, :270:18]
      r_req_vstage1 <= _arb_io_out_bits_bits_vstage1;	// @[PTW.scala:236:19, :270:18]
      r_req_stage2 <= _arb_io_out_bits_bits_stage2;	// @[PTW.scala:236:19, :270:18]
      r_req_dest <= _arb_io_chosen;	// @[PTW.scala:236:19, :272:23]
      r_hgatp_ppn <= 44'h0;	// @[PTW.scala:276:20]
    end
    r_pte_ppn <= _r_pte_barrier_io_y_ppn;	// @[PTW.scala:275:18, package.scala:259:25]
    r_pte_d <= _r_pte_barrier_io_y_d;	// @[PTW.scala:275:18, package.scala:259:25]
    r_pte_a <= _r_pte_barrier_io_y_a;	// @[PTW.scala:275:18, package.scala:259:25]
    r_pte_g <= _r_pte_barrier_io_y_g;	// @[PTW.scala:275:18, package.scala:259:25]
    r_pte_u <= _r_pte_barrier_io_y_u;	// @[PTW.scala:275:18, package.scala:259:25]
    r_pte_x <= _r_pte_barrier_io_y_x;	// @[PTW.scala:275:18, package.scala:259:25]
    r_pte_w <= _r_pte_barrier_io_y_w;	// @[PTW.scala:275:18, package.scala:259:25]
    r_pte_r <= _r_pte_barrier_io_y_r;	// @[PTW.scala:275:18, package.scala:259:25]
    r_pte_v <= _r_pte_barrier_io_y_v;	// @[PTW.scala:275:18, package.scala:259:25]
    stage2 <= do_switch | (~mem_resp_valid | traverse | ~(_T_176 & stage2)) & (_GEN_8 ? _arb_io_out_bits_bits_stage2 : stage2);	// @[PTW.scala:236:19, :283:19, :293:31, :316:48, :583:30, :585:18, :587:30, :596:22, :674:8, :689:25, :692:21, :701:{45,57}, :702:23, :703:18, :737:20, :745:12]
    stage2_final <= mem_resp_valid & ~traverse & _T_176 & ~stage2 | (_GEN_8 ? _arb_io_out_bits_bits_stage2 & ~_arb_io_out_bits_bits_vstage1 : stage2_final);	// @[PTW.scala:236:19, :283:19, :284:25, :293:31, :316:48, :585:18, :587:30, :597:{22,53,56}, :689:25, :692:21, :701:{45,57}, :702:23, :706:24]
    mem_resp_valid <= io_mem_resp_valid;	// @[PTW.scala:293:31]
    mem_resp_data <= io_mem_resp_bits_data;	// @[PTW.scala:294:30]
    if (_T_38 & r == 3'h0) begin	// @[PTW.scala:233:22, :365:19, :381:{65,82}, :382:18, :384:15]
      tags_0 <= _GEN_14;	// @[PTW.scala:365:19, :384:15]
      data_0 <= _T_15[19:0];	// @[PTW.scala:307:19, :367:19, :385:15]
    end
    if (_T_38 & r == 3'h1) begin	// @[PTW.scala:365:19, :381:{65,82}, :382:18, :384:15]
      tags_1 <= _GEN_14;	// @[PTW.scala:365:19, :384:15]
      data_1 <= _T_15[19:0];	// @[PTW.scala:307:19, :367:19, :385:15]
    end
    if (_T_38 & r == 3'h2) begin	// @[PTW.scala:365:19, :381:{65,82}, :382:18, :384:15]
      tags_2 <= _GEN_14;	// @[PTW.scala:365:19, :384:15]
      data_2 <= _T_15[19:0];	// @[PTW.scala:307:19, :367:19, :385:15]
    end
    if (_T_38 & r == 3'h3) begin	// @[PTW.scala:365:19, :381:{65,82}, :382:18, :384:15]
      tags_3 <= _GEN_14;	// @[PTW.scala:365:19, :384:15]
      data_3 <= _T_15[19:0];	// @[PTW.scala:307:19, :367:19, :385:15]
    end
    if (_T_38 & r == 3'h4) begin	// @[Mux.scala:47:70, PTW.scala:365:19, :381:{65,82}, :382:18, :384:15]
      tags_4 <= _GEN_14;	// @[PTW.scala:365:19, :384:15]
      data_4 <= _T_15[19:0];	// @[PTW.scala:307:19, :367:19, :385:15]
    end
    if (_T_38 & r == 3'h5) begin	// @[Mux.scala:47:70, PTW.scala:365:19, :381:{65,82}, :382:18, :384:15]
      tags_5 <= _GEN_14;	// @[PTW.scala:365:19, :384:15]
      data_5 <= _T_15[19:0];	// @[PTW.scala:307:19, :367:19, :385:15]
    end
    if (_T_38 & r == 3'h6) begin	// @[Mux.scala:47:70, PTW.scala:365:19, :381:{65,82}, :382:18, :384:15]
      tags_6 <= _GEN_14;	// @[PTW.scala:365:19, :384:15]
      data_6 <= _T_15[19:0];	// @[PTW.scala:307:19, :367:19, :385:15]
    end
    if (_T_38 & (&r)) begin	// @[PTW.scala:365:19, :381:{65,82}, :382:18, :384:15]
      tags_7 <= _GEN_14;	// @[PTW.scala:365:19, :384:15]
      data_7 <= _T_15[19:0];	// @[PTW.scala:307:19, :367:19, :385:15]
    end
    if (_T_89 & r_1 == 3'h0) begin	// @[PTW.scala:233:22, :365:19, :381:{65,82}, :382:18, :384:15]
      tags_1_0 <= 32'h0;	// @[PMP.scala:137:40, PTW.scala:365:19]
      data_1_0 <= _T_15[19:0];	// @[PTW.scala:307:19, :367:19, :385:15]
    end
    if (_T_89 & r_1 == 3'h1) begin	// @[PTW.scala:365:19, :381:{65,82}, :382:18, :384:15]
      tags_1_1 <= 32'h0;	// @[PMP.scala:137:40, PTW.scala:365:19]
      data_1_1 <= _T_15[19:0];	// @[PTW.scala:307:19, :367:19, :385:15]
    end
    if (_T_89 & r_1 == 3'h2) begin	// @[PTW.scala:365:19, :381:{65,82}, :382:18, :384:15]
      tags_1_2 <= 32'h0;	// @[PMP.scala:137:40, PTW.scala:365:19]
      data_1_2 <= _T_15[19:0];	// @[PTW.scala:307:19, :367:19, :385:15]
    end
    if (_T_89 & r_1 == 3'h3) begin	// @[PTW.scala:365:19, :381:{65,82}, :382:18, :384:15]
      tags_1_3 <= 32'h0;	// @[PMP.scala:137:40, PTW.scala:365:19]
      data_1_3 <= _T_15[19:0];	// @[PTW.scala:307:19, :367:19, :385:15]
    end
    if (_T_89 & r_1 == 3'h4) begin	// @[Mux.scala:47:70, PTW.scala:365:19, :381:{65,82}, :382:18, :384:15]
      tags_1_4 <= 32'h0;	// @[PMP.scala:137:40, PTW.scala:365:19]
      data_1_4 <= _T_15[19:0];	// @[PTW.scala:307:19, :367:19, :385:15]
    end
    if (_T_89 & r_1 == 3'h5) begin	// @[Mux.scala:47:70, PTW.scala:365:19, :381:{65,82}, :382:18, :384:15]
      tags_1_5 <= 32'h0;	// @[PMP.scala:137:40, PTW.scala:365:19]
      data_1_5 <= _T_15[19:0];	// @[PTW.scala:307:19, :367:19, :385:15]
    end
    if (_T_89 & r_1 == 3'h6) begin	// @[Mux.scala:47:70, PTW.scala:365:19, :381:{65,82}, :382:18, :384:15]
      tags_1_6 <= 32'h0;	// @[PMP.scala:137:40, PTW.scala:365:19]
      data_1_6 <= _T_15[19:0];	// @[PTW.scala:307:19, :367:19, :385:15]
    end
    if (_T_89 & (&r_1)) begin	// @[PTW.scala:365:19, :381:{65,82}, :382:18, :384:15]
      tags_1_7 <= 32'h0;	// @[PMP.scala:137:40, PTW.scala:365:19]
      data_1_7 <= _T_15[19:0];	// @[PTW.scala:307:19, :367:19, :385:15]
    end
    l2_refill <= mem_resp_valid & ~_GEN_11 & success & _T_237 & ~r_req_need_gpa & (~r_req_vstage1 & ~r_req_stage2 | do_both_stages & aux_count == 2'h2 & aux_pte_pte_v & (mem_resp_data[1] | mem_resp_data[3] & ~(mem_resp_data[2])) & mem_resp_data[6] & mem_resp_data[2] & mem_resp_data[7] & mem_resp_data[4] & (mem_resp_data[1] | mem_resp_data[3] & ~(mem_resp_data[2])) & mem_resp_data[3]);	// @[PTW.scala:139:42, :141:{38,44}, :270:18, :278:22, :289:38, :293:31, :294:30, :305:37, :306:26, :308:36, :311:{106,114}, :370:65, :410:26, :568:{32,60}, :689:25, :692:21, :699:41, :701:57, :711:{19,61}, :712:{27,44}, :713:59, package.scala:33:86]
  end // always @(posedge)
  `ifndef SYNTHESIS
    always @(posedge clock) begin	// @[PTW.scala:613:15]
      if (_GEN_8 & ~reset & ~(~_arb_io_out_bits_bits_need_gpa | _arb_io_out_bits_bits_stage2)) begin	// @[PTW.scala:236:19, :587:30, :613:{15,16,47}]
        if (`ASSERT_VERBOSE_COND_)	// @[PTW.scala:613:15]
          $error("Assertion failed\n    at PTW.scala:613 assert(!arb.io.out.bits.bits.need_gpa || arb.io.out.bits.bits.stage2)\n");	// @[PTW.scala:613:15]
        if (`STOP_COND_)	// @[PTW.scala:613:15]
          $fatal;	// @[PTW.scala:613:15]
      end
      if (mem_resp_valid & ~reset & state != 3'h5) begin	// @[Mux.scala:47:70, PTW.scala:233:22, :293:31, :690:{11,18}]
        if (`ASSERT_VERBOSE_COND_)	// @[PTW.scala:690:11]
          $error("Assertion failed\n    at PTW.scala:690 assert(state === s_wait3)\n");	// @[PTW.scala:690:11]
        if (`STOP_COND_)	// @[PTW.scala:690:11]
          $fatal;	// @[PTW.scala:690:11]
      end
      if (io_mem_s2_nack & ~reset & state != 3'h4) begin	// @[Mux.scala:47:70, PTW.scala:233:22, :733:{11,18}]
        if (`ASSERT_VERBOSE_COND_)	// @[PTW.scala:733:11]
          $error("Assertion failed\n    at PTW.scala:733 assert(state === s_wait2)\n");	// @[PTW.scala:733:11]
        if (`STOP_COND_)	// @[PTW.scala:733:11]
          $fatal;	// @[PTW.scala:733:11]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    logic [31:0] _RANDOM_9;
    logic [31:0] _RANDOM_10;
    logic [31:0] _RANDOM_11;
    logic [31:0] _RANDOM_12;
    logic [31:0] _RANDOM_13;
    logic [31:0] _RANDOM_14;
    logic [31:0] _RANDOM_15;
    logic [31:0] _RANDOM_16;
    logic [31:0] _RANDOM_17;
    logic [31:0] _RANDOM_18;
    logic [31:0] _RANDOM_19;
    logic [31:0] _RANDOM_20;
    logic [31:0] _RANDOM_21;
    logic [31:0] _RANDOM_22;
    logic [31:0] _RANDOM_23;
    logic [31:0] _RANDOM_24;
    logic [31:0] _RANDOM_25;
    logic [31:0] _RANDOM_26;
    logic [31:0] _RANDOM_27;
    logic [31:0] _RANDOM_28;
    logic [31:0] _RANDOM_29;
    logic [31:0] _RANDOM_30;
    logic [31:0] _RANDOM_31;
    logic [31:0] _RANDOM_32;
    logic [31:0] _RANDOM_33;
    logic [31:0] _RANDOM_34;
    logic [31:0] _RANDOM_35;
    logic [31:0] _RANDOM_36;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        _RANDOM_18 = `RANDOM;
        _RANDOM_19 = `RANDOM;
        _RANDOM_20 = `RANDOM;
        _RANDOM_21 = `RANDOM;
        _RANDOM_22 = `RANDOM;
        _RANDOM_23 = `RANDOM;
        _RANDOM_24 = `RANDOM;
        _RANDOM_25 = `RANDOM;
        _RANDOM_26 = `RANDOM;
        _RANDOM_27 = `RANDOM;
        _RANDOM_28 = `RANDOM;
        _RANDOM_29 = `RANDOM;
        _RANDOM_30 = `RANDOM;
        _RANDOM_31 = `RANDOM;
        _RANDOM_32 = `RANDOM;
        _RANDOM_33 = `RANDOM;
        _RANDOM_34 = `RANDOM;
        _RANDOM_35 = `RANDOM;
        _RANDOM_36 = `RANDOM;
        state = _RANDOM_0[2:0];	// @[PTW.scala:233:22]
        resp_valid_0 = _RANDOM_0[3];	// @[PTW.scala:233:22, :242:27]
        resp_valid_1 = _RANDOM_0[4];	// @[PTW.scala:233:22, :242:27]
        invalidated = _RANDOM_0[5];	// @[PTW.scala:233:22, :251:24]
        count = _RANDOM_0[7:6];	// @[PTW.scala:233:22, :259:18]
        resp_ae_ptw = _RANDOM_0[8];	// @[PTW.scala:233:22, :260:24]
        resp_ae_final = _RANDOM_0[9];	// @[PTW.scala:233:22, :261:26]
        resp_pf = _RANDOM_0[10];	// @[PTW.scala:233:22, :262:20]
        resp_gf = _RANDOM_0[11];	// @[PTW.scala:233:22, :263:20]
        resp_hr = _RANDOM_0[12];	// @[PTW.scala:233:22, :264:20]
        resp_hw = _RANDOM_0[13];	// @[PTW.scala:233:22, :265:20]
        resp_hx = _RANDOM_0[14];	// @[PTW.scala:233:22, :266:20]
        r_req_addr = {_RANDOM_0[31:16], _RANDOM_1[10:0]};	// @[PTW.scala:233:22, :270:18]
        r_req_need_gpa = _RANDOM_1[11];	// @[PTW.scala:270:18]
        r_req_vstage1 = _RANDOM_1[12];	// @[PTW.scala:270:18]
        r_req_stage2 = _RANDOM_1[13];	// @[PTW.scala:270:18]
        r_req_dest = _RANDOM_1[14];	// @[PTW.scala:270:18, :272:23]
        r_pte_ppn = {_RANDOM_1[31:25], _RANDOM_2, _RANDOM_3[4:0]};	// @[PTW.scala:270:18, :275:18]
        r_pte_d = _RANDOM_3[7];	// @[PTW.scala:275:18]
        r_pte_a = _RANDOM_3[8];	// @[PTW.scala:275:18]
        r_pte_g = _RANDOM_3[9];	// @[PTW.scala:275:18]
        r_pte_u = _RANDOM_3[10];	// @[PTW.scala:275:18]
        r_pte_x = _RANDOM_3[11];	// @[PTW.scala:275:18]
        r_pte_w = _RANDOM_3[12];	// @[PTW.scala:275:18]
        r_pte_r = _RANDOM_3[13];	// @[PTW.scala:275:18]
        r_pte_v = _RANDOM_3[14];	// @[PTW.scala:275:18]
        r_hgatp_ppn = {_RANDOM_4[31:3], _RANDOM_5[14:0]};	// @[PTW.scala:276:20]
        aux_count = _RANDOM_5[16:15];	// @[PTW.scala:276:20, :278:22]
        aux_pte_ppn = {_RANDOM_5[31:27], _RANDOM_6, _RANDOM_7[6:0]};	// @[PTW.scala:276:20, :280:20]
        aux_pte_d = _RANDOM_7[9];	// @[PTW.scala:280:20]
        aux_pte_a = _RANDOM_7[10];	// @[PTW.scala:280:20]
        aux_pte_g = _RANDOM_7[11];	// @[PTW.scala:280:20]
        aux_pte_u = _RANDOM_7[12];	// @[PTW.scala:280:20]
        aux_pte_x = _RANDOM_7[13];	// @[PTW.scala:280:20]
        aux_pte_w = _RANDOM_7[14];	// @[PTW.scala:280:20]
        aux_pte_r = _RANDOM_7[15];	// @[PTW.scala:280:20]
        aux_pte_v = _RANDOM_7[16];	// @[PTW.scala:280:20]
        stage2 = _RANDOM_7[29];	// @[PTW.scala:280:20, :283:19]
        stage2_final = _RANDOM_7[30];	// @[PTW.scala:280:20, :284:25]
        mem_resp_valid = _RANDOM_7[31];	// @[PTW.scala:280:20, :293:31]
        mem_resp_data = {_RANDOM_8, _RANDOM_9};	// @[PTW.scala:294:30]
        state_reg = _RANDOM_10[6:0];	// @[Replacement.scala:168:70]
        valid = _RANDOM_10[14:7];	// @[PTW.scala:364:24, Replacement.scala:168:70]
        tags_0 = {_RANDOM_10[31:15], _RANDOM_11[14:0]};	// @[PTW.scala:365:19, Replacement.scala:168:70]
        tags_1 = {_RANDOM_11[31:15], _RANDOM_12[14:0]};	// @[PTW.scala:365:19]
        tags_2 = {_RANDOM_12[31:15], _RANDOM_13[14:0]};	// @[PTW.scala:365:19]
        tags_3 = {_RANDOM_13[31:15], _RANDOM_14[14:0]};	// @[PTW.scala:365:19]
        tags_4 = {_RANDOM_14[31:15], _RANDOM_15[14:0]};	// @[PTW.scala:365:19]
        tags_5 = {_RANDOM_15[31:15], _RANDOM_16[14:0]};	// @[PTW.scala:365:19]
        tags_6 = {_RANDOM_16[31:15], _RANDOM_17[14:0]};	// @[PTW.scala:365:19]
        tags_7 = {_RANDOM_17[31:15], _RANDOM_18[14:0]};	// @[PTW.scala:365:19]
        data_0 = {_RANDOM_18[31:15], _RANDOM_19[2:0]};	// @[PTW.scala:365:19, :367:19]
        data_1 = _RANDOM_19[22:3];	// @[PTW.scala:367:19]
        data_2 = {_RANDOM_19[31:23], _RANDOM_20[10:0]};	// @[PTW.scala:367:19]
        data_3 = _RANDOM_20[30:11];	// @[PTW.scala:367:19]
        data_4 = {_RANDOM_20[31], _RANDOM_21[18:0]};	// @[PTW.scala:367:19]
        data_5 = {_RANDOM_21[31:19], _RANDOM_22[6:0]};	// @[PTW.scala:367:19]
        data_6 = _RANDOM_22[26:7];	// @[PTW.scala:367:19]
        data_7 = {_RANDOM_22[31:27], _RANDOM_23[14:0]};	// @[PTW.scala:367:19]
        state_reg_1 = _RANDOM_23[21:15];	// @[PTW.scala:367:19, Replacement.scala:168:70]
        valid_1 = _RANDOM_23[29:22];	// @[PTW.scala:364:24, :367:19]
        tags_1_0 = {_RANDOM_23[31:30], _RANDOM_24[29:0]};	// @[PTW.scala:365:19, :367:19]
        tags_1_1 = {_RANDOM_24[31:30], _RANDOM_25[29:0]};	// @[PTW.scala:365:19]
        tags_1_2 = {_RANDOM_25[31:30], _RANDOM_26[29:0]};	// @[PTW.scala:365:19]
        tags_1_3 = {_RANDOM_26[31:30], _RANDOM_27[29:0]};	// @[PTW.scala:365:19]
        tags_1_4 = {_RANDOM_27[31:30], _RANDOM_28[29:0]};	// @[PTW.scala:365:19]
        tags_1_5 = {_RANDOM_28[31:30], _RANDOM_29[29:0]};	// @[PTW.scala:365:19]
        tags_1_6 = {_RANDOM_29[31:30], _RANDOM_30[29:0]};	// @[PTW.scala:365:19]
        tags_1_7 = {_RANDOM_30[31:30], _RANDOM_31[29:0]};	// @[PTW.scala:365:19]
        data_1_0 = {_RANDOM_31[31:30], _RANDOM_32[17:0]};	// @[PTW.scala:365:19, :367:19]
        data_1_1 = {_RANDOM_32[31:18], _RANDOM_33[5:0]};	// @[PTW.scala:367:19]
        data_1_2 = _RANDOM_33[25:6];	// @[PTW.scala:367:19]
        data_1_3 = {_RANDOM_33[31:26], _RANDOM_34[13:0]};	// @[PTW.scala:367:19]
        data_1_4 = {_RANDOM_34[31:14], _RANDOM_35[1:0]};	// @[PTW.scala:367:19]
        data_1_5 = _RANDOM_35[21:2];	// @[PTW.scala:367:19]
        data_1_6 = {_RANDOM_35[31:22], _RANDOM_36[9:0]};	// @[PTW.scala:367:19]
        data_1_7 = _RANDOM_36[29:10];	// @[PTW.scala:367:19]
        l2_refill = _RANDOM_36[31];	// @[PTW.scala:367:19, :410:26]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  Arbiter arb (	// @[PTW.scala:236:19]
    .io_in_0_valid              (io_requestor_0_req_valid),
    .io_in_0_bits_valid         (io_requestor_0_req_bits_valid),
    .io_in_0_bits_bits_addr     (io_requestor_0_req_bits_bits_addr),
    .io_in_0_bits_bits_need_gpa (io_requestor_0_req_bits_bits_need_gpa),
    .io_in_0_bits_bits_vstage1  (io_requestor_0_req_bits_bits_vstage1),
    .io_in_0_bits_bits_stage2   (io_requestor_0_req_bits_bits_stage2),
    .io_in_1_valid              (io_requestor_1_req_valid),
    .io_in_1_bits_valid         (io_requestor_1_req_bits_valid),
    .io_in_1_bits_bits_addr     (io_requestor_1_req_bits_bits_addr),
    .io_in_1_bits_bits_need_gpa (io_requestor_1_req_bits_bits_need_gpa),
    .io_in_1_bits_bits_vstage1  (io_requestor_1_req_bits_bits_vstage1),
    .io_in_1_bits_bits_stage2   (io_requestor_1_req_bits_bits_stage2),
    .io_out_ready               (_arb_io_out_ready_T_2),	// @[PTW.scala:240:43]
    .io_in_0_ready              (io_requestor_0_req_ready),
    .io_in_1_ready              (io_requestor_1_req_ready),
    .io_out_valid               (_arb_io_out_valid),
    .io_out_bits_valid          (_arb_io_out_bits_valid),
    .io_out_bits_bits_addr      (_arb_io_out_bits_bits_addr),
    .io_out_bits_bits_need_gpa  (_arb_io_out_bits_bits_need_gpa),
    .io_out_bits_bits_vstage1   (_arb_io_out_bits_bits_vstage1),
    .io_out_bits_bits_stage2    (_arb_io_out_bits_bits_stage2),
    .io_chosen                  (_arb_io_chosen)
  );
  OptimizationBarrier_42 state_barrier (	// @[package.scala:259:25]
    .io_x (io_mem_s2_nack ? 3'h1 : mem_resp_valid ? {2'h0, _GEN_11} : _GEN_9[state]),	// @[PTW.scala:233:22, :240:30, :293:31, :384:15, :389:24, :410:26, :581:31, :585:18, :587:30, :621:35, :636:18, :641:35, :648:18, :683:30, :689:25, :691:16, :692:21, :701:57, :711:19, :716:122, :732:25, :734:16]
    .io_y (_state_barrier_io_y)
  );
  OptimizationBarrier_43 r_pte_barrier (	// @[package.scala:259:25]
    .io_x_ppn (_r_pte_T_5 ? {24'h0, (hits[0] ? data_0 : 20'h0) | (hits[1] ? data_1 : 20'h0) | (hits[2] ? data_2 : 20'h0) | (hits[3] ? data_3 : 20'h0) | (hits[4] ? data_4 : 20'h0) | (hits[5] ? data_5 : 20'h0) | (hits[6] ? data_6 : 20'h0) | (hits[7] ? data_7 : 20'h0)} : do_switch ? {r_hgatp_ppn[43:2], 2'h0} : mem_resp_valid ? (_r_pte_T_8 ? {17'h0, _GEN_0 ? _T_15 : _leaf_T_5 ? {_T_15[26:9], aux_pte_ppn[8:0]} : {_T_15[26:18], aux_pte_ppn[17:0]}} & ((&_merged_pte_superpage_mask_T) | _merged_pte_superpage_mask_T == 2'h2 ? 44'hFFFFFFFFFFF : _merged_pte_superpage_mask_T == 2'h1 ? 44'hFFFFFFFFE00 : 44'hFFFFFFC0000) : {17'h0, _T_15}) : (&state) & ~homogeneous & count != 2'h2 ? (count[0] ? {r_pte_ppn[43:9], r_req_addr[8:0]} : {r_pte_ppn[43:18], r_req_addr[17:0]}) : _arb_io_out_ready_T_2 & _arb_io_out_valid ? (_arb_io_out_bits_bits_stage2 | _arb_io_out_bits_bits_vstage1 ? 44'h0 : io_dpath_ptbr_ppn) : r_pte_ppn),	// @[Cat.scala:33:92, Decoupled.scala:51:35, Mux.scala:27:73, :29:36, PTW.scala:233:22, :236:19, :240:43, :259:18, :270:18, :275:18, :276:20, :280:20, :291:16, :293:31, :307:{13,19}, :311:21, :313:93, :355:{49,79}, :367:19, :378:43, :551:36, :583:30, :662:45, :663:{64,125}, :665:24, :672:{8,50}, :674:8, :676:{8,28,56}, :678:{8,15,43,56,65}, :680:{8,29}, :689:25, :692:21, :769:13, :778:30, package.scala:32:47, :33:{76,86}]
    .io_x_d   (~_r_pte_T_5 & (_GEN_10 ? r_pte_d : _r_pte_T_8 ? aux_pte_d : mem_resp_data[7])),	// @[PTW.scala:275:18, :280:20, :294:30, :305:37, :672:{8,50}, :674:8, :676:{28,56}]
    .io_x_a   (~_r_pte_T_5 & (_GEN_10 ? r_pte_a : _r_pte_T_8 ? aux_pte_a : mem_resp_data[6])),	// @[PTW.scala:275:18, :280:20, :294:30, :305:37, :672:{8,50}, :674:8, :676:{28,56}]
    .io_x_g   (~_r_pte_T_5 & (_GEN_10 ? r_pte_g : _r_pte_T_8 ? aux_pte_g : mem_resp_data[5])),	// @[PTW.scala:275:18, :280:20, :294:30, :305:37, :672:{8,50}, :674:8, :676:{28,56}]
    .io_x_u   (~_r_pte_T_5 & (_GEN_10 ? r_pte_u : _r_pte_T_8 ? aux_pte_u : mem_resp_data[4])),	// @[PTW.scala:275:18, :280:20, :294:30, :305:37, :672:{8,50}, :674:8, :676:{28,56}]
    .io_x_x   (~_r_pte_T_5 & (_GEN_10 ? r_pte_x : _r_pte_T_8 ? aux_pte_x : mem_resp_data[3])),	// @[PTW.scala:275:18, :280:20, :294:30, :305:37, :672:{8,50}, :674:8, :676:{28,56}]
    .io_x_w   (~_r_pte_T_5 & (_GEN_10 ? r_pte_w : _r_pte_T_8 ? aux_pte_w : mem_resp_data[2])),	// @[PTW.scala:275:18, :280:20, :294:30, :305:37, :672:{8,50}, :674:8, :676:{28,56}]
    .io_x_r   (~_r_pte_T_5 & (_GEN_10 ? r_pte_r : _r_pte_T_8 ? aux_pte_r : mem_resp_data[1])),	// @[PTW.scala:275:18, :280:20, :294:30, :305:37, :672:{8,50}, :674:8, :676:{28,56}]
    .io_x_v   (~_r_pte_T_5 & (_GEN_10 ? r_pte_v : _r_pte_T_8 ? aux_pte_v : aux_pte_pte_v)),	// @[PTW.scala:275:18, :280:20, :306:26, :308:36, :311:{106,114}, :672:{8,50}, :674:8, :676:{28,56}]
    .io_y_ppn (_r_pte_barrier_io_y_ppn),
    .io_y_d   (_r_pte_barrier_io_y_d),
    .io_y_a   (_r_pte_barrier_io_y_a),
    .io_y_g   (_r_pte_barrier_io_y_g),
    .io_y_u   (_r_pte_barrier_io_y_u),
    .io_y_x   (_r_pte_barrier_io_y_x),
    .io_y_w   (_r_pte_barrier_io_y_w),
    .io_y_r   (_r_pte_barrier_io_y_r),
    .io_y_v   (_r_pte_barrier_io_y_v)
  );
  assign io_requestor_0_resp_valid = resp_valid_0;	// @[PTW.scala:242:27]
  assign io_requestor_0_resp_bits_ae_ptw = resp_ae_ptw;	// @[PTW.scala:260:24]
  assign io_requestor_0_resp_bits_ae_final = resp_ae_final;	// @[PTW.scala:261:26]
  assign io_requestor_0_resp_bits_pf = resp_pf;	// @[PTW.scala:262:20]
  assign io_requestor_0_resp_bits_gf = resp_gf;	// @[PTW.scala:263:20]
  assign io_requestor_0_resp_bits_hr = resp_hr;	// @[PTW.scala:264:20]
  assign io_requestor_0_resp_bits_hw = resp_hw;	// @[PTW.scala:265:20]
  assign io_requestor_0_resp_bits_hx = resp_hx;	// @[PTW.scala:266:20]
  assign io_requestor_0_resp_bits_pte_ppn = r_pte_ppn;	// @[PTW.scala:275:18]
  assign io_requestor_0_resp_bits_pte_d = r_pte_d;	// @[PTW.scala:275:18]
  assign io_requestor_0_resp_bits_pte_a = r_pte_a;	// @[PTW.scala:275:18]
  assign io_requestor_0_resp_bits_pte_g = r_pte_g;	// @[PTW.scala:275:18]
  assign io_requestor_0_resp_bits_pte_u = r_pte_u;	// @[PTW.scala:275:18]
  assign io_requestor_0_resp_bits_pte_x = r_pte_x;	// @[PTW.scala:275:18]
  assign io_requestor_0_resp_bits_pte_w = r_pte_w;	// @[PTW.scala:275:18]
  assign io_requestor_0_resp_bits_pte_r = r_pte_r;	// @[PTW.scala:275:18]
  assign io_requestor_0_resp_bits_pte_v = r_pte_v;	// @[PTW.scala:275:18]
  assign io_requestor_0_resp_bits_level = max_count;	// @[PTW.scala:290:25]
  assign io_requestor_0_resp_bits_homogeneous = homogeneous;	// @[PTW.scala:551:36]
  assign io_requestor_0_ptbr_mode = io_dpath_ptbr_mode;
  assign io_requestor_0_status_debug = io_dpath_status_debug;
  assign io_requestor_0_status_mxr = io_dpath_status_mxr;
  assign io_requestor_0_status_sum = io_dpath_status_sum;
  assign io_requestor_0_pmp_0_cfg_l = io_dpath_pmp_0_cfg_l;
  assign io_requestor_0_pmp_0_cfg_a = io_dpath_pmp_0_cfg_a;
  assign io_requestor_0_pmp_0_cfg_x = io_dpath_pmp_0_cfg_x;
  assign io_requestor_0_pmp_0_cfg_w = io_dpath_pmp_0_cfg_w;
  assign io_requestor_0_pmp_0_cfg_r = io_dpath_pmp_0_cfg_r;
  assign io_requestor_0_pmp_0_addr = io_dpath_pmp_0_addr;
  assign io_requestor_0_pmp_0_mask = io_dpath_pmp_0_mask;
  assign io_requestor_0_pmp_1_cfg_l = io_dpath_pmp_1_cfg_l;
  assign io_requestor_0_pmp_1_cfg_a = io_dpath_pmp_1_cfg_a;
  assign io_requestor_0_pmp_1_cfg_x = io_dpath_pmp_1_cfg_x;
  assign io_requestor_0_pmp_1_cfg_w = io_dpath_pmp_1_cfg_w;
  assign io_requestor_0_pmp_1_cfg_r = io_dpath_pmp_1_cfg_r;
  assign io_requestor_0_pmp_1_addr = io_dpath_pmp_1_addr;
  assign io_requestor_0_pmp_1_mask = io_dpath_pmp_1_mask;
  assign io_requestor_0_pmp_2_cfg_l = io_dpath_pmp_2_cfg_l;
  assign io_requestor_0_pmp_2_cfg_a = io_dpath_pmp_2_cfg_a;
  assign io_requestor_0_pmp_2_cfg_x = io_dpath_pmp_2_cfg_x;
  assign io_requestor_0_pmp_2_cfg_w = io_dpath_pmp_2_cfg_w;
  assign io_requestor_0_pmp_2_cfg_r = io_dpath_pmp_2_cfg_r;
  assign io_requestor_0_pmp_2_addr = io_dpath_pmp_2_addr;
  assign io_requestor_0_pmp_2_mask = io_dpath_pmp_2_mask;
  assign io_requestor_0_pmp_3_cfg_l = io_dpath_pmp_3_cfg_l;
  assign io_requestor_0_pmp_3_cfg_a = io_dpath_pmp_3_cfg_a;
  assign io_requestor_0_pmp_3_cfg_x = io_dpath_pmp_3_cfg_x;
  assign io_requestor_0_pmp_3_cfg_w = io_dpath_pmp_3_cfg_w;
  assign io_requestor_0_pmp_3_cfg_r = io_dpath_pmp_3_cfg_r;
  assign io_requestor_0_pmp_3_addr = io_dpath_pmp_3_addr;
  assign io_requestor_0_pmp_3_mask = io_dpath_pmp_3_mask;
  assign io_requestor_0_pmp_4_cfg_l = io_dpath_pmp_4_cfg_l;
  assign io_requestor_0_pmp_4_cfg_a = io_dpath_pmp_4_cfg_a;
  assign io_requestor_0_pmp_4_cfg_x = io_dpath_pmp_4_cfg_x;
  assign io_requestor_0_pmp_4_cfg_w = io_dpath_pmp_4_cfg_w;
  assign io_requestor_0_pmp_4_cfg_r = io_dpath_pmp_4_cfg_r;
  assign io_requestor_0_pmp_4_addr = io_dpath_pmp_4_addr;
  assign io_requestor_0_pmp_4_mask = io_dpath_pmp_4_mask;
  assign io_requestor_0_pmp_5_cfg_l = io_dpath_pmp_5_cfg_l;
  assign io_requestor_0_pmp_5_cfg_a = io_dpath_pmp_5_cfg_a;
  assign io_requestor_0_pmp_5_cfg_x = io_dpath_pmp_5_cfg_x;
  assign io_requestor_0_pmp_5_cfg_w = io_dpath_pmp_5_cfg_w;
  assign io_requestor_0_pmp_5_cfg_r = io_dpath_pmp_5_cfg_r;
  assign io_requestor_0_pmp_5_addr = io_dpath_pmp_5_addr;
  assign io_requestor_0_pmp_5_mask = io_dpath_pmp_5_mask;
  assign io_requestor_0_pmp_6_cfg_l = io_dpath_pmp_6_cfg_l;
  assign io_requestor_0_pmp_6_cfg_a = io_dpath_pmp_6_cfg_a;
  assign io_requestor_0_pmp_6_cfg_x = io_dpath_pmp_6_cfg_x;
  assign io_requestor_0_pmp_6_cfg_w = io_dpath_pmp_6_cfg_w;
  assign io_requestor_0_pmp_6_cfg_r = io_dpath_pmp_6_cfg_r;
  assign io_requestor_0_pmp_6_addr = io_dpath_pmp_6_addr;
  assign io_requestor_0_pmp_6_mask = io_dpath_pmp_6_mask;
  assign io_requestor_0_pmp_7_cfg_l = io_dpath_pmp_7_cfg_l;
  assign io_requestor_0_pmp_7_cfg_a = io_dpath_pmp_7_cfg_a;
  assign io_requestor_0_pmp_7_cfg_x = io_dpath_pmp_7_cfg_x;
  assign io_requestor_0_pmp_7_cfg_w = io_dpath_pmp_7_cfg_w;
  assign io_requestor_0_pmp_7_cfg_r = io_dpath_pmp_7_cfg_r;
  assign io_requestor_0_pmp_7_addr = io_dpath_pmp_7_addr;
  assign io_requestor_0_pmp_7_mask = io_dpath_pmp_7_mask;
  assign io_requestor_1_resp_valid = resp_valid_1;	// @[PTW.scala:242:27]
  assign io_requestor_1_resp_bits_ae_ptw = resp_ae_ptw;	// @[PTW.scala:260:24]
  assign io_requestor_1_resp_bits_ae_final = resp_ae_final;	// @[PTW.scala:261:26]
  assign io_requestor_1_resp_bits_pf = resp_pf;	// @[PTW.scala:262:20]
  assign io_requestor_1_resp_bits_gf = resp_gf;	// @[PTW.scala:263:20]
  assign io_requestor_1_resp_bits_hr = resp_hr;	// @[PTW.scala:264:20]
  assign io_requestor_1_resp_bits_hw = resp_hw;	// @[PTW.scala:265:20]
  assign io_requestor_1_resp_bits_hx = resp_hx;	// @[PTW.scala:266:20]
  assign io_requestor_1_resp_bits_pte_ppn = r_pte_ppn;	// @[PTW.scala:275:18]
  assign io_requestor_1_resp_bits_pte_d = r_pte_d;	// @[PTW.scala:275:18]
  assign io_requestor_1_resp_bits_pte_a = r_pte_a;	// @[PTW.scala:275:18]
  assign io_requestor_1_resp_bits_pte_g = r_pte_g;	// @[PTW.scala:275:18]
  assign io_requestor_1_resp_bits_pte_u = r_pte_u;	// @[PTW.scala:275:18]
  assign io_requestor_1_resp_bits_pte_x = r_pte_x;	// @[PTW.scala:275:18]
  assign io_requestor_1_resp_bits_pte_w = r_pte_w;	// @[PTW.scala:275:18]
  assign io_requestor_1_resp_bits_pte_r = r_pte_r;	// @[PTW.scala:275:18]
  assign io_requestor_1_resp_bits_pte_v = r_pte_v;	// @[PTW.scala:275:18]
  assign io_requestor_1_resp_bits_level = max_count;	// @[PTW.scala:290:25]
  assign io_requestor_1_resp_bits_homogeneous = homogeneous;	// @[PTW.scala:551:36]
  assign io_requestor_1_ptbr_mode = io_dpath_ptbr_mode;
  assign io_requestor_1_status_debug = io_dpath_status_debug;
  assign io_requestor_1_status_prv = io_dpath_status_prv;
  assign io_requestor_1_pmp_0_cfg_l = io_dpath_pmp_0_cfg_l;
  assign io_requestor_1_pmp_0_cfg_a = io_dpath_pmp_0_cfg_a;
  assign io_requestor_1_pmp_0_cfg_x = io_dpath_pmp_0_cfg_x;
  assign io_requestor_1_pmp_0_cfg_w = io_dpath_pmp_0_cfg_w;
  assign io_requestor_1_pmp_0_cfg_r = io_dpath_pmp_0_cfg_r;
  assign io_requestor_1_pmp_0_addr = io_dpath_pmp_0_addr;
  assign io_requestor_1_pmp_0_mask = io_dpath_pmp_0_mask;
  assign io_requestor_1_pmp_1_cfg_l = io_dpath_pmp_1_cfg_l;
  assign io_requestor_1_pmp_1_cfg_a = io_dpath_pmp_1_cfg_a;
  assign io_requestor_1_pmp_1_cfg_x = io_dpath_pmp_1_cfg_x;
  assign io_requestor_1_pmp_1_cfg_w = io_dpath_pmp_1_cfg_w;
  assign io_requestor_1_pmp_1_cfg_r = io_dpath_pmp_1_cfg_r;
  assign io_requestor_1_pmp_1_addr = io_dpath_pmp_1_addr;
  assign io_requestor_1_pmp_1_mask = io_dpath_pmp_1_mask;
  assign io_requestor_1_pmp_2_cfg_l = io_dpath_pmp_2_cfg_l;
  assign io_requestor_1_pmp_2_cfg_a = io_dpath_pmp_2_cfg_a;
  assign io_requestor_1_pmp_2_cfg_x = io_dpath_pmp_2_cfg_x;
  assign io_requestor_1_pmp_2_cfg_w = io_dpath_pmp_2_cfg_w;
  assign io_requestor_1_pmp_2_cfg_r = io_dpath_pmp_2_cfg_r;
  assign io_requestor_1_pmp_2_addr = io_dpath_pmp_2_addr;
  assign io_requestor_1_pmp_2_mask = io_dpath_pmp_2_mask;
  assign io_requestor_1_pmp_3_cfg_l = io_dpath_pmp_3_cfg_l;
  assign io_requestor_1_pmp_3_cfg_a = io_dpath_pmp_3_cfg_a;
  assign io_requestor_1_pmp_3_cfg_x = io_dpath_pmp_3_cfg_x;
  assign io_requestor_1_pmp_3_cfg_w = io_dpath_pmp_3_cfg_w;
  assign io_requestor_1_pmp_3_cfg_r = io_dpath_pmp_3_cfg_r;
  assign io_requestor_1_pmp_3_addr = io_dpath_pmp_3_addr;
  assign io_requestor_1_pmp_3_mask = io_dpath_pmp_3_mask;
  assign io_requestor_1_pmp_4_cfg_l = io_dpath_pmp_4_cfg_l;
  assign io_requestor_1_pmp_4_cfg_a = io_dpath_pmp_4_cfg_a;
  assign io_requestor_1_pmp_4_cfg_x = io_dpath_pmp_4_cfg_x;
  assign io_requestor_1_pmp_4_cfg_w = io_dpath_pmp_4_cfg_w;
  assign io_requestor_1_pmp_4_cfg_r = io_dpath_pmp_4_cfg_r;
  assign io_requestor_1_pmp_4_addr = io_dpath_pmp_4_addr;
  assign io_requestor_1_pmp_4_mask = io_dpath_pmp_4_mask;
  assign io_requestor_1_pmp_5_cfg_l = io_dpath_pmp_5_cfg_l;
  assign io_requestor_1_pmp_5_cfg_a = io_dpath_pmp_5_cfg_a;
  assign io_requestor_1_pmp_5_cfg_x = io_dpath_pmp_5_cfg_x;
  assign io_requestor_1_pmp_5_cfg_w = io_dpath_pmp_5_cfg_w;
  assign io_requestor_1_pmp_5_cfg_r = io_dpath_pmp_5_cfg_r;
  assign io_requestor_1_pmp_5_addr = io_dpath_pmp_5_addr;
  assign io_requestor_1_pmp_5_mask = io_dpath_pmp_5_mask;
  assign io_requestor_1_pmp_6_cfg_l = io_dpath_pmp_6_cfg_l;
  assign io_requestor_1_pmp_6_cfg_a = io_dpath_pmp_6_cfg_a;
  assign io_requestor_1_pmp_6_cfg_x = io_dpath_pmp_6_cfg_x;
  assign io_requestor_1_pmp_6_cfg_w = io_dpath_pmp_6_cfg_w;
  assign io_requestor_1_pmp_6_cfg_r = io_dpath_pmp_6_cfg_r;
  assign io_requestor_1_pmp_6_addr = io_dpath_pmp_6_addr;
  assign io_requestor_1_pmp_6_mask = io_dpath_pmp_6_mask;
  assign io_requestor_1_pmp_7_cfg_l = io_dpath_pmp_7_cfg_l;
  assign io_requestor_1_pmp_7_cfg_a = io_dpath_pmp_7_cfg_a;
  assign io_requestor_1_pmp_7_cfg_x = io_dpath_pmp_7_cfg_x;
  assign io_requestor_1_pmp_7_cfg_w = io_dpath_pmp_7_cfg_w;
  assign io_requestor_1_pmp_7_cfg_r = io_dpath_pmp_7_cfg_r;
  assign io_requestor_1_pmp_7_addr = io_dpath_pmp_7_addr;
  assign io_requestor_1_pmp_7_mask = io_dpath_pmp_7_mask;
  assign io_requestor_1_customCSRs_csrs_0_value = io_dpath_customCSRs_csrs_0_value;
  assign io_mem_req_valid = _T_160 | state == 3'h3;	// @[PTW.scala:233:22, :384:15, :389:24, :525:{39,48}]
  assign io_mem_req_bits_addr = {8'h0, r_pte_ppn[19:0], pte_addr_vpn_idx, 3'h0};	// @[PTW.scala:233:22, :275:18, :329:23, :530:24, package.scala:33:76]
  assign io_mem_req_bits_dv = do_both_stages & ~stage2;	// @[PTW.scala:283:19, :289:38, :307:38, :533:40]
  assign io_mem_s1_kill = state != 3'h2;	// @[PTW.scala:233:22, :384:15, :534:37]
endmodule

