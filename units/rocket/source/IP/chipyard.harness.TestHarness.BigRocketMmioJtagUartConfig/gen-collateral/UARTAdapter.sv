// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module UARTAdapter(
  input  clock,
         reset,
         io_uart_txd,
  output io_uart_rxd
);

  wire       _rxq_io_enq_ready;	// @[UARTAdapter.scala:38:19]
  wire       _rxq_io_deq_valid;	// @[UARTAdapter.scala:38:19]
  wire [7:0] _rxq_io_deq_bits;	// @[UARTAdapter.scala:38:19]
  wire [3:0] _rxq_io_count;	// @[UARTAdapter.scala:38:19]
  wire       _rxm_io_in_ready;	// @[UARTAdapter.scala:37:19]
  wire       _txq_io_enq_ready;	// @[UARTAdapter.scala:36:19]
  wire       _txq_io_deq_valid;	// @[UARTAdapter.scala:36:19]
  wire [7:0] _txq_io_deq_bits;	// @[UARTAdapter.scala:36:19]
  wire [3:0] _txq_io_count;	// @[UARTAdapter.scala:36:19]
  wire       _txm_io_out_valid;	// @[UARTAdapter.scala:35:19]
  wire [7:0] _txm_io_out_bits;	// @[UARTAdapter.scala:35:19]
  wire       _sim_serial_in_valid;	// @[UARTAdapter.scala:32:19]
  wire [7:0] _sim_serial_in_bits;	// @[UARTAdapter.scala:32:19]
  wire       _sim_serial_out_ready;	// @[UARTAdapter.scala:32:19]
  `ifndef SYNTHESIS	// @[UARTAdapter.scala:48:35]
    always @(posedge clock) begin	// @[UARTAdapter.scala:48:35]
      if (_txm_io_out_valid & ~reset & ~_txq_io_enq_ready) begin	// @[UARTAdapter.scala:35:19, :36:19, :48:35]
        if (`ASSERT_VERBOSE_COND_)	// @[UARTAdapter.scala:48:35]
          $error("Assertion failed\n    at UARTAdapter.scala:48 when (txq.io.enq.valid) { assert(txq.io.enq.ready) }\n");	// @[UARTAdapter.scala:48:35]
        if (`STOP_COND_)	// @[UARTAdapter.scala:48:35]
          $fatal;	// @[UARTAdapter.scala:48:35]
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  SimUART #(
    .UARTNO(0),
    .FORCEPTY(0)
  ) sim (	// @[UARTAdapter.scala:32:19]
    .clock            (clock),
    .reset            (reset),
    .serial_in_ready  (_rxq_io_enq_ready & _rxq_io_count < 4'h7),	// @[UARTAdapter.scala:38:19, :62:{46,62}]
    .serial_out_valid (_txq_io_deq_valid),	// @[UARTAdapter.scala:36:19]
    .serial_out_bits  (_txq_io_deq_bits),	// @[UARTAdapter.scala:36:19]
    .serial_in_valid  (_sim_serial_in_valid),
    .serial_in_bits   (_sim_serial_in_bits),
    .serial_out_ready (_sim_serial_out_ready)
  );
  UARTRx_TestHarness_UNIQUIFIED txm (	// @[UARTAdapter.scala:35:19]
    .clock        (clock),
    .reset        (reset),
    .io_en        (1'h1),	// @[UARTAdapter.scala:43:13]
    .io_in        (io_uart_txd),
    .io_div       (16'h10F4),	// @[UARTAdapter.scala:45:14]
    .io_out_valid (_txm_io_out_valid),
    .io_out_bits  (_txm_io_out_bits)
  );
  Queue_166 txq (	// @[UARTAdapter.scala:36:19]
    .clock        (clock),
    .reset        (reset),
    .io_enq_valid (_txm_io_out_valid),	// @[UARTAdapter.scala:35:19]
    .io_enq_bits  (_txm_io_out_bits),	// @[UARTAdapter.scala:35:19]
    .io_deq_ready (_sim_serial_out_ready),	// @[UARTAdapter.scala:32:19]
    .io_enq_ready (_txq_io_enq_ready),
    .io_deq_valid (_txq_io_deq_valid),
    .io_deq_bits  (_txq_io_deq_bits),
    .io_count     (_txq_io_count)
  );
  UARTTx_TestHarness_UNIQUIFIED rxm (	// @[UARTAdapter.scala:37:19]
    .clock       (clock),
    .reset       (reset),
    .io_en       (1'h1),	// @[UARTAdapter.scala:43:13]
    .io_in_valid (_rxq_io_deq_valid),	// @[UARTAdapter.scala:38:19]
    .io_in_bits  (_rxq_io_deq_bits),	// @[UARTAdapter.scala:38:19]
    .io_div      (16'h10F4),	// @[UARTAdapter.scala:45:14]
    .io_nstop    (1'h0),	// @[UARTAdapter.scala:48:35]
    .io_in_ready (_rxm_io_in_ready),
    .io_out      (io_uart_rxd)
  );
  Queue_166 rxq (	// @[UARTAdapter.scala:38:19]
    .clock        (clock),
    .reset        (reset),
    .io_enq_valid (_sim_serial_in_valid),	// @[UARTAdapter.scala:32:19]
    .io_enq_bits  (_sim_serial_in_bits),	// @[UARTAdapter.scala:32:19]
    .io_deq_ready (_rxm_io_in_ready),	// @[UARTAdapter.scala:37:19]
    .io_enq_ready (_rxq_io_enq_ready),
    .io_deq_valid (_rxq_io_deq_valid),
    .io_deq_bits  (_rxq_io_deq_bits),
    .io_count     (_rxq_io_count)
  );
endmodule

