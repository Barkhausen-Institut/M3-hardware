// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module AXI4ToTL(
  input          clock,
                 reset,
                 auto_in_aw_valid,
                 auto_in_aw_bits_id,
  input  [31:0]  auto_in_aw_bits_addr,
  input  [7:0]   auto_in_aw_bits_len,
  input  [2:0]   auto_in_aw_bits_size,
  input  [3:0]   auto_in_aw_bits_cache,
  input  [2:0]   auto_in_aw_bits_prot,
  input          auto_in_w_valid,
  input  [127:0] auto_in_w_bits_data,
  input  [15:0]  auto_in_w_bits_strb,
  input          auto_in_w_bits_last,
                 auto_in_b_ready,
                 auto_in_ar_valid,
                 auto_in_ar_bits_id,
  input  [31:0]  auto_in_ar_bits_addr,
  input  [7:0]   auto_in_ar_bits_len,
  input  [2:0]   auto_in_ar_bits_size,
  input  [3:0]   auto_in_ar_bits_cache,
  input  [2:0]   auto_in_ar_bits_prot,
  input          auto_in_r_ready,
                 auto_out_a_ready,
                 auto_out_d_valid,
  input  [2:0]   auto_out_d_bits_opcode,
  input  [3:0]   auto_out_d_bits_size,
                 auto_out_d_bits_source,
  input          auto_out_d_bits_denied,
  input  [127:0] auto_out_d_bits_data,
  input          auto_out_d_bits_corrupt,
  output         auto_in_aw_ready,
                 auto_in_w_ready,
                 auto_in_b_valid,
                 auto_in_b_bits_id,
  output [1:0]   auto_in_b_bits_resp,
  output         auto_in_ar_ready,
                 auto_in_r_valid,
                 auto_in_r_bits_id,
  output [127:0] auto_in_r_bits_data,
  output [1:0]   auto_in_r_bits_resp,
  output         auto_in_r_bits_last,
                 auto_out_a_valid,
  output [2:0]   auto_out_a_bits_opcode,
  output [3:0]   auto_out_a_bits_size,
                 auto_out_a_bits_source,
  output [31:0]  auto_out_a_bits_address,
  output         auto_out_a_bits_user_amba_prot_bufferable,
                 auto_out_a_bits_user_amba_prot_modifiable,
                 auto_out_a_bits_user_amba_prot_readalloc,
                 auto_out_a_bits_user_amba_prot_writealloc,
                 auto_out_a_bits_user_amba_prot_privileged,
                 auto_out_a_bits_user_amba_prot_secure,
                 auto_out_a_bits_user_amba_prot_fetch,
  output [15:0]  auto_out_a_bits_mask,
  output [127:0] auto_out_a_bits_data,
  output         auto_out_d_ready
);

  wire        out_1_ready;	// @[Arbiter.scala:124:31]
  wire        _q_b_deq_io_enq_ready;	// @[Decoupled.scala:375:21]
  wire        _q_b_deq_io_deq_valid;	// @[Decoupled.scala:375:21]
  wire        _q_b_deq_io_deq_bits_id;	// @[Decoupled.scala:375:21]
  wire        _deq_io_enq_ready;	// @[Decoupled.scala:375:21]
  wire [22:0] _r_size1_T_1 = {7'h0, auto_in_ar_bits_len, 8'hFF} << auto_in_ar_bits_size;	// @[Bundles.scala:33:21, Cat.scala:33:92]
  wire [14:0] _GEN = _r_size1_T_1[22:8] & {1'h1, ~(_r_size1_T_1[22:9])};	// @[Bundles.scala:33:{21,30}, Cat.scala:33:92, package.scala:233:{40,47,49}]
  wire [6:0]  _GEN_0 = _GEN[14:8] | _GEN[6:0];	// @[OneHot.scala:30:18, :31:18, :32:28, package.scala:233:47]
  wire [2:0]  _GEN_1 = _GEN_0[6:4] | _GEN_0[2:0];	// @[OneHot.scala:30:18, :31:18, :32:28]
  wire        _r_size_T_11 = _GEN_1[2] | _GEN_1[0];	// @[OneHot.scala:30:18, :31:18, :32:28]
  wire [3:0]  out_bits_size = {|(_GEN[14:7]), |(_GEN_0[6:3]), |(_GEN_1[2:1]), _r_size_T_11};	// @[Cat.scala:33:92, OneHot.scala:30:18, :32:{14,28}, package.scala:233:47]
  wire [31:0] out_bits_address = out_bits_size < 4'hD & auto_in_ar_bits_addr[31:12] == 20'h3 | out_bits_size < 4'h7 & ({auto_in_ar_bits_addr[31:15], auto_in_ar_bits_addr[13:12]} == 19'h0 | auto_in_ar_bits_addr[31:16] == 16'h1 | {auto_in_ar_bits_addr[31:17] ^ 15'h8, auto_in_ar_bits_addr[15:12]} == 19'h0 | auto_in_ar_bits_addr[31:16] == 16'h200 | auto_in_ar_bits_addr[31:12] == 20'h2010 | auto_in_ar_bits_addr[31:12] == 20'h4000 | auto_in_ar_bits_addr[31:26] == 6'h3 | auto_in_ar_bits_addr[31:28] == 4'h1 | auto_in_ar_bits_addr[31:29] == 3'h1 | auto_in_ar_bits_addr[31:30] == 2'h1 | auto_in_ar_bits_addr[31]) ? auto_in_ar_bits_addr : {28'h300, auto_in_ar_bits_addr[3:0]};	// @[Cat.scala:33:92, Edges.scala:493:15, OneHot.scala:64:12, Parameters.scala:92:42, :137:{31,45,65}, :671:54, :672:42, :673:26, ToTL.scala:101:{23,72}]
  reg  [2:0]  r_count_0;	// @[ToTL.scala:102:28]
  reg  [2:0]  r_count_1;	// @[ToTL.scala:102:28]
  wire [1:0]  _GEN_2 = {|(_GEN[14:7]), |(_GEN_0[6:3])};	// @[Misc.scala:205:21, OneHot.scala:30:18, :32:{14,28}, package.scala:233:47]
  wire [1:0]  _GEN_3 = {|(_GEN_1[2:1]), _r_size_T_11};	// @[OneHot.scala:30:18, :32:{14,28}, :64:12]
  wire        a_mask_acc = (|_GEN_2) | (&_GEN_3) & ~(out_bits_address[3]);	// @[Misc.scala:205:21, :208:26, :209:26, :210:20, :214:{29,38}, OneHot.scala:64:12, ToTL.scala:101:23]
  wire        a_mask_acc_1 = (|_GEN_2) | (&_GEN_3) & out_bits_address[3];	// @[Misc.scala:205:21, :208:26, :209:26, :214:{29,38}, OneHot.scala:64:12, ToTL.scala:101:23]
  wire        a_mask_size_1 = _GEN_3 == 2'h2;	// @[Misc.scala:208:26, OneHot.scala:64:12, ToTL.scala:171:23]
  wire        a_mask_eq_2 = ~(out_bits_address[3]) & ~(out_bits_address[2]);	// @[Misc.scala:209:26, :210:20, :213:27, ToTL.scala:101:23]
  wire        a_mask_acc_2 = a_mask_acc | a_mask_size_1 & a_mask_eq_2;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        a_mask_eq_3 = ~(out_bits_address[3]) & out_bits_address[2];	// @[Misc.scala:209:26, :210:20, :213:27, ToTL.scala:101:23]
  wire        a_mask_acc_3 = a_mask_acc | a_mask_size_1 & a_mask_eq_3;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        a_mask_eq_4 = out_bits_address[3] & ~(out_bits_address[2]);	// @[Misc.scala:209:26, :210:20, :213:27, ToTL.scala:101:23]
  wire        a_mask_acc_4 = a_mask_acc_1 | a_mask_size_1 & a_mask_eq_4;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        a_mask_eq_5 = out_bits_address[3] & out_bits_address[2];	// @[Misc.scala:209:26, :213:27, ToTL.scala:101:23]
  wire        a_mask_acc_5 = a_mask_acc_1 | a_mask_size_1 & a_mask_eq_5;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        a_mask_size_2 = _GEN_3 == 2'h1;	// @[Misc.scala:208:26, OneHot.scala:64:12]
  wire        a_mask_eq_6 = a_mask_eq_2 & ~(out_bits_address[1]);	// @[Misc.scala:209:26, :210:20, :213:27, ToTL.scala:101:23]
  wire        a_mask_acc_6 = a_mask_acc_2 | a_mask_size_2 & a_mask_eq_6;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        a_mask_eq_7 = a_mask_eq_2 & out_bits_address[1];	// @[Misc.scala:209:26, :213:27, ToTL.scala:101:23]
  wire        a_mask_acc_7 = a_mask_acc_2 | a_mask_size_2 & a_mask_eq_7;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        a_mask_eq_8 = a_mask_eq_3 & ~(out_bits_address[1]);	// @[Misc.scala:209:26, :210:20, :213:27, ToTL.scala:101:23]
  wire        a_mask_acc_8 = a_mask_acc_3 | a_mask_size_2 & a_mask_eq_8;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        a_mask_eq_9 = a_mask_eq_3 & out_bits_address[1];	// @[Misc.scala:209:26, :213:27, ToTL.scala:101:23]
  wire        a_mask_acc_9 = a_mask_acc_3 | a_mask_size_2 & a_mask_eq_9;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        a_mask_eq_10 = a_mask_eq_4 & ~(out_bits_address[1]);	// @[Misc.scala:209:26, :210:20, :213:27, ToTL.scala:101:23]
  wire        a_mask_acc_10 = a_mask_acc_4 | a_mask_size_2 & a_mask_eq_10;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        a_mask_eq_11 = a_mask_eq_4 & out_bits_address[1];	// @[Misc.scala:209:26, :213:27, ToTL.scala:101:23]
  wire        a_mask_acc_11 = a_mask_acc_4 | a_mask_size_2 & a_mask_eq_11;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        a_mask_eq_12 = a_mask_eq_5 & ~(out_bits_address[1]);	// @[Misc.scala:209:26, :210:20, :213:27, ToTL.scala:101:23]
  wire        a_mask_acc_12 = a_mask_acc_5 | a_mask_size_2 & a_mask_eq_12;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        a_mask_eq_13 = a_mask_eq_5 & out_bits_address[1];	// @[Misc.scala:209:26, :213:27, ToTL.scala:101:23]
  wire        a_mask_acc_13 = a_mask_acc_5 | a_mask_size_2 & a_mask_eq_13;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire [22:0] _w_size1_T_1 = {7'h0, auto_in_aw_bits_len, 8'hFF} << auto_in_aw_bits_size;	// @[Bundles.scala:33:21, Cat.scala:33:92]
  wire [14:0] _GEN_4 = _w_size1_T_1[22:8] & {1'h1, ~(_w_size1_T_1[22:9])};	// @[Bundles.scala:33:{21,30}, Cat.scala:33:92, package.scala:233:{40,47,49}]
  wire [6:0]  _GEN_5 = _GEN_4[14:8] | _GEN_4[6:0];	// @[OneHot.scala:30:18, :31:18, :32:28, package.scala:233:47]
  wire [2:0]  _GEN_6 = _GEN_5[6:4] | _GEN_5[2:0];	// @[OneHot.scala:30:18, :31:18, :32:28]
  wire        _w_size_T_11 = _GEN_6[2] | _GEN_6[0];	// @[OneHot.scala:30:18, :31:18, :32:28]
  wire [3:0]  out_1_bits_size = {|(_GEN_4[14:7]), |(_GEN_5[6:3]), |(_GEN_6[2:1]), _w_size_T_11};	// @[Cat.scala:33:92, OneHot.scala:30:18, :32:{14,28}, package.scala:233:47]
  reg  [2:0]  w_count_0;	// @[ToTL.scala:135:28]
  reg  [2:0]  w_count_1;	// @[ToTL.scala:135:28]
  wire        bundleIn_0_aw_ready = out_1_ready & auto_in_w_valid & auto_in_w_bits_last;	// @[Arbiter.scala:124:31, ToTL.scala:144:48]
  wire        out_1_earlyValid = auto_in_aw_valid & auto_in_w_valid;	// @[ToTL.scala:146:34]
  reg  [7:0]  beatsLeft;	// @[Arbiter.scala:88:30]
  wire        idle = beatsLeft == 8'h0;	// @[Arbiter.scala:88:30, :89:28, Edges.scala:229:27]
  wire [1:0]  readys_valid = {out_1_earlyValid, auto_in_ar_valid};	// @[Cat.scala:33:92, ToTL.scala:146:34]
  reg  [1:0]  readys_mask;	// @[Arbiter.scala:24:23]
  wire [1:0]  _readys_filter_T_1 = readys_valid & ~readys_mask;	// @[Arbiter.scala:24:23, :25:{28,30}, Cat.scala:33:92]
  wire [1:0]  readys_readys = ~({readys_mask[1], _readys_filter_T_1[1] | readys_mask[0]} & {|_readys_filter_T_1, out_1_earlyValid | _readys_filter_T_1[0]});	// @[Arbiter.scala:24:23, :25:28, :26:58, :27:{18,29,39,48}, ToTL.scala:146:34, package.scala:254:43]
  wire        earlyWinner_0 = readys_readys[0] & auto_in_ar_valid;	// @[Arbiter.scala:27:18, :96:86, :98:79]
  wire        earlyWinner_1 = readys_readys[1] & out_1_earlyValid;	// @[Arbiter.scala:27:18, :96:86, :98:79, ToTL.scala:146:34]
  wire        _sink_ACancel_earlyValid_T = auto_in_ar_valid | out_1_earlyValid;	// @[Arbiter.scala:108:36, ToTL.scala:146:34]
  reg         state_0;	// @[Arbiter.scala:117:26]
  reg         state_1;	// @[Arbiter.scala:117:26]
  wire        muxStateEarly_0 = idle ? earlyWinner_0 : state_0;	// @[Arbiter.scala:89:28, :98:79, :117:26, :118:30]
  wire        muxStateEarly_1 = idle ? earlyWinner_1 : state_1;	// @[Arbiter.scala:89:28, :98:79, :117:26, :118:30]
  wire        out_ready = auto_out_a_ready & (idle ? readys_readys[0] : state_0);	// @[Arbiter.scala:27:18, :89:28, :96:86, :117:26, :122:24, :124:31]
  assign out_1_ready = auto_out_a_ready & (idle ? readys_readys[1] : state_1);	// @[Arbiter.scala:27:18, :89:28, :96:86, :117:26, :122:24, :124:31]
  wire        out_2_valid = idle ? _sink_ACancel_earlyValid_T : state_0 & auto_in_ar_valid | state_1 & out_1_earlyValid;	// @[Arbiter.scala:89:28, :108:36, :117:26, :126:29, Mux.scala:27:73, ToTL.scala:146:34]
  wire [1:0]  ok_r_bits_resp = {auto_out_d_bits_denied | auto_out_d_bits_corrupt, 1'h0};	// @[Cat.scala:33:92, ToTL.scala:171:{23,42}]
  wire [26:0] _d_last_beats1_decode_T_1 = 27'hFFF << auto_out_d_bits_size;	// @[package.scala:235:71]
  reg  [7:0]  d_last_counter;	// @[Edges.scala:229:27]
  wire        x1_d_ready = auto_out_d_bits_opcode[0] ? _deq_io_enq_ready : _q_b_deq_io_enq_ready;	// @[Decoupled.scala:375:21, Edges.scala:106:36, ToTL.scala:175:25]
  reg  [2:0]  b_count_0;	// @[ToTL.scala:197:28]
  reg  [2:0]  b_count_1;	// @[ToTL.scala:197:28]
  wire        b_allow = (_q_b_deq_io_deq_bits_id ? b_count_1 : b_count_0) != (_q_b_deq_io_deq_bits_id ? w_count_1 : w_count_0);	// @[Decoupled.scala:375:21, ToTL.scala:135:28, :197:28, :198:43]
  wire        bundleIn_0_b_valid = _q_b_deq_io_deq_valid & b_allow;	// @[Decoupled.scala:375:21, ToTL.scala:198:43, :206:31]
  wire [1:0]  _readys_mask_T = readys_readys & readys_valid;	// @[Arbiter.scala:27:18, :29:29, Cat.scala:33:92]
  wire        _T_14 = out_ready & auto_in_ar_valid;	// @[Arbiter.scala:124:31, Decoupled.scala:51:35]
  wire        _T_38 = bundleIn_0_aw_ready & auto_in_aw_valid;	// @[Decoupled.scala:51:35, ToTL.scala:144:48]
  wire        latch = idle & auto_out_a_ready;	// @[Arbiter.scala:89:28, :90:24]
  wire        winnerQual_1 = readys_readys[1] & out_1_earlyValid;	// @[Arbiter.scala:27:18, :96:86, :99:79, ToTL.scala:146:34]
  wire        _T_113 = auto_in_b_ready & bundleIn_0_b_valid;	// @[Decoupled.scala:51:35, ToTL.scala:206:31]
  always @(posedge clock) begin
    if (reset) begin
      r_count_0 <= 3'h0;	// @[ToTL.scala:102:{28,50}]
      r_count_1 <= 3'h0;	// @[ToTL.scala:102:{28,50}]
      w_count_0 <= 3'h0;	// @[ToTL.scala:102:50, :135:28]
      w_count_1 <= 3'h0;	// @[ToTL.scala:102:50, :135:28]
      beatsLeft <= 8'h0;	// @[Arbiter.scala:88:30, Edges.scala:229:27]
      readys_mask <= 2'h3;	// @[Arbiter.scala:24:23]
      state_0 <= 1'h0;	// @[Arbiter.scala:117:26, Cat.scala:33:92]
      state_1 <= 1'h0;	// @[Arbiter.scala:117:26, Cat.scala:33:92]
      d_last_counter <= 8'h0;	// @[Edges.scala:229:27]
      b_count_0 <= 3'h0;	// @[ToTL.scala:102:50, :197:28]
      b_count_1 <= 3'h0;	// @[ToTL.scala:102:50, :197:28]
    end
    else begin
      if (_T_14 & ~auto_in_ar_bits_id)	// @[Decoupled.scala:51:35, ToTL.scala:126:14, :127:26]
        r_count_0 <= r_count_0 + 3'h1;	// @[Edges.scala:493:15, ToTL.scala:102:28, :127:41]
      if (_T_14 & auto_in_ar_bits_id)	// @[Decoupled.scala:51:35, ToTL.scala:127:26]
        r_count_1 <= r_count_1 + 3'h1;	// @[Edges.scala:493:15, ToTL.scala:102:28, :127:41]
      if (_T_38 & ~auto_in_aw_bits_id)	// @[Decoupled.scala:51:35, ToTL.scala:162:14, :163:26]
        w_count_0 <= w_count_0 + 3'h1;	// @[Edges.scala:493:15, ToTL.scala:135:28, :163:41]
      if (_T_38 & auto_in_aw_bits_id)	// @[Decoupled.scala:51:35, ToTL.scala:163:26]
        w_count_1 <= w_count_1 + 3'h1;	// @[Edges.scala:493:15, ToTL.scala:135:28, :163:41]
      if (latch) begin	// @[Arbiter.scala:90:24]
        if (winnerQual_1)	// @[Arbiter.scala:99:79]
          beatsLeft <= auto_in_aw_bits_len;	// @[Arbiter.scala:88:30]
        else	// @[Arbiter.scala:99:79]
          beatsLeft <= 8'h0;	// @[Arbiter.scala:88:30, Edges.scala:229:27]
      end
      else	// @[Arbiter.scala:90:24]
        beatsLeft <= beatsLeft - {7'h0, auto_out_a_ready & out_2_valid};	// @[Arbiter.scala:88:30, :114:52, :126:29, Bundles.scala:33:21, ReadyValidCancel.scala:49:33]
      if (latch & (|readys_valid))	// @[Arbiter.scala:28:{18,27}, :90:24, Cat.scala:33:92]
        readys_mask <= _readys_mask_T | {_readys_mask_T[0], 1'h0};	// @[Arbiter.scala:24:23, :29:29, Cat.scala:33:92, package.scala:245:{43,53}]
      if (idle) begin	// @[Arbiter.scala:89:28]
        state_0 <= readys_readys[0] & auto_in_ar_valid;	// @[Arbiter.scala:27:18, :96:86, :99:79, :117:26]
        state_1 <= winnerQual_1;	// @[Arbiter.scala:99:79, :117:26]
      end
      if (x1_d_ready & auto_out_d_valid) begin	// @[Decoupled.scala:51:35, ToTL.scala:175:25]
        if (d_last_counter == 8'h0) begin	// @[Edges.scala:229:27, :231:25]
          if (auto_out_d_bits_opcode[0])	// @[Edges.scala:106:36]
            d_last_counter <= ~(_d_last_beats1_decode_T_1[11:4]);	// @[Edges.scala:229:27, package.scala:235:{46,71,76}]
          else	// @[Edges.scala:106:36]
            d_last_counter <= 8'h0;	// @[Edges.scala:229:27]
        end
        else	// @[Edges.scala:231:25]
          d_last_counter <= d_last_counter - 8'h1;	// @[Edges.scala:229:27, :230:28]
      end
      if (_T_113 & ~_q_b_deq_io_deq_bits_id)	// @[Decoupled.scala:51:35, :375:21, ToTL.scala:201:14, :202:25]
        b_count_0 <= b_count_0 + 3'h1;	// @[Edges.scala:493:15, ToTL.scala:197:28, :202:40]
      if (_T_113 & _q_b_deq_io_deq_bits_id)	// @[Decoupled.scala:51:35, :375:21, ToTL.scala:202:25]
        b_count_1 <= b_count_1 + 3'h1;	// @[Edges.scala:493:15, ToTL.scala:197:28, :202:40]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    wire  [29:0] _T_2 = 30'h7FFF << {26'h0, |(_GEN[14:7]), |(_GEN_0[6:3]), |(_GEN_1[2:1]), _r_size_T_11};	// @[OneHot.scala:30:18, :32:{14,28}, package.scala:233:47, :235:71]
    wire  [29:0] _T_18 = 30'h7FFF << {26'h0, |(_GEN_4[14:7]), |(_GEN_5[6:3]), |(_GEN_6[2:1]), _w_size_T_11};	// @[OneHot.scala:30:18, :32:{14,28}, package.scala:233:47, :235:71]
    always @(posedge clock) begin	// @[ToTL.scala:109:14]
      if (~reset & ~(~auto_in_ar_valid | _r_size1_T_1[22:8] == ~(_T_2[14:0]))) begin	// @[Bundles.scala:33:{21,30}, ToTL.scala:109:{14,15,28,39}, package.scala:235:{46,71,76}]
        if (`ASSERT_VERBOSE_COND_)	// @[ToTL.scala:109:14]
          $error("Assertion failed\n    at ToTL.scala:109 assert (!in.ar.valid || r_size1 === UIntToOH1(r_size, beatCountBits)) // because aligned\n");	// @[ToTL.scala:109:14]
        if (`STOP_COND_)	// @[ToTL.scala:109:14]
          $fatal;	// @[ToTL.scala:109:14]
      end
      if (~reset & ~(~auto_in_aw_valid | _w_size1_T_1[22:8] == ~(_T_18[14:0]))) begin	// @[Bundles.scala:33:{21,30}, ToTL.scala:142:{14,15,28,39}, package.scala:235:{46,71,76}]
        if (`ASSERT_VERBOSE_COND_)	// @[ToTL.scala:142:14]
          $error("Assertion failed\n    at ToTL.scala:142 assert (!in.aw.valid || w_size1 === UIntToOH1(w_size, beatCountBits)) // because aligned\n");	// @[ToTL.scala:142:14]
        if (`STOP_COND_)	// @[ToTL.scala:142:14]
          $fatal;	// @[ToTL.scala:142:14]
      end
      if (~reset & ~(~auto_in_aw_valid | auto_in_aw_bits_len == 8'h0 | auto_in_aw_bits_size == 3'h4)) begin	// @[Edges.scala:229:27, :455:15, ToTL.scala:142:15, :143:{14,46,54,73}]
        if (`ASSERT_VERBOSE_COND_)	// @[ToTL.scala:143:14]
          $error("Assertion failed\n    at ToTL.scala:143 assert (!in.aw.valid || in.aw.bits.len === 0.U || in.aw.bits.size === log2Ceil(beatBytes).U) // because aligned\n");	// @[ToTL.scala:143:14]
        if (`STOP_COND_)	// @[ToTL.scala:143:14]
          $fatal;	// @[ToTL.scala:143:14]
      end
      if (~reset & ~(~earlyWinner_0 | ~earlyWinner_1)) begin	// @[Arbiter.scala:98:79, :106:{13,61,64,67}]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:106:13]
          $error("Assertion failed\n    at Arbiter.scala:106 assert((prefixOR zip earlyWinner) map { case (p,w) => !p || !w } reduce {_ && _})\n");	// @[Arbiter.scala:106:13]
        if (`STOP_COND_)	// @[Arbiter.scala:106:13]
          $fatal;	// @[Arbiter.scala:106:13]
      end
      if (~reset & ~(~_sink_ACancel_earlyValid_T | earlyWinner_0 | earlyWinner_1)) begin	// @[Arbiter.scala:98:79, :108:{14,15,36,41}]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:108:14]
          $error("Assertion failed\n    at Arbiter.scala:108 assert (!earlyValids.reduce(_||_) || earlyWinner.reduce(_||_))\n");	// @[Arbiter.scala:108:14]
        if (`STOP_COND_)	// @[Arbiter.scala:108:14]
          $fatal;	// @[Arbiter.scala:108:14]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        r_count_0 = _RANDOM_0[2:0];	// @[ToTL.scala:102:28]
        r_count_1 = _RANDOM_0[5:3];	// @[ToTL.scala:102:28]
        w_count_0 = _RANDOM_0[8:6];	// @[ToTL.scala:102:28, :135:28]
        w_count_1 = _RANDOM_0[11:9];	// @[ToTL.scala:102:28, :135:28]
        beatsLeft = _RANDOM_0[19:12];	// @[Arbiter.scala:88:30, ToTL.scala:102:28]
        readys_mask = _RANDOM_0[21:20];	// @[Arbiter.scala:24:23, ToTL.scala:102:28]
        state_0 = _RANDOM_0[22];	// @[Arbiter.scala:117:26, ToTL.scala:102:28]
        state_1 = _RANDOM_0[23];	// @[Arbiter.scala:117:26, ToTL.scala:102:28]
        d_last_counter = _RANDOM_0[31:24];	// @[Edges.scala:229:27, ToTL.scala:102:28]
        b_count_0 = _RANDOM_1[2:0];	// @[ToTL.scala:197:28]
        b_count_1 = _RANDOM_1[5:3];	// @[ToTL.scala:197:28]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  Queue_63 deq (	// @[Decoupled.scala:375:21]
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (auto_out_d_valid & auto_out_d_bits_opcode[0]),	// @[Edges.scala:106:36, ToTL.scala:176:33]
    .io_enq_bits_id   (auto_out_d_bits_source[3]),	// @[ToTL.scala:179:43]
    .io_enq_bits_data (auto_out_d_bits_data),
    .io_enq_bits_resp (ok_r_bits_resp),	// @[ToTL.scala:171:23]
    .io_enq_bits_last (d_last_counter == 8'h1 | (auto_out_d_bits_opcode[0] ? ~(_d_last_beats1_decode_T_1[11:4]) : 8'h0) == 8'h0),	// @[Edges.scala:106:36, :221:14, :229:27, :232:{25,33,43}, package.scala:235:{46,71,76}]
    .io_deq_ready     (auto_in_r_ready),
    .io_enq_ready     (_deq_io_enq_ready),
    .io_deq_valid     (auto_in_r_valid),
    .io_deq_bits_id   (auto_in_r_bits_id),
    .io_deq_bits_data (auto_in_r_bits_data),
    .io_deq_bits_resp (auto_in_r_bits_resp),
    .io_deq_bits_last (auto_in_r_bits_last)
  );
  Queue_64 q_b_deq (	// @[Decoupled.scala:375:21]
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (auto_out_d_valid & ~(auto_out_d_bits_opcode[0])),	// @[Edges.scala:106:36, ToTL.scala:177:{33,36}]
    .io_enq_bits_id   (auto_out_d_bits_source[3]),	// @[ToTL.scala:179:43]
    .io_enq_bits_resp (ok_r_bits_resp),	// @[ToTL.scala:171:23]
    .io_deq_ready     (auto_in_b_ready & b_allow),	// @[ToTL.scala:198:43, :207:31]
    .io_enq_ready     (_q_b_deq_io_enq_ready),
    .io_deq_valid     (_q_b_deq_io_deq_valid),
    .io_deq_bits_id   (_q_b_deq_io_deq_bits_id),
    .io_deq_bits_resp (auto_in_b_bits_resp)
  );
  assign auto_in_aw_ready = bundleIn_0_aw_ready;	// @[ToTL.scala:144:48]
  assign auto_in_w_ready = out_1_ready & auto_in_aw_valid;	// @[Arbiter.scala:124:31, ToTL.scala:145:34]
  assign auto_in_b_valid = bundleIn_0_b_valid;	// @[ToTL.scala:206:31]
  assign auto_in_b_bits_id = _q_b_deq_io_deq_bits_id;	// @[Decoupled.scala:375:21]
  assign auto_in_ar_ready = out_ready;	// @[Arbiter.scala:124:31]
  assign auto_out_a_valid = out_2_valid;	// @[Arbiter.scala:126:29]
  assign auto_out_a_bits_opcode = {muxStateEarly_0, 1'h0, muxStateEarly_1};	// @[Arbiter.scala:118:30, Cat.scala:33:92, Mux.scala:27:73]
  assign auto_out_a_bits_size = (muxStateEarly_0 ? out_bits_size : 4'h0) | (muxStateEarly_1 ? out_1_bits_size : 4'h0);	// @[Arbiter.scala:118:30, Cat.scala:33:92, Misc.scala:201:34, Mux.scala:27:73]
  assign auto_out_a_bits_source = (muxStateEarly_0 ? {auto_in_ar_bits_id, auto_in_ar_bits_id ? r_count_1[1:0] : r_count_0[1:0], 1'h0} : 4'h0) | (muxStateEarly_1 ? {auto_in_aw_bits_id, auto_in_aw_bits_id ? w_count_1[1:0] : w_count_0[1:0], 1'h1} : 4'h0);	// @[Arbiter.scala:118:30, Cat.scala:33:92, Misc.scala:201:34, Mux.scala:27:73, ToTL.scala:102:28, :106:50, :135:28, :139:50, package.scala:233:40]
  assign auto_out_a_bits_address = (muxStateEarly_0 ? out_bits_address : 32'h0) | (muxStateEarly_1 ? (out_1_bits_size < 4'hD & auto_in_aw_bits_addr[31:12] == 20'h3 | out_1_bits_size < 4'h7 & ({auto_in_aw_bits_addr[31:15], auto_in_aw_bits_addr[13:12]} == 19'h0 | {auto_in_aw_bits_addr[31:17] ^ 15'h8, auto_in_aw_bits_addr[15:12]} == 19'h0 | auto_in_aw_bits_addr[31:16] == 16'h200 | auto_in_aw_bits_addr[31:12] == 20'h2010 | auto_in_aw_bits_addr[31:12] == 20'h4000 | auto_in_aw_bits_addr[31:26] == 6'h3 | auto_in_aw_bits_addr[31:28] == 4'h1 | auto_in_aw_bits_addr[31:29] == 3'h1 | auto_in_aw_bits_addr[31:30] == 2'h1 | auto_in_aw_bits_addr[31:30] == 2'h2 | auto_in_aw_bits_addr[31:29] == 3'h6 | auto_in_aw_bits_addr[31:28] == 4'hE) | out_1_bits_size < 4'h9 & (&(auto_in_aw_bits_addr[31:28])) ? auto_in_aw_bits_addr : {28'h300, auto_in_aw_bits_addr[3:0]}) : 32'h0);	// @[Arbiter.scala:118:30, Bundles.scala:259:74, Cat.scala:33:92, Edges.scala:493:15, Mux.scala:27:73, OneHot.scala:64:12, Parameters.scala:92:42, :137:{31,45,65}, :671:54, :672:42, :673:26, ToTL.scala:101:23, :134:{23,72}, :171:23]
  assign auto_out_a_bits_user_amba_prot_bufferable = muxStateEarly_0 & auto_in_ar_bits_cache[0] | muxStateEarly_1 & auto_in_aw_bits_cache[0];	// @[Arbiter.scala:118:30, Mux.scala:27:73, ToTL.scala:119:46, :155:46]
  assign auto_out_a_bits_user_amba_prot_modifiable = muxStateEarly_0 & auto_in_ar_bits_cache[1] | muxStateEarly_1 & auto_in_aw_bits_cache[1];	// @[Arbiter.scala:118:30, Mux.scala:27:73, ToTL.scala:120:46, :156:46]
  assign auto_out_a_bits_user_amba_prot_readalloc = muxStateEarly_0 & auto_in_ar_bits_cache[2] | muxStateEarly_1 & auto_in_aw_bits_cache[2];	// @[Arbiter.scala:118:30, Mux.scala:27:73, ToTL.scala:121:46, :157:46]
  assign auto_out_a_bits_user_amba_prot_writealloc = muxStateEarly_0 & auto_in_ar_bits_cache[3] | muxStateEarly_1 & auto_in_aw_bits_cache[3];	// @[Arbiter.scala:118:30, Mux.scala:27:73, ToTL.scala:122:46, :158:46]
  assign auto_out_a_bits_user_amba_prot_privileged = muxStateEarly_0 & auto_in_ar_bits_prot[0] | muxStateEarly_1 & auto_in_aw_bits_prot[0];	// @[Arbiter.scala:118:30, Mux.scala:27:73, ToTL.scala:116:45, :152:45]
  assign auto_out_a_bits_user_amba_prot_secure = muxStateEarly_0 & ~(auto_in_ar_bits_prot[1]) | muxStateEarly_1 & ~(auto_in_aw_bits_prot[1]);	// @[Arbiter.scala:118:30, Mux.scala:27:73, ToTL.scala:117:{29,45}, :153:{29,45}]
  assign auto_out_a_bits_user_amba_prot_fetch = muxStateEarly_0 & auto_in_ar_bits_prot[2] | muxStateEarly_1 & auto_in_aw_bits_prot[2];	// @[Arbiter.scala:118:30, Mux.scala:27:73, ToTL.scala:118:45, :154:45]
  assign auto_out_a_bits_mask = (muxStateEarly_0 ? {a_mask_acc_13 | a_mask_eq_13 & out_bits_address[0], a_mask_acc_13 | a_mask_eq_13 & ~(out_bits_address[0]), a_mask_acc_12 | a_mask_eq_12 & out_bits_address[0], a_mask_acc_12 | a_mask_eq_12 & ~(out_bits_address[0]), a_mask_acc_11 | a_mask_eq_11 & out_bits_address[0], a_mask_acc_11 | a_mask_eq_11 & ~(out_bits_address[0]), a_mask_acc_10 | a_mask_eq_10 & out_bits_address[0], a_mask_acc_10 | a_mask_eq_10 & ~(out_bits_address[0]), a_mask_acc_9 | a_mask_eq_9 & out_bits_address[0], a_mask_acc_9 | a_mask_eq_9 & ~(out_bits_address[0]), a_mask_acc_8 | a_mask_eq_8 & out_bits_address[0], a_mask_acc_8 | a_mask_eq_8 & ~(out_bits_address[0]), a_mask_acc_7 | a_mask_eq_7 & out_bits_address[0], a_mask_acc_7 | a_mask_eq_7 & ~(out_bits_address[0]), a_mask_acc_6 | a_mask_eq_6 & out_bits_address[0], a_mask_acc_6 | a_mask_eq_6 & ~(out_bits_address[0])} : 16'h0) | (muxStateEarly_1 ? auto_in_w_bits_strb : 16'h0);	// @[Arbiter.scala:118:30, Bundles.scala:259:74, Cat.scala:33:92, Misc.scala:209:26, :210:20, :213:27, :214:29, Mux.scala:27:73, ToTL.scala:101:23]
  assign auto_out_a_bits_data = muxStateEarly_1 ? auto_in_w_bits_data : 128'h0;	// @[Arbiter.scala:118:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_out_d_ready = x1_d_ready;	// @[ToTL.scala:175:25]
endmodule

