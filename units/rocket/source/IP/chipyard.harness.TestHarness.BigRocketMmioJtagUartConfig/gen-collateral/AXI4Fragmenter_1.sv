// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module AXI4Fragmenter_1(
  input         clock,
                reset,
                auto_in_aw_valid,
  input  [3:0]  auto_in_aw_bits_id,
  input  [27:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input         auto_in_aw_bits_lock,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input  [3:0]  auto_in_aw_bits_qos,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
  input  [3:0]  auto_in_ar_bits_id,
  input  [27:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input         auto_in_ar_bits_lock,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input  [3:0]  auto_in_ar_bits_qos,
  input         auto_in_r_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
  input  [3:0]  auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input         auto_out_b_bits_echo_real_last,
                auto_out_ar_ready,
                auto_out_r_valid,
  input  [3:0]  auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input         auto_out_r_bits_echo_real_last,
                auto_out_r_bits_last,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
  output [3:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output        auto_in_ar_ready,
                auto_in_r_valid,
  output [3:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output        auto_in_r_bits_last,
                auto_out_aw_valid,
  output [3:0]  auto_out_aw_bits_id,
  output [27:0] auto_out_aw_bits_addr,
  output [2:0]  auto_out_aw_bits_size,
  output [1:0]  auto_out_aw_bits_burst,
  output        auto_out_aw_bits_lock,
  output [3:0]  auto_out_aw_bits_cache,
  output [2:0]  auto_out_aw_bits_prot,
  output [3:0]  auto_out_aw_bits_qos,
  output        auto_out_aw_bits_echo_real_last,
                auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
  output [3:0]  auto_out_ar_bits_id,
  output [27:0] auto_out_ar_bits_addr,
  output [2:0]  auto_out_ar_bits_size,
  output [1:0]  auto_out_ar_bits_burst,
  output        auto_out_ar_bits_lock,
  output [3:0]  auto_out_ar_bits_cache,
  output [2:0]  auto_out_ar_bits_prot,
  output [3:0]  auto_out_ar_bits_qos,
  output        auto_out_ar_bits_echo_real_last,
                auto_out_r_ready
);

  wire             x1_w_valid;	// @[Fragmenter.scala:178:33]
  wire             wbeats_ready;	// @[Fragmenter.scala:170:30]
  wire             in_aw_ready;	// @[Fragmenter.scala:163:35]
  wire             _in_w_deq_io_deq_valid;	// @[Decoupled.scala:375:21]
  wire             _in_w_deq_io_deq_bits_last;	// @[Decoupled.scala:375:21]
  wire             _deq_1_io_deq_valid;	// @[Decoupled.scala:375:21]
  wire [27:0]      _deq_1_io_deq_bits_addr;	// @[Decoupled.scala:375:21]
  wire [7:0]       _deq_1_io_deq_bits_len;	// @[Decoupled.scala:375:21]
  wire [2:0]       _deq_1_io_deq_bits_size;	// @[Decoupled.scala:375:21]
  wire [1:0]       _deq_1_io_deq_bits_burst;	// @[Decoupled.scala:375:21]
  wire             _deq_io_deq_valid;	// @[Decoupled.scala:375:21]
  wire [27:0]      _deq_io_deq_bits_addr;	// @[Decoupled.scala:375:21]
  wire [7:0]       _deq_io_deq_bits_len;	// @[Decoupled.scala:375:21]
  wire [2:0]       _deq_io_deq_bits_size;	// @[Decoupled.scala:375:21]
  wire [1:0]       _deq_io_deq_bits_burst;	// @[Decoupled.scala:375:21]
  reg              busy;	// @[Fragmenter.scala:65:29]
  reg  [27:0]      r_addr;	// @[Fragmenter.scala:66:25]
  reg  [7:0]       r_len;	// @[Fragmenter.scala:67:25]
  wire [7:0]       len = busy ? r_len : _deq_io_deq_bits_len;	// @[Decoupled.scala:375:21, Fragmenter.scala:65:29, :67:25, :69:23]
  wire [27:0]      addr = busy ? r_addr : _deq_io_deq_bits_addr;	// @[Decoupled.scala:375:21, Fragmenter.scala:65:29, :66:25, :70:23]
  wire [9:0]       _out_bits_addr_T_2 = 10'h7 << _deq_io_deq_bits_size;	// @[Decoupled.scala:375:21, package.scala:235:71]
  reg              busy_1;	// @[Fragmenter.scala:65:29]
  reg  [27:0]      r_addr_1;	// @[Fragmenter.scala:66:25]
  reg  [7:0]       r_len_1;	// @[Fragmenter.scala:67:25]
  wire [7:0]       len_1 = busy_1 ? r_len_1 : _deq_1_io_deq_bits_len;	// @[Decoupled.scala:375:21, Fragmenter.scala:65:29, :67:25, :69:23]
  wire [27:0]      addr_1 = busy_1 ? r_addr_1 : _deq_1_io_deq_bits_addr;	// @[Decoupled.scala:375:21, Fragmenter.scala:65:29, :66:25, :70:23]
  wire [9:0]       _out_bits_addr_T_9 = 10'h7 << _deq_1_io_deq_bits_size;	// @[Decoupled.scala:375:21, package.scala:235:71]
  reg              wbeats_latched;	// @[Fragmenter.scala:155:35]
  wire             _in_aw_ready_T = wbeats_ready | wbeats_latched;	// @[Fragmenter.scala:155:35, :162:52, :170:30]
  wire             x1_aw_valid = _deq_1_io_deq_valid & _in_aw_ready_T;	// @[Decoupled.scala:375:21, Fragmenter.scala:162:{35,52}]
  assign in_aw_ready = auto_out_aw_ready & _in_aw_ready_T;	// @[Fragmenter.scala:162:52, :163:35]
  wire             wbeats_valid = _deq_1_io_deq_valid & ~wbeats_latched;	// @[Decoupled.scala:375:21, Fragmenter.scala:155:35, :164:{35,38}]
  reg  [8:0]       w_counter;	// @[Fragmenter.scala:169:30]
  assign wbeats_ready = w_counter == 9'h0;	// @[Fragmenter.scala:169:30, :170:30]
  wire [8:0]       w_todo = wbeats_ready ? {8'h0, wbeats_valid} : w_counter;	// @[Fragmenter.scala:115:27, :164:35, :169:30, :170:30, :171:{23,35}]
  wire             x1_w_bits_last = w_todo == 9'h1;	// @[Fragmenter.scala:171:23, :172:27, package.scala:233:40]
  wire             _T_8 = auto_out_w_ready & x1_w_valid;	// @[Decoupled.scala:51:35, Fragmenter.scala:178:33]
  assign x1_w_valid = _in_w_deq_io_deq_valid & (~wbeats_ready | wbeats_valid);	// @[Decoupled.scala:375:21, Fragmenter.scala:164:35, :170:30, :178:{33,37,51}]
  wire             x1_b_ready = auto_in_b_ready | ~auto_out_b_bits_echo_real_last;	// @[Fragmenter.scala:194:{33,36}]
  reg  [1:0]       error_0;	// @[Fragmenter.scala:197:26]
  reg  [1:0]       error_1;	// @[Fragmenter.scala:197:26]
  reg  [1:0]       error_2;	// @[Fragmenter.scala:197:26]
  reg  [1:0]       error_3;	// @[Fragmenter.scala:197:26]
  reg  [1:0]       error_4;	// @[Fragmenter.scala:197:26]
  reg  [1:0]       error_5;	// @[Fragmenter.scala:197:26]
  reg  [1:0]       error_6;	// @[Fragmenter.scala:197:26]
  reg  [1:0]       error_7;	// @[Fragmenter.scala:197:26]
  reg  [1:0]       error_8;	// @[Fragmenter.scala:197:26]
  reg  [1:0]       error_9;	// @[Fragmenter.scala:197:26]
  reg  [1:0]       error_10;	// @[Fragmenter.scala:197:26]
  reg  [1:0]       error_11;	// @[Fragmenter.scala:197:26]
  reg  [1:0]       error_12;	// @[Fragmenter.scala:197:26]
  reg  [1:0]       error_13;	// @[Fragmenter.scala:197:26]
  reg  [1:0]       error_14;	// @[Fragmenter.scala:197:26]
  reg  [1:0]       error_15;	// @[Fragmenter.scala:197:26]
  wire [15:0][1:0] _GEN = {{error_15}, {error_14}, {error_13}, {error_12}, {error_11}, {error_10}, {error_9}, {error_8}, {error_7}, {error_6}, {error_5}, {error_4}, {error_3}, {error_2}, {error_1}, {error_0}};	// @[Fragmenter.scala:197:26, :198:41]
  wire             _T_70 = x1_b_ready & auto_out_b_valid;	// @[Decoupled.scala:51:35, Fragmenter.scala:194:33]
  wire [22:0]      _wrapMask_T_1 = {7'h0, _deq_io_deq_bits_len, 8'hFF} << _deq_io_deq_bits_size;	// @[Bundles.scala:33:21, Cat.scala:33:92, Decoupled.scala:375:21, Fragmenter.scala:105:38]
  wire [27:0]      _GEN_0 = {13'h0, _wrapMask_T_1[22:8]};	// @[Bundles.scala:33:{21,30}, Fragmenter.scala:105:38, :109:33]
  wire [27:0]      inc_addr = addr + {12'h0, 16'h1 << _deq_io_deq_bits_size};	// @[Decoupled.scala:375:21, Fragmenter.scala:70:23, :105:{29,38}, OneHot.scala:64:12]
  wire [22:0]      _wrapMask_T_3 = {7'h0, _deq_1_io_deq_bits_len, 8'hFF} << _deq_1_io_deq_bits_size;	// @[Bundles.scala:33:21, Cat.scala:33:92, Decoupled.scala:375:21, Fragmenter.scala:105:38]
  wire [27:0]      _GEN_1 = {13'h0, _wrapMask_T_3[22:8]};	// @[Bundles.scala:33:{21,30}, Fragmenter.scala:105:38, :109:33]
  wire [27:0]      inc_addr_1 = addr_1 + {12'h0, 16'h1 << _deq_1_io_deq_bits_size};	// @[Decoupled.scala:375:21, Fragmenter.scala:70:23, :105:{29,38}, OneHot.scala:64:12]
  wire             _T_2 = auto_out_ar_ready & _deq_io_deq_valid;	// @[Decoupled.scala:51:35, :375:21]
  wire             _T_5 = in_aw_ready & _deq_1_io_deq_valid;	// @[Decoupled.scala:51:35, :375:21, Fragmenter.scala:163:35]
  always @(posedge clock) begin
    if (reset) begin
      busy <= 1'h0;	// @[Fragmenter.scala:65:29]
      busy_1 <= 1'h0;	// @[Fragmenter.scala:65:29]
      wbeats_latched <= 1'h0;	// @[Fragmenter.scala:65:29, :155:35]
      w_counter <= 9'h0;	// @[Fragmenter.scala:169:30]
      error_0 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
      error_1 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
      error_2 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
      error_3 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
      error_4 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
      error_5 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
      error_6 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
      error_7 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
      error_8 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
      error_9 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
      error_10 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
      error_11 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
      error_12 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
      error_13 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
      error_14 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
      error_15 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
    end
    else begin
      if (_T_2)	// @[Decoupled.scala:51:35]
        busy <= |len;	// @[Fragmenter.scala:65:29, :69:23, :115:27]
      if (_T_5)	// @[Decoupled.scala:51:35]
        busy_1 <= |len_1;	// @[Fragmenter.scala:65:29, :69:23, :115:27]
      wbeats_latched <= ~(auto_out_aw_ready & x1_aw_valid) & (wbeats_valid & wbeats_ready | wbeats_latched);	// @[Decoupled.scala:51:35, Fragmenter.scala:155:35, :158:{26,43,60}, :159:{26,43}, :162:35, :164:35, :170:30]
      w_counter <= w_todo - {8'h0, _T_8};	// @[Decoupled.scala:51:35, Fragmenter.scala:115:27, :169:30, :171:23, :173:27]
      if (auto_out_b_bits_id == 4'h0 & _T_70) begin	// @[Decoupled.scala:51:35, Fragmenter.scala:199:63, :200:19, OneHot.scala:64:12]
        if (auto_out_b_bits_echo_real_last)
          error_0 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
        else
          error_0 <= error_0 | auto_out_b_bits_resp;	// @[Fragmenter.scala:197:26, :200:64]
      end
      if (auto_out_b_bits_id == 4'h1 & _T_70) begin	// @[Decoupled.scala:51:35, Fragmenter.scala:199:63, :200:19, OneHot.scala:64:12]
        if (auto_out_b_bits_echo_real_last)
          error_1 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
        else
          error_1 <= error_1 | auto_out_b_bits_resp;	// @[Fragmenter.scala:197:26, :200:64]
      end
      if (auto_out_b_bits_id == 4'h2 & _T_70) begin	// @[Decoupled.scala:51:35, Fragmenter.scala:199:63, :200:19, OneHot.scala:64:12]
        if (auto_out_b_bits_echo_real_last)
          error_2 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
        else
          error_2 <= error_2 | auto_out_b_bits_resp;	// @[Fragmenter.scala:197:26, :200:64]
      end
      if (auto_out_b_bits_id == 4'h3 & _T_70) begin	// @[Decoupled.scala:51:35, Fragmenter.scala:199:63, :200:19, OneHot.scala:64:12]
        if (auto_out_b_bits_echo_real_last)
          error_3 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
        else
          error_3 <= error_3 | auto_out_b_bits_resp;	// @[Fragmenter.scala:197:26, :200:64]
      end
      if (auto_out_b_bits_id == 4'h4 & _T_70) begin	// @[Decoupled.scala:51:35, Fragmenter.scala:199:63, :200:19, OneHot.scala:64:12]
        if (auto_out_b_bits_echo_real_last)
          error_4 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
        else
          error_4 <= error_4 | auto_out_b_bits_resp;	// @[Fragmenter.scala:197:26, :200:64]
      end
      if (auto_out_b_bits_id == 4'h5 & _T_70) begin	// @[Decoupled.scala:51:35, Fragmenter.scala:199:63, :200:19, OneHot.scala:64:12]
        if (auto_out_b_bits_echo_real_last)
          error_5 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
        else
          error_5 <= error_5 | auto_out_b_bits_resp;	// @[Fragmenter.scala:197:26, :200:64]
      end
      if (auto_out_b_bits_id == 4'h6 & _T_70) begin	// @[Decoupled.scala:51:35, Fragmenter.scala:199:63, :200:19, OneHot.scala:64:12]
        if (auto_out_b_bits_echo_real_last)
          error_6 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
        else
          error_6 <= error_6 | auto_out_b_bits_resp;	// @[Fragmenter.scala:197:26, :200:64]
      end
      if (auto_out_b_bits_id == 4'h7 & _T_70) begin	// @[Decoupled.scala:51:35, Fragmenter.scala:199:63, :200:19, OneHot.scala:64:12]
        if (auto_out_b_bits_echo_real_last)
          error_7 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
        else
          error_7 <= error_7 | auto_out_b_bits_resp;	// @[Fragmenter.scala:197:26, :200:64]
      end
      if (auto_out_b_bits_id == 4'h8 & _T_70) begin	// @[Decoupled.scala:51:35, Fragmenter.scala:199:63, :200:19, OneHot.scala:64:12]
        if (auto_out_b_bits_echo_real_last)
          error_8 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
        else
          error_8 <= error_8 | auto_out_b_bits_resp;	// @[Fragmenter.scala:197:26, :200:64]
      end
      if (auto_out_b_bits_id == 4'h9 & _T_70) begin	// @[Decoupled.scala:51:35, Fragmenter.scala:199:63, :200:19, OneHot.scala:64:12]
        if (auto_out_b_bits_echo_real_last)
          error_9 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
        else
          error_9 <= error_9 | auto_out_b_bits_resp;	// @[Fragmenter.scala:197:26, :200:64]
      end
      if (auto_out_b_bits_id == 4'hA & _T_70) begin	// @[Decoupled.scala:51:35, Fragmenter.scala:199:63, :200:19, OneHot.scala:64:12]
        if (auto_out_b_bits_echo_real_last)
          error_10 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
        else
          error_10 <= error_10 | auto_out_b_bits_resp;	// @[Fragmenter.scala:197:26, :200:64]
      end
      if (auto_out_b_bits_id == 4'hB & _T_70) begin	// @[Decoupled.scala:51:35, Fragmenter.scala:199:63, :200:19, OneHot.scala:64:12]
        if (auto_out_b_bits_echo_real_last)
          error_11 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
        else
          error_11 <= error_11 | auto_out_b_bits_resp;	// @[Fragmenter.scala:197:26, :200:64]
      end
      if (auto_out_b_bits_id == 4'hC & _T_70) begin	// @[Decoupled.scala:51:35, Fragmenter.scala:199:63, :200:19, OneHot.scala:64:12]
        if (auto_out_b_bits_echo_real_last)
          error_12 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
        else
          error_12 <= error_12 | auto_out_b_bits_resp;	// @[Fragmenter.scala:197:26, :200:64]
      end
      if (auto_out_b_bits_id == 4'hD & _T_70) begin	// @[Decoupled.scala:51:35, Fragmenter.scala:199:63, :200:19, OneHot.scala:64:12]
        if (auto_out_b_bits_echo_real_last)
          error_13 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
        else
          error_13 <= error_13 | auto_out_b_bits_resp;	// @[Fragmenter.scala:197:26, :200:64]
      end
      if (auto_out_b_bits_id == 4'hE & _T_70) begin	// @[Decoupled.scala:51:35, Fragmenter.scala:199:63, :200:19, OneHot.scala:64:12]
        if (auto_out_b_bits_echo_real_last)
          error_14 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
        else
          error_14 <= error_14 | auto_out_b_bits_resp;	// @[Fragmenter.scala:197:26, :200:64]
      end
      if ((&auto_out_b_bits_id) & _T_70) begin	// @[Decoupled.scala:51:35, Fragmenter.scala:199:63, :200:19]
        if (auto_out_b_bits_echo_real_last)
          error_15 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
        else
          error_15 <= error_15 | auto_out_b_bits_resp;	// @[Fragmenter.scala:197:26, :200:64]
      end
    end
    if (_T_2) begin	// @[Decoupled.scala:51:35]
      if (_deq_io_deq_bits_burst == 2'h0)	// @[Decoupled.scala:375:21, Fragmenter.scala:97:34]
        r_addr <= _deq_io_deq_bits_addr;	// @[Decoupled.scala:375:21, Fragmenter.scala:66:25]
      else if (_deq_io_deq_bits_burst == 2'h2)	// @[Decoupled.scala:375:21, Fragmenter.scala:108:28]
        r_addr <= inc_addr & _GEN_0 | ~(~_deq_io_deq_bits_addr | _GEN_0);	// @[Decoupled.scala:375:21, Fragmenter.scala:66:25, :105:29, :109:{33,45,47,49,62}]
      else	// @[Fragmenter.scala:108:28]
        r_addr <= inc_addr;	// @[Fragmenter.scala:66:25, :105:29]
      r_len <= len - 8'h1;	// @[Fragmenter.scala:67:25, :69:23, :132:25]
    end
    if (_T_5) begin	// @[Decoupled.scala:51:35]
      if (_deq_1_io_deq_bits_burst == 2'h0)	// @[Decoupled.scala:375:21, Fragmenter.scala:97:34]
        r_addr_1 <= _deq_1_io_deq_bits_addr;	// @[Decoupled.scala:375:21, Fragmenter.scala:66:25]
      else if (_deq_1_io_deq_bits_burst == 2'h2)	// @[Decoupled.scala:375:21, Fragmenter.scala:108:28]
        r_addr_1 <= inc_addr_1 & _GEN_1 | ~(~_deq_1_io_deq_bits_addr | _GEN_1);	// @[Decoupled.scala:375:21, Fragmenter.scala:66:25, :105:29, :109:{33,45,47,49,62}]
      else	// @[Fragmenter.scala:108:28]
        r_addr_1 <= inc_addr_1;	// @[Fragmenter.scala:66:25, :105:29]
      r_len_1 <= len_1 - 8'h1;	// @[Fragmenter.scala:67:25, :69:23, :132:25]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    always @(posedge clock) begin	// @[Fragmenter.scala:174:14]
      if (~reset & ~(~_T_8 | (|w_todo))) begin	// @[Decoupled.scala:51:35, Fragmenter.scala:171:23, :174:{14,15,27,37}]
        if (`ASSERT_VERBOSE_COND_)	// @[Fragmenter.scala:174:14]
          $error("Assertion failed\n    at Fragmenter.scala:174 assert (!out.w.fire || w_todo =/= 0.U) // underflow impossible\n");	// @[Fragmenter.scala:174:14]
        if (`STOP_COND_)	// @[Fragmenter.scala:174:14]
          $fatal;	// @[Fragmenter.scala:174:14]
      end
      if (~reset & ~(~x1_w_valid | ~_in_w_deq_io_deq_bits_last | x1_w_bits_last)) begin	// @[Decoupled.scala:375:21, Fragmenter.scala:172:27, :178:33, :183:{14,15,31,47}]
        if (`ASSERT_VERBOSE_COND_)	// @[Fragmenter.scala:183:14]
          $error("Assertion failed\n    at Fragmenter.scala:183 assert (!out.w.valid || !in_w.bits.last || w_last)\n");	// @[Fragmenter.scala:183:14]
        if (`STOP_COND_)	// @[Fragmenter.scala:183:14]
          $fatal;	// @[Fragmenter.scala:183:14]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        busy = _RANDOM_0[0];	// @[Fragmenter.scala:65:29]
        r_addr = _RANDOM_0[28:1];	// @[Fragmenter.scala:65:29, :66:25]
        r_len = {_RANDOM_0[31:29], _RANDOM_1[4:0]};	// @[Fragmenter.scala:65:29, :67:25]
        busy_1 = _RANDOM_1[5];	// @[Fragmenter.scala:65:29, :67:25]
        r_addr_1 = {_RANDOM_1[31:6], _RANDOM_2[1:0]};	// @[Fragmenter.scala:66:25, :67:25]
        r_len_1 = _RANDOM_2[9:2];	// @[Fragmenter.scala:66:25, :67:25]
        wbeats_latched = _RANDOM_2[10];	// @[Fragmenter.scala:66:25, :155:35]
        w_counter = _RANDOM_2[19:11];	// @[Fragmenter.scala:66:25, :169:30]
        error_0 = _RANDOM_2[21:20];	// @[Fragmenter.scala:66:25, :197:26]
        error_1 = _RANDOM_2[23:22];	// @[Fragmenter.scala:66:25, :197:26]
        error_2 = _RANDOM_2[25:24];	// @[Fragmenter.scala:66:25, :197:26]
        error_3 = _RANDOM_2[27:26];	// @[Fragmenter.scala:66:25, :197:26]
        error_4 = _RANDOM_2[29:28];	// @[Fragmenter.scala:66:25, :197:26]
        error_5 = _RANDOM_2[31:30];	// @[Fragmenter.scala:66:25, :197:26]
        error_6 = _RANDOM_3[1:0];	// @[Fragmenter.scala:197:26]
        error_7 = _RANDOM_3[3:2];	// @[Fragmenter.scala:197:26]
        error_8 = _RANDOM_3[5:4];	// @[Fragmenter.scala:197:26]
        error_9 = _RANDOM_3[7:6];	// @[Fragmenter.scala:197:26]
        error_10 = _RANDOM_3[9:8];	// @[Fragmenter.scala:197:26]
        error_11 = _RANDOM_3[11:10];	// @[Fragmenter.scala:197:26]
        error_12 = _RANDOM_3[13:12];	// @[Fragmenter.scala:197:26]
        error_13 = _RANDOM_3[15:14];	// @[Fragmenter.scala:197:26]
        error_14 = _RANDOM_3[17:16];	// @[Fragmenter.scala:197:26]
        error_15 = _RANDOM_3[19:18];	// @[Fragmenter.scala:197:26]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  Queue_135 deq (	// @[Decoupled.scala:375:21]
    .clock             (clock),
    .reset             (reset),
    .io_enq_valid      (auto_in_ar_valid),
    .io_enq_bits_id    (auto_in_ar_bits_id),
    .io_enq_bits_addr  (auto_in_ar_bits_addr),
    .io_enq_bits_len   (auto_in_ar_bits_len),
    .io_enq_bits_size  (auto_in_ar_bits_size),
    .io_enq_bits_burst (auto_in_ar_bits_burst),
    .io_enq_bits_lock  (auto_in_ar_bits_lock),
    .io_enq_bits_cache (auto_in_ar_bits_cache),
    .io_enq_bits_prot  (auto_in_ar_bits_prot),
    .io_enq_bits_qos   (auto_in_ar_bits_qos),
    .io_deq_ready      (auto_out_ar_ready & ~(|len)),	// @[Fragmenter.scala:69:23, :115:27, :116:30]
    .io_enq_ready      (auto_in_ar_ready),
    .io_deq_valid      (_deq_io_deq_valid),
    .io_deq_bits_id    (auto_out_ar_bits_id),
    .io_deq_bits_addr  (_deq_io_deq_bits_addr),
    .io_deq_bits_len   (_deq_io_deq_bits_len),
    .io_deq_bits_size  (_deq_io_deq_bits_size),
    .io_deq_bits_burst (_deq_io_deq_bits_burst),
    .io_deq_bits_lock  (auto_out_ar_bits_lock),
    .io_deq_bits_cache (auto_out_ar_bits_cache),
    .io_deq_bits_prot  (auto_out_ar_bits_prot),
    .io_deq_bits_qos   (auto_out_ar_bits_qos)
  );
  Queue_135 deq_1 (	// @[Decoupled.scala:375:21]
    .clock             (clock),
    .reset             (reset),
    .io_enq_valid      (auto_in_aw_valid),
    .io_enq_bits_id    (auto_in_aw_bits_id),
    .io_enq_bits_addr  (auto_in_aw_bits_addr),
    .io_enq_bits_len   (auto_in_aw_bits_len),
    .io_enq_bits_size  (auto_in_aw_bits_size),
    .io_enq_bits_burst (auto_in_aw_bits_burst),
    .io_enq_bits_lock  (auto_in_aw_bits_lock),
    .io_enq_bits_cache (auto_in_aw_bits_cache),
    .io_enq_bits_prot  (auto_in_aw_bits_prot),
    .io_enq_bits_qos   (auto_in_aw_bits_qos),
    .io_deq_ready      (in_aw_ready & ~(|len_1)),	// @[Fragmenter.scala:69:23, :115:27, :116:30, :163:35]
    .io_enq_ready      (auto_in_aw_ready),
    .io_deq_valid      (_deq_1_io_deq_valid),
    .io_deq_bits_id    (auto_out_aw_bits_id),
    .io_deq_bits_addr  (_deq_1_io_deq_bits_addr),
    .io_deq_bits_len   (_deq_1_io_deq_bits_len),
    .io_deq_bits_size  (_deq_1_io_deq_bits_size),
    .io_deq_bits_burst (_deq_1_io_deq_bits_burst),
    .io_deq_bits_lock  (auto_out_aw_bits_lock),
    .io_deq_bits_cache (auto_out_aw_bits_cache),
    .io_deq_bits_prot  (auto_out_aw_bits_prot),
    .io_deq_bits_qos   (auto_out_aw_bits_qos)
  );
  Queue_137 in_w_deq (	// @[Decoupled.scala:375:21]
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (auto_in_w_valid),
    .io_enq_bits_data (auto_in_w_bits_data),
    .io_enq_bits_strb (auto_in_w_bits_strb),
    .io_enq_bits_last (auto_in_w_bits_last),
    .io_deq_ready     (auto_out_w_ready & (~wbeats_ready | wbeats_valid)),	// @[Fragmenter.scala:164:35, :170:30, :178:37, :179:{33,51}]
    .io_enq_ready     (auto_in_w_ready),
    .io_deq_valid     (_in_w_deq_io_deq_valid),
    .io_deq_bits_data (auto_out_w_bits_data),
    .io_deq_bits_strb (auto_out_w_bits_strb),
    .io_deq_bits_last (_in_w_deq_io_deq_bits_last)
  );
  assign auto_in_b_valid = auto_out_b_valid & auto_out_b_bits_echo_real_last;	// @[Fragmenter.scala:193:33]
  assign auto_in_b_bits_id = auto_out_b_bits_id;
  assign auto_in_b_bits_resp = auto_out_b_bits_resp | _GEN[auto_out_b_bits_id];	// @[Fragmenter.scala:198:41]
  assign auto_in_r_valid = auto_out_r_valid;
  assign auto_in_r_bits_id = auto_out_r_bits_id;
  assign auto_in_r_bits_data = auto_out_r_bits_data;
  assign auto_in_r_bits_resp = auto_out_r_bits_resp;
  assign auto_in_r_bits_last = auto_out_r_bits_last & auto_out_r_bits_echo_real_last;	// @[Fragmenter.scala:188:41]
  assign auto_out_aw_valid = x1_aw_valid;	// @[Fragmenter.scala:162:35]
  assign auto_out_aw_bits_addr = ~(~addr_1 | {25'h0, ~(_out_bits_addr_T_9[2:0])});	// @[Fragmenter.scala:70:23, :127:{26,28,34}, package.scala:235:{46,71,76}]
  assign auto_out_aw_bits_size = _deq_1_io_deq_bits_size;	// @[Decoupled.scala:375:21]
  assign auto_out_aw_bits_burst = _deq_1_io_deq_bits_burst;	// @[Decoupled.scala:375:21]
  assign auto_out_aw_bits_echo_real_last = ~(|len_1);	// @[Fragmenter.scala:69:23, :115:27]
  assign auto_out_w_valid = x1_w_valid;	// @[Fragmenter.scala:178:33]
  assign auto_out_w_bits_last = x1_w_bits_last;	// @[Fragmenter.scala:172:27]
  assign auto_out_b_ready = x1_b_ready;	// @[Fragmenter.scala:194:33]
  assign auto_out_ar_valid = _deq_io_deq_valid;	// @[Decoupled.scala:375:21]
  assign auto_out_ar_bits_addr = ~(~addr | {25'h0, ~(_out_bits_addr_T_2[2:0])});	// @[Fragmenter.scala:70:23, :127:{26,28,34}, package.scala:235:{46,71,76}]
  assign auto_out_ar_bits_size = _deq_io_deq_bits_size;	// @[Decoupled.scala:375:21]
  assign auto_out_ar_bits_burst = _deq_io_deq_bits_burst;	// @[Decoupled.scala:375:21]
  assign auto_out_ar_bits_echo_real_last = ~(|len);	// @[Fragmenter.scala:69:23, :115:27]
  assign auto_out_r_ready = auto_in_r_ready;
endmodule

