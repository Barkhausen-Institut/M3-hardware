// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module ALU(
  input         io_dw,
  input  [3:0]  io_fn,
  input  [63:0] io_in2,
                io_in1,
  output [63:0] io_out,
                io_adder_out,
  output        io_cmp_out
);

  wire [63:0] in2_inv = {64{io_fn[3]}} ^ io_in2;	// @[ALU.scala:110:29, :139:20]
  wire [63:0] in1_xor_in2 = io_in1 ^ in2_inv;	// @[ALU.scala:139:20, :140:28]
  wire [63:0] _io_adder_out_output = io_in1 + in2_inv + {63'h0, io_fn[3]};	// @[ALU.scala:110:29, :139:20, :141:36, :175:50]
  wire        slt = io_in1[63] == io_in2[63] ? _io_adder_out_output[63] : io_fn[1] ? io_in2[63] : io_in1[63];	// @[ALU.scala:112:35, :141:36, :145:{8,15,24,34,56}, :146:8]
  wire [31:0] _T_7 = io_dw ? io_in1[63:32] : {32{io_fn[3] & io_in1[31]}};	// @[ALU.scala:110:29, :154:{52,61}, :155:{24,48}, Bitwise.scala:77:12]
  wire        _shout_T = io_fn == 4'h5;	// @[ALU.scala:159:24]
  wire        _shout_T_1 = io_fn == 4'hB;	// @[ALU.scala:159:50]
  wire [63:0] shin = _shout_T | _shout_T_1 ? {_T_7, io_in1[31:0]} : {io_in1[0], io_in1[1], io_in1[2], io_in1[3], io_in1[4], io_in1[5], io_in1[6], io_in1[7], io_in1[8], io_in1[9], io_in1[10], io_in1[11], io_in1[12], io_in1[13], io_in1[14], io_in1[15], io_in1[16], io_in1[17], io_in1[18], io_in1[19], io_in1[20], io_in1[21], io_in1[22], io_in1[23], io_in1[24], io_in1[25], io_in1[26], io_in1[27], io_in1[28], io_in1[29], io_in1[30], io_in1[31], _T_7[0], _T_7[1], _T_7[2], _T_7[3], _T_7[4], _T_7[5], _T_7[6], _T_7[7], _T_7[8], _T_7[9], _T_7[10], _T_7[11], _T_7[12], _T_7[13], _T_7[14], _T_7[15], _T_7[16], _T_7[17], _T_7[18], _T_7[19], _T_7[20], _T_7[21], _T_7[22], _T_7[23], _T_7[24], _T_7[25], _T_7[26], _T_7[27], _T_7[28], _T_7[29], _T_7[30], _T_7[31]};	// @[ALU.scala:155:24, :157:34, :159:{17,24,41,50}, Bitwise.scala:108:{21,39,46}, Cat.scala:33:92]
  wire [64:0] _shout_r_T_5 = $signed($signed({io_fn[3] & shin[63], shin}) >>> {59'h0, io_in2[5] & io_dw, io_in2[4:0]});	// @[ALU.scala:110:29, :156:{29,33,60}, :159:17, :160:{41,47,70}, Cat.scala:33:92]
  wire        _logic_T_4 = io_fn == 4'h6;	// @[ALU.scala:172:51]
  wire [63:0] out = io_fn == 4'h0 | io_fn == 4'hA ? _io_adder_out_output : {63'h0, io_fn > 4'hB & slt} | (io_fn == 4'h4 | _logic_T_4 ? in1_xor_in2 : 64'h0) | (_logic_T_4 | io_fn == 4'h7 ? io_in1 & io_in2 : 64'h0) | (_shout_T | _shout_T_1 ? _shout_r_T_5[63:0] : 64'h0) | (io_fn == 4'h1 ? {_shout_r_T_5[0], _shout_r_T_5[1], _shout_r_T_5[2], _shout_r_T_5[3], _shout_r_T_5[4], _shout_r_T_5[5], _shout_r_T_5[6], _shout_r_T_5[7], _shout_r_T_5[8], _shout_r_T_5[9], _shout_r_T_5[10], _shout_r_T_5[11], _shout_r_T_5[12], _shout_r_T_5[13], _shout_r_T_5[14], _shout_r_T_5[15], _shout_r_T_5[16], _shout_r_T_5[17], _shout_r_T_5[18], _shout_r_T_5[19], _shout_r_T_5[20], _shout_r_T_5[21], _shout_r_T_5[22], _shout_r_T_5[23], _shout_r_T_5[24], _shout_r_T_5[25], _shout_r_T_5[26], _shout_r_T_5[27], _shout_r_T_5[28], _shout_r_T_5[29], _shout_r_T_5[30], _shout_r_T_5[31], _shout_r_T_5[32], _shout_r_T_5[33], _shout_r_T_5[34], _shout_r_T_5[35], _shout_r_T_5[36], _shout_r_T_5[37], _shout_r_T_5[38], _shout_r_T_5[39], _shout_r_T_5[40], _shout_r_T_5[41], _shout_r_T_5[42], _shout_r_T_5[43], _shout_r_T_5[44], _shout_r_T_5[45], _shout_r_T_5[46], _shout_r_T_5[47], _shout_r_T_5[48], _shout_r_T_5[49], _shout_r_T_5[50], _shout_r_T_5[51], _shout_r_T_5[52], _shout_r_T_5[53], _shout_r_T_5[54], _shout_r_T_5[55], _shout_r_T_5[56], _shout_r_T_5[57], _shout_r_T_5[58], _shout_r_T_5[59], _shout_r_T_5[60], _shout_r_T_5[61], _shout_r_T_5[62], _shout_r_T_5[63]} : 64'h0);	// @[ALU.scala:111:30, :140:28, :141:36, :145:8, :159:{24,50}, :160:{70,79}, :162:{18,41}, :163:{18,25}, :172:{18,25,42,51}, :173:{18,41,50,75}, :175:{42,50,58}, :180:{16,23,40,49}, Bitwise.scala:108:{21,31,39,46}]
  assign io_out = io_dw ? out : {{32{out[31]}}, out[31:0]};	// @[ALU.scala:180:16, :182:10, :185:{28,37,56,66}, Bitwise.scala:77:12, Cat.scala:33:92]
  assign io_adder_out = _io_adder_out_output;	// @[ALU.scala:141:36]
  assign io_cmp_out = io_fn[0] ^ (io_fn[3] ? slt : in1_xor_in2 == 64'h0);	// @[ALU.scala:110:29, :113:35, :140:28, :145:8, :147:{42,47,80}, :162:18]
endmodule

