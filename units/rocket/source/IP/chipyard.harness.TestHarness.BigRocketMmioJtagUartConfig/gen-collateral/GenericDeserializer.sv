// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module GenericDeserializer(
  input         clock,
                reset,
                io_in_valid,
  input  [31:0] io_in_bits,
  input         io_out_ready,
  output        io_in_ready,
                io_out_valid,
  output [2:0]  io_out_bits_chanId,
                io_out_bits_opcode,
                io_out_bits_param,
  output [7:0]  io_out_bits_size,
                io_out_bits_source,
  output [63:0] io_out_bits_address,
                io_out_bits_data,
  output        io_out_bits_corrupt,
  output [8:0]  io_out_bits_union
);

  reg  [31:0] data_0;	// @[Serdes.scala:200:17]
  reg  [31:0] data_1;	// @[Serdes.scala:200:17]
  reg  [31:0] data_2;	// @[Serdes.scala:200:17]
  reg  [31:0] data_3;	// @[Serdes.scala:200:17]
  reg  [31:0] data_4;	// @[Serdes.scala:200:17]
  reg  [31:0] data_5;	// @[Serdes.scala:200:17]
  reg         receiving;	// @[Serdes.scala:202:26]
  reg  [2:0]  recvCount;	// @[Counter.scala:61:40]
  wire        wrap_wrap = recvCount == 3'h5;	// @[Counter.scala:61:40, :73:24]
  wire        _T_1 = receiving & io_in_valid;	// @[Decoupled.scala:51:35, Serdes.scala:202:26]
  always @(posedge clock) begin
    if (_T_1 & recvCount == 3'h0)	// @[Counter.scala:61:40, Decoupled.scala:51:35, Serdes.scala:200:17, :209:21, :210:21]
      data_0 <= io_in_bits;	// @[Serdes.scala:200:17]
    if (_T_1 & recvCount == 3'h1)	// @[Counter.scala:61:40, Decoupled.scala:51:35, Serdes.scala:200:17, :209:21, :210:21]
      data_1 <= io_in_bits;	// @[Serdes.scala:200:17]
    if (_T_1 & recvCount == 3'h2)	// @[Counter.scala:61:40, Decoupled.scala:51:35, Serdes.scala:200:17, :209:21, :210:21]
      data_2 <= io_in_bits;	// @[Serdes.scala:200:17]
    if (_T_1 & recvCount == 3'h3)	// @[Counter.scala:61:40, Decoupled.scala:51:35, Serdes.scala:200:17, :209:21, :210:21]
      data_3 <= io_in_bits;	// @[Serdes.scala:200:17]
    if (_T_1 & recvCount == 3'h4)	// @[Counter.scala:61:40, Decoupled.scala:51:35, Serdes.scala:200:17, :209:21, :210:21]
      data_4 <= io_in_bits;	// @[Serdes.scala:200:17]
    if (_T_1 & recvCount == 3'h5)	// @[Counter.scala:61:40, :73:24, Decoupled.scala:51:35, Serdes.scala:200:17, :209:21, :210:21]
      data_5 <= io_in_bits;	// @[Serdes.scala:200:17]
    if (reset) begin
      receiving <= 1'h1;	// @[Serdes.scala:202:26]
      recvCount <= 3'h0;	// @[Counter.scala:61:40]
    end
    else begin
      receiving <= io_out_ready & ~receiving | ~(_T_1 & wrap_wrap) & receiving;	// @[Counter.scala:73:24, :117:24, :118:{16,23}, Decoupled.scala:51:35, Serdes.scala:202:26, :206:19, :213:{19,31}, :215:{22,34}]
      if (_T_1) begin	// @[Decoupled.scala:51:35]
        if (wrap_wrap)	// @[Counter.scala:73:24]
          recvCount <= 3'h0;	// @[Counter.scala:61:40]
        else	// @[Counter.scala:73:24]
          recvCount <= recvCount + 3'h1;	// @[Counter.scala:61:40, :77:24, Serdes.scala:210:21]
      end
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        data_0 = _RANDOM_0;	// @[Serdes.scala:200:17]
        data_1 = _RANDOM_1;	// @[Serdes.scala:200:17]
        data_2 = _RANDOM_2;	// @[Serdes.scala:200:17]
        data_3 = _RANDOM_3;	// @[Serdes.scala:200:17]
        data_4 = _RANDOM_4;	// @[Serdes.scala:200:17]
        data_5 = _RANDOM_5;	// @[Serdes.scala:200:17]
        receiving = _RANDOM_6[0];	// @[Serdes.scala:202:26]
        recvCount = _RANDOM_6[3:1];	// @[Counter.scala:61:40, Serdes.scala:202:26]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_in_ready = receiving;	// @[Serdes.scala:202:26]
  assign io_out_valid = ~receiving;	// @[Serdes.scala:202:26, :206:19]
  assign io_out_bits_chanId = data_5[3:1];	// @[Serdes.scala:200:17, :207:38]
  assign io_out_bits_opcode = {data_5[0], data_4[31:30]};	// @[Serdes.scala:200:17, :207:38]
  assign io_out_bits_param = data_4[29:27];	// @[Serdes.scala:200:17, :207:38]
  assign io_out_bits_size = data_4[26:19];	// @[Serdes.scala:200:17, :207:38]
  assign io_out_bits_source = data_4[18:11];	// @[Serdes.scala:200:17, :207:38]
  assign io_out_bits_address = {data_4[10:0], data_3, data_2[31:11]};	// @[Serdes.scala:200:17, :207:38]
  assign io_out_bits_data = {data_2[10:0], data_1, data_0[31:11]};	// @[Serdes.scala:200:17, :207:38]
  assign io_out_bits_corrupt = data_0[10];	// @[Serdes.scala:200:17, :207:38]
  assign io_out_bits_union = data_0[9:1];	// @[Serdes.scala:200:17, :207:38]
endmodule

