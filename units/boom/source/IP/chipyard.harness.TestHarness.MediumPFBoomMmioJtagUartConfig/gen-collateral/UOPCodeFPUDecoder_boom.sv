// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module UOPCodeFPUDecoder_boom(
  input  [6:0] io_uopc,
  output       io_sigs_ren2,
               io_sigs_ren3,
               io_sigs_swap23,
  output [1:0] io_sigs_typeTagIn,
               io_sigs_typeTagOut,
  output       io_sigs_fromint,
               io_sigs_toint,
               io_sigs_fastpipe,
               io_sigs_fma,
               io_sigs_wflags
);

  wire [5:0] _GEN = ~(io_uopc[5:0]);	// @[pla.scala:78:21]
  wire [4:0] _decoder_decoded_T_6 = {io_uopc[0], io_uopc[2], _GEN[4], _GEN[5], io_uopc[6]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [3:0] _decoder_decoded_T_28 = {_GEN[1], io_uopc[4], _GEN[5], io_uopc[6]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [4:0] _decoder_decoded_T_44 = {io_uopc[0], io_uopc[2], io_uopc[4], _GEN[5], io_uopc[6]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [3:0] _decoder_decoded_T_50 = {io_uopc[3], io_uopc[4], _GEN[5], io_uopc[6]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [5:0] _decoder_decoded_T_54 = {io_uopc[1], _GEN[2], io_uopc[3], io_uopc[4], _GEN[5], io_uopc[6]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [6:0] _decoder_decoded_T_56 = {_GEN[0], _GEN[1], io_uopc[2], io_uopc[3], io_uopc[4], _GEN[5], io_uopc[6]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [5:0] _decoder_decoded_T_62 = {_GEN[0], _GEN[1], _GEN[3], _GEN[4], io_uopc[5], io_uopc[6]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [4:0] _decoder_decoded_T_64 = {_GEN[2], _GEN[3], _GEN[4], io_uopc[5], io_uopc[6]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [5:0] _decoder_decoded_T_66 = {io_uopc[0], _GEN[2], _GEN[3], _GEN[4], io_uopc[5], io_uopc[6]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [5:0] _decoder_decoded_T_68 = {io_uopc[1], _GEN[2], _GEN[3], _GEN[4], io_uopc[5], io_uopc[6]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  assign io_sigs_ren2 = |{&{_GEN[1], _GEN[2], io_uopc[3], _GEN[5], io_uopc[6]}, &_decoder_decoded_T_28, &_decoder_decoded_T_44, &_decoder_decoded_T_50, &_decoder_decoded_T_62, &_decoder_decoded_T_64};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29, :98:74, :114:39]
  assign io_sigs_ren3 = |{&{io_uopc[0], io_uopc[2], io_uopc[3], io_uopc[4], _GEN[5], io_uopc[6]}, &{io_uopc[1], io_uopc[2], io_uopc[3], io_uopc[4], _GEN[5], io_uopc[6]}, &_decoder_decoded_T_62, &_decoder_decoded_T_64};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29, :98:74, :114:39]
  assign io_sigs_swap23 = |{&{io_uopc[0], io_uopc[1], io_uopc[2], _GEN[3], io_uopc[4], _GEN[5], io_uopc[6]}, &{_GEN[0], _GEN[2], io_uopc[3], io_uopc[4], _GEN[5], io_uopc[6]}, &_decoder_decoded_T_54};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29, :98:74, :114:39]
  assign io_sigs_typeTagIn = {1'h0, |{&_decoder_decoded_T_6, &{io_uopc[1], io_uopc[2], _GEN[3], _GEN[4], _GEN[5], io_uopc[6]}, &{io_uopc[0], _GEN[1], io_uopc[3], _GEN[4], _GEN[5], io_uopc[6]}, &{_GEN[0], io_uopc[1], _GEN[2], io_uopc[3], _GEN[5], io_uopc[6]}, &{io_uopc[0], _GEN[1], _GEN[3], io_uopc[4], _GEN[5], io_uopc[6]}, &{io_uopc[0], io_uopc[1], _GEN[2], io_uopc[4], _GEN[5], io_uopc[6]}, &_decoder_decoded_T_56, &_decoder_decoded_T_66, &_decoder_decoded_T_68, &{_GEN[0], _GEN[1], io_uopc[2], _GEN[3], _GEN[4], io_uopc[5], io_uopc[6]}}};	// @[Cat.scala:33:92, fpu.scala:115:40, pla.scala:78:21, :90:45, :91:29, :98:74, :114:39]
  assign io_sigs_typeTagOut = {1'h0, |{&{_GEN[0], _GEN[1], io_uopc[2], _GEN[3], _GEN[4], io_uopc[6]}, &{io_uopc[0], _GEN[1], io_uopc[2], _GEN[3], _GEN[5], io_uopc[6]}, &_decoder_decoded_T_6, &{io_uopc[0], io_uopc[3], _GEN[4], _GEN[5], io_uopc[6]}, &{io_uopc[0], _GEN[2], _GEN[3], io_uopc[4], _GEN[5], io_uopc[6]}, &_decoder_decoded_T_54, &_decoder_decoded_T_56, &_decoder_decoded_T_66, &_decoder_decoded_T_68}};	// @[Cat.scala:33:92, fpu.scala:115:40, pla.scala:78:21, :90:45, :91:29, :98:74, :114:39]
  assign io_sigs_fromint = &{_GEN[1], io_uopc[2], _GEN[4], _GEN[5], io_uopc[6]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29, :98:74]
  assign io_sigs_toint = |{&{io_uopc[1], io_uopc[2], _GEN[4], _GEN[5], io_uopc[6]}, &{_GEN[2], _GEN[3], io_uopc[4], _GEN[5], io_uopc[6]}};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29, :98:74, :114:39]
  assign io_sigs_fastpipe = |{&{_GEN[2], io_uopc[3], _GEN[4], _GEN[5], io_uopc[6]}, &{_GEN[1], io_uopc[2], _GEN[3], io_uopc[4], _GEN[5], io_uopc[6]}};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29, :98:74, :114:39]
  assign io_sigs_fma = |{&{io_uopc[0], io_uopc[1], io_uopc[2], io_uopc[4], _GEN[5], io_uopc[6]}, &_decoder_decoded_T_50, &_decoder_decoded_T_62, &_decoder_decoded_T_64};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29, :98:74, :114:39]
  assign io_sigs_wflags = |{&{io_uopc[1], io_uopc[3], _GEN[5], io_uopc[6]}, &{io_uopc[2], io_uopc[3], _GEN[5], io_uopc[6]}, &_decoder_decoded_T_28, &_decoder_decoded_T_44, &_decoder_decoded_T_62, &_decoder_decoded_T_64};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29, :98:74, :114:39]
endmodule

