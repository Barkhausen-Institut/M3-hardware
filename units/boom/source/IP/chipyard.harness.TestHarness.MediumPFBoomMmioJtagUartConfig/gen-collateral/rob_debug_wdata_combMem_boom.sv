// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// VCS coverage exclude_file
module rob_debug_wdata_combMem_boom(	// @[rob.scala:314:30]
  input  [4:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [4:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [63:0] W0_data,
  input  [4:0]  W1_addr,
  input         W1_en,
                W1_clk,
  input  [63:0] W1_data,
  input  [4:0]  W2_addr,
  input         W2_en,
                W2_clk,
  input  [63:0] W2_data,
  input  [4:0]  W3_addr,
  input         W3_en,
                W3_clk,
  input  [63:0] W3_data,
  input  [4:0]  W4_addr,
  input         W4_en,
                W4_clk,
  input  [63:0] W4_data,
  output [63:0] R0_data
);

  reg [63:0] Memory[0:31];	// @[rob.scala:314:30]
  always @(posedge W0_clk) begin	// @[rob.scala:314:30]
    if (W0_en)	// @[rob.scala:314:30]
      Memory[W0_addr] <= W0_data;	// @[rob.scala:314:30]
    if (W1_en)	// @[rob.scala:314:30]
      Memory[W1_addr] <= W1_data;	// @[rob.scala:314:30]
    if (W2_en)	// @[rob.scala:314:30]
      Memory[W2_addr] <= W2_data;	// @[rob.scala:314:30]
    if (W3_en)	// @[rob.scala:314:30]
      Memory[W3_addr] <= W3_data;	// @[rob.scala:314:30]
    if (W4_en)	// @[rob.scala:314:30]
      Memory[W4_addr] <= W4_data;	// @[rob.scala:314:30]
  end // always @(posedge)
  `ifndef SYNTHESIS	// @[rob.scala:314:30]
    `ifdef RANDOMIZE_MEM_INIT	// @[rob.scala:314:30]
      integer initvar;	// @[rob.scala:314:30]
      reg [63:0] _RANDOM_MEM;	// @[rob.scala:314:30]
    `endif // RANDOMIZE_MEM_INIT
    initial begin	// @[rob.scala:314:30]
      `INIT_RANDOM_PROLOG_	// @[rob.scala:314:30]
      `ifdef RANDOMIZE_MEM_INIT	// @[rob.scala:314:30]
        for (initvar = 0; initvar < 32; initvar = initvar + 1) begin
          _RANDOM_MEM = {{`RANDOM}, {`RANDOM}};
          Memory[initvar] = _RANDOM_MEM[63:0];
        end	// @[rob.scala:314:30]
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // not def SYNTHESIS
  assign R0_data = R0_en ? Memory[R0_addr] : 64'bx;	// @[rob.scala:314:30]
endmodule

