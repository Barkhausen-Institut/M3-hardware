// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module AXI4Xbar_1(
  input          clock,
                 reset,
                 auto_in_aw_valid,
  input  [3:0]   auto_in_aw_bits_id,
  input  [31:0]  auto_in_aw_bits_addr,
  input  [7:0]   auto_in_aw_bits_len,
  input  [2:0]   auto_in_aw_bits_size,
  input  [1:0]   auto_in_aw_bits_burst,
  input          auto_in_aw_bits_lock,
  input  [3:0]   auto_in_aw_bits_cache,
  input  [2:0]   auto_in_aw_bits_prot,
  input  [3:0]   auto_in_aw_bits_qos,
  input          auto_in_w_valid,
  input  [127:0] auto_in_w_bits_data,
  input  [15:0]  auto_in_w_bits_strb,
  input          auto_in_w_bits_last,
                 auto_in_b_ready,
                 auto_in_ar_valid,
  input  [3:0]   auto_in_ar_bits_id,
  input  [31:0]  auto_in_ar_bits_addr,
  input  [7:0]   auto_in_ar_bits_len,
  input  [2:0]   auto_in_ar_bits_size,
  input  [1:0]   auto_in_ar_bits_burst,
  input          auto_in_ar_bits_lock,
  input  [3:0]   auto_in_ar_bits_cache,
  input  [2:0]   auto_in_ar_bits_prot,
  input  [3:0]   auto_in_ar_bits_qos,
  input          auto_in_r_ready,
                 auto_out_2_aw_ready,
                 auto_out_2_w_ready,
                 auto_out_2_b_valid,
  input  [3:0]   auto_out_2_b_bits_id,
  input  [1:0]   auto_out_2_b_bits_resp,
  input          auto_out_2_ar_ready,
                 auto_out_2_r_valid,
  input  [3:0]   auto_out_2_r_bits_id,
  input  [127:0] auto_out_2_r_bits_data,
  input  [1:0]   auto_out_2_r_bits_resp,
  input          auto_out_2_r_bits_last,
                 auto_out_1_aw_ready,
                 auto_out_1_w_ready,
                 auto_out_1_b_valid,
  input  [3:0]   auto_out_1_b_bits_id,
  input  [1:0]   auto_out_1_b_bits_resp,
  input          auto_out_1_ar_ready,
                 auto_out_1_r_valid,
  input  [3:0]   auto_out_1_r_bits_id,
  input  [127:0] auto_out_1_r_bits_data,
  input  [1:0]   auto_out_1_r_bits_resp,
  input          auto_out_1_r_bits_last,
                 auto_out_0_aw_ready,
                 auto_out_0_w_ready,
                 auto_out_0_b_valid,
  input  [3:0]   auto_out_0_b_bits_id,
  input  [1:0]   auto_out_0_b_bits_resp,
  input          auto_out_0_ar_ready,
                 auto_out_0_r_valid,
  input  [3:0]   auto_out_0_r_bits_id,
  input  [127:0] auto_out_0_r_bits_data,
  input  [1:0]   auto_out_0_r_bits_resp,
  input          auto_out_0_r_bits_last,
  output         auto_in_aw_ready,
                 auto_in_w_ready,
                 auto_in_b_valid,
  output [3:0]   auto_in_b_bits_id,
  output [1:0]   auto_in_b_bits_resp,
  output         auto_in_ar_ready,
                 auto_in_r_valid,
  output [3:0]   auto_in_r_bits_id,
  output [127:0] auto_in_r_bits_data,
  output [1:0]   auto_in_r_bits_resp,
  output         auto_in_r_bits_last,
                 auto_out_2_aw_valid,
  output [3:0]   auto_out_2_aw_bits_id,
  output [31:0]  auto_out_2_aw_bits_addr,
  output [7:0]   auto_out_2_aw_bits_len,
  output [2:0]   auto_out_2_aw_bits_size,
  output [1:0]   auto_out_2_aw_bits_burst,
  output         auto_out_2_aw_bits_lock,
  output [3:0]   auto_out_2_aw_bits_cache,
  output [2:0]   auto_out_2_aw_bits_prot,
  output [3:0]   auto_out_2_aw_bits_qos,
  output         auto_out_2_w_valid,
  output [127:0] auto_out_2_w_bits_data,
  output [15:0]  auto_out_2_w_bits_strb,
  output         auto_out_2_w_bits_last,
                 auto_out_2_b_ready,
                 auto_out_2_ar_valid,
  output [3:0]   auto_out_2_ar_bits_id,
  output [31:0]  auto_out_2_ar_bits_addr,
  output [7:0]   auto_out_2_ar_bits_len,
  output [2:0]   auto_out_2_ar_bits_size,
  output [1:0]   auto_out_2_ar_bits_burst,
  output         auto_out_2_ar_bits_lock,
  output [3:0]   auto_out_2_ar_bits_cache,
  output [2:0]   auto_out_2_ar_bits_prot,
  output [3:0]   auto_out_2_ar_bits_qos,
  output         auto_out_2_r_ready,
                 auto_out_1_aw_valid,
  output [3:0]   auto_out_1_aw_bits_id,
  output [31:0]  auto_out_1_aw_bits_addr,
  output [7:0]   auto_out_1_aw_bits_len,
  output [2:0]   auto_out_1_aw_bits_size,
  output [1:0]   auto_out_1_aw_bits_burst,
  output         auto_out_1_aw_bits_lock,
  output [3:0]   auto_out_1_aw_bits_cache,
  output [2:0]   auto_out_1_aw_bits_prot,
  output [3:0]   auto_out_1_aw_bits_qos,
  output         auto_out_1_w_valid,
  output [127:0] auto_out_1_w_bits_data,
  output [15:0]  auto_out_1_w_bits_strb,
  output         auto_out_1_w_bits_last,
                 auto_out_1_b_ready,
                 auto_out_1_ar_valid,
  output [3:0]   auto_out_1_ar_bits_id,
  output [31:0]  auto_out_1_ar_bits_addr,
  output [7:0]   auto_out_1_ar_bits_len,
  output [2:0]   auto_out_1_ar_bits_size,
  output [1:0]   auto_out_1_ar_bits_burst,
  output         auto_out_1_ar_bits_lock,
  output [3:0]   auto_out_1_ar_bits_cache,
  output [2:0]   auto_out_1_ar_bits_prot,
  output [3:0]   auto_out_1_ar_bits_qos,
  output         auto_out_1_r_ready,
                 auto_out_0_aw_valid,
  output [3:0]   auto_out_0_aw_bits_id,
  output [30:0]  auto_out_0_aw_bits_addr,
  output [7:0]   auto_out_0_aw_bits_len,
  output [2:0]   auto_out_0_aw_bits_size,
  output [1:0]   auto_out_0_aw_bits_burst,
  output         auto_out_0_aw_bits_lock,
  output [3:0]   auto_out_0_aw_bits_cache,
  output [2:0]   auto_out_0_aw_bits_prot,
  output [3:0]   auto_out_0_aw_bits_qos,
  output         auto_out_0_w_valid,
  output [127:0] auto_out_0_w_bits_data,
  output [15:0]  auto_out_0_w_bits_strb,
  output         auto_out_0_w_bits_last,
                 auto_out_0_b_ready,
                 auto_out_0_ar_valid,
  output [3:0]   auto_out_0_ar_bits_id,
  output [30:0]  auto_out_0_ar_bits_addr,
  output [7:0]   auto_out_0_ar_bits_len,
  output [2:0]   auto_out_0_ar_bits_size,
  output [1:0]   auto_out_0_ar_bits_burst,
  output         auto_out_0_ar_bits_lock,
  output [3:0]   auto_out_0_ar_bits_cache,
  output [2:0]   auto_out_0_ar_bits_prot,
  output [3:0]   auto_out_0_ar_bits_qos,
  output         auto_out_0_r_ready
);

  wire [3:0] _WIRE_11;	// @[Mux.scala:27:73]
  wire       in_0_b_valid;	// @[Xbar.scala:298:22]
  wire [3:0] _WIRE_6;	// @[Mux.scala:27:73]
  wire       _WIRE_1;	// @[Mux.scala:27:73]
  wire       in_0_r_valid;	// @[Xbar.scala:298:22]
  wire       _portsWOI_in_0_w_ready_WIRE;	// @[Mux.scala:27:73]
  wire       _portsAWOI_in_0_aw_ready_WIRE;	// @[Mux.scala:27:73]
  wire       _portsAROI_in_0_ar_ready_WIRE;	// @[Mux.scala:27:73]
  wire       io_in_0_aw_ready;	// @[Xbar.scala:155:45]
  wire       _awIn_0_io_enq_ready;	// @[Xbar.scala:71:47]
  wire       _awIn_0_io_deq_valid;	// @[Xbar.scala:71:47]
  wire [2:0] _awIn_0_io_deq_bits;	// @[Xbar.scala:71:47]
  wire       requestARIO_0_1 = auto_in_ar_bits_addr[31:30] == 2'h2;	// @[Parameters.scala:137:{31,65}]
  wire       requestAWIO_0_1 = auto_in_aw_bits_addr[31:30] == 2'h2;	// @[Parameters.scala:137:{31,65}]
  wire       _arFIFOMap_15_T_1 = _portsAROI_in_0_ar_ready_WIRE & auto_in_ar_valid;	// @[Decoupled.scala:51:35, Mux.scala:27:73]
  wire       _arFIFOMap_0_T_2 = auto_in_ar_bits_id == 4'h0 & _arFIFOMap_15_T_1;	// @[Decoupled.scala:51:35, Mux.scala:27:73, Xbar.scala:135:{20,25}]
  wire       _arFIFOMap_15_T_4 = auto_in_r_ready & in_0_r_valid;	// @[Decoupled.scala:51:35, Xbar.scala:298:22]
  wire       _arFIFOMap_0_T_6 = _WIRE_6 == 4'h0 & _arFIFOMap_15_T_4 & _WIRE_1;	// @[Decoupled.scala:51:35, Mux.scala:27:73, Xbar.scala:136:{19,43}]
  reg        arFIFOMap_0_count;	// @[Xbar.scala:120:34]
  wire       _awFIFOMap_15_T_1 = io_in_0_aw_ready & auto_in_aw_valid;	// @[Decoupled.scala:51:35, Xbar.scala:155:45]
  wire       _awFIFOMap_0_T_2 = auto_in_aw_bits_id == 4'h0 & _awFIFOMap_15_T_1;	// @[Decoupled.scala:51:35, Mux.scala:27:73, Xbar.scala:139:{20,25}]
  wire       _awFIFOMap_15_T_4 = auto_in_b_ready & in_0_b_valid;	// @[Decoupled.scala:51:35, Xbar.scala:298:22]
  wire       _awFIFOMap_0_T_5 = _WIRE_11 == 4'h0 & _awFIFOMap_15_T_4;	// @[Decoupled.scala:51:35, Mux.scala:27:73, Xbar.scala:140:{19,24}]
  reg        awFIFOMap_0_count;	// @[Xbar.scala:120:34]
  wire       _arFIFOMap_1_T_2 = auto_in_ar_bits_id == 4'h1 & _arFIFOMap_15_T_1;	// @[Decoupled.scala:51:35, OneHot.scala:64:12, Xbar.scala:135:{20,25}]
  wire       _arFIFOMap_1_T_6 = _WIRE_6 == 4'h1 & _arFIFOMap_15_T_4 & _WIRE_1;	// @[Decoupled.scala:51:35, Mux.scala:27:73, OneHot.scala:64:12, Xbar.scala:136:{19,43}]
  reg        arFIFOMap_1_count;	// @[Xbar.scala:120:34]
  wire       _awFIFOMap_1_T_2 = auto_in_aw_bits_id == 4'h1 & _awFIFOMap_15_T_1;	// @[Decoupled.scala:51:35, OneHot.scala:64:12, Xbar.scala:139:{20,25}]
  wire       _awFIFOMap_1_T_5 = _WIRE_11 == 4'h1 & _awFIFOMap_15_T_4;	// @[Decoupled.scala:51:35, Mux.scala:27:73, OneHot.scala:64:12, Xbar.scala:140:{19,24}]
  reg        awFIFOMap_1_count;	// @[Xbar.scala:120:34]
  wire       _arFIFOMap_2_T_2 = auto_in_ar_bits_id == 4'h2 & _arFIFOMap_15_T_1;	// @[Decoupled.scala:51:35, OneHot.scala:64:12, Xbar.scala:135:{20,25}]
  wire       _arFIFOMap_2_T_6 = _WIRE_6 == 4'h2 & _arFIFOMap_15_T_4 & _WIRE_1;	// @[Decoupled.scala:51:35, Mux.scala:27:73, OneHot.scala:64:12, Xbar.scala:136:{19,43}]
  reg        arFIFOMap_2_count;	// @[Xbar.scala:120:34]
  wire       _awFIFOMap_2_T_2 = auto_in_aw_bits_id == 4'h2 & _awFIFOMap_15_T_1;	// @[Decoupled.scala:51:35, OneHot.scala:64:12, Xbar.scala:139:{20,25}]
  wire       _awFIFOMap_2_T_5 = _WIRE_11 == 4'h2 & _awFIFOMap_15_T_4;	// @[Decoupled.scala:51:35, Mux.scala:27:73, OneHot.scala:64:12, Xbar.scala:140:{19,24}]
  reg        awFIFOMap_2_count;	// @[Xbar.scala:120:34]
  wire       _arFIFOMap_3_T_2 = auto_in_ar_bits_id == 4'h3 & _arFIFOMap_15_T_1;	// @[Decoupled.scala:51:35, OneHot.scala:64:12, Xbar.scala:135:{20,25}]
  wire       _arFIFOMap_3_T_6 = _WIRE_6 == 4'h3 & _arFIFOMap_15_T_4 & _WIRE_1;	// @[Decoupled.scala:51:35, Mux.scala:27:73, OneHot.scala:64:12, Xbar.scala:136:{19,43}]
  reg        arFIFOMap_3_count;	// @[Xbar.scala:120:34]
  wire       _awFIFOMap_3_T_2 = auto_in_aw_bits_id == 4'h3 & _awFIFOMap_15_T_1;	// @[Decoupled.scala:51:35, OneHot.scala:64:12, Xbar.scala:139:{20,25}]
  wire       _awFIFOMap_3_T_5 = _WIRE_11 == 4'h3 & _awFIFOMap_15_T_4;	// @[Decoupled.scala:51:35, Mux.scala:27:73, OneHot.scala:64:12, Xbar.scala:140:{19,24}]
  reg        awFIFOMap_3_count;	// @[Xbar.scala:120:34]
  wire       _arFIFOMap_4_T_2 = auto_in_ar_bits_id == 4'h4 & _arFIFOMap_15_T_1;	// @[Decoupled.scala:51:35, OneHot.scala:64:12, Xbar.scala:135:{20,25}]
  wire       _arFIFOMap_4_T_6 = _WIRE_6 == 4'h4 & _arFIFOMap_15_T_4 & _WIRE_1;	// @[Decoupled.scala:51:35, Mux.scala:27:73, OneHot.scala:64:12, Xbar.scala:136:{19,43}]
  reg        arFIFOMap_4_count;	// @[Xbar.scala:120:34]
  wire       _awFIFOMap_4_T_2 = auto_in_aw_bits_id == 4'h4 & _awFIFOMap_15_T_1;	// @[Decoupled.scala:51:35, OneHot.scala:64:12, Xbar.scala:139:{20,25}]
  wire       _awFIFOMap_4_T_5 = _WIRE_11 == 4'h4 & _awFIFOMap_15_T_4;	// @[Decoupled.scala:51:35, Mux.scala:27:73, OneHot.scala:64:12, Xbar.scala:140:{19,24}]
  reg        awFIFOMap_4_count;	// @[Xbar.scala:120:34]
  wire       _arFIFOMap_5_T_2 = auto_in_ar_bits_id == 4'h5 & _arFIFOMap_15_T_1;	// @[Decoupled.scala:51:35, OneHot.scala:64:12, Xbar.scala:135:{20,25}]
  wire       _arFIFOMap_5_T_6 = _WIRE_6 == 4'h5 & _arFIFOMap_15_T_4 & _WIRE_1;	// @[Decoupled.scala:51:35, Mux.scala:27:73, OneHot.scala:64:12, Xbar.scala:136:{19,43}]
  reg        arFIFOMap_5_count;	// @[Xbar.scala:120:34]
  wire       _awFIFOMap_5_T_2 = auto_in_aw_bits_id == 4'h5 & _awFIFOMap_15_T_1;	// @[Decoupled.scala:51:35, OneHot.scala:64:12, Xbar.scala:139:{20,25}]
  wire       _awFIFOMap_5_T_5 = _WIRE_11 == 4'h5 & _awFIFOMap_15_T_4;	// @[Decoupled.scala:51:35, Mux.scala:27:73, OneHot.scala:64:12, Xbar.scala:140:{19,24}]
  reg        awFIFOMap_5_count;	// @[Xbar.scala:120:34]
  wire       _arFIFOMap_6_T_2 = auto_in_ar_bits_id == 4'h6 & _arFIFOMap_15_T_1;	// @[Decoupled.scala:51:35, OneHot.scala:64:12, Xbar.scala:135:{20,25}]
  wire       _arFIFOMap_6_T_6 = _WIRE_6 == 4'h6 & _arFIFOMap_15_T_4 & _WIRE_1;	// @[Decoupled.scala:51:35, Mux.scala:27:73, OneHot.scala:64:12, Xbar.scala:136:{19,43}]
  reg        arFIFOMap_6_count;	// @[Xbar.scala:120:34]
  wire       _awFIFOMap_6_T_2 = auto_in_aw_bits_id == 4'h6 & _awFIFOMap_15_T_1;	// @[Decoupled.scala:51:35, OneHot.scala:64:12, Xbar.scala:139:{20,25}]
  wire       _awFIFOMap_6_T_5 = _WIRE_11 == 4'h6 & _awFIFOMap_15_T_4;	// @[Decoupled.scala:51:35, Mux.scala:27:73, OneHot.scala:64:12, Xbar.scala:140:{19,24}]
  reg        awFIFOMap_6_count;	// @[Xbar.scala:120:34]
  wire       _arFIFOMap_7_T_2 = auto_in_ar_bits_id == 4'h7 & _arFIFOMap_15_T_1;	// @[Decoupled.scala:51:35, OneHot.scala:64:12, Xbar.scala:135:{20,25}]
  wire       _arFIFOMap_7_T_6 = _WIRE_6 == 4'h7 & _arFIFOMap_15_T_4 & _WIRE_1;	// @[Decoupled.scala:51:35, Mux.scala:27:73, OneHot.scala:64:12, Xbar.scala:136:{19,43}]
  reg        arFIFOMap_7_count;	// @[Xbar.scala:120:34]
  wire       _awFIFOMap_7_T_2 = auto_in_aw_bits_id == 4'h7 & _awFIFOMap_15_T_1;	// @[Decoupled.scala:51:35, OneHot.scala:64:12, Xbar.scala:139:{20,25}]
  wire       _awFIFOMap_7_T_5 = _WIRE_11 == 4'h7 & _awFIFOMap_15_T_4;	// @[Decoupled.scala:51:35, Mux.scala:27:73, OneHot.scala:64:12, Xbar.scala:140:{19,24}]
  reg        awFIFOMap_7_count;	// @[Xbar.scala:120:34]
  wire       _arFIFOMap_8_T_2 = auto_in_ar_bits_id == 4'h8 & _arFIFOMap_15_T_1;	// @[Decoupled.scala:51:35, OneHot.scala:64:12, Xbar.scala:135:{20,25}]
  wire       _arFIFOMap_8_T_6 = _WIRE_6 == 4'h8 & _arFIFOMap_15_T_4 & _WIRE_1;	// @[Decoupled.scala:51:35, Mux.scala:27:73, OneHot.scala:64:12, Xbar.scala:136:{19,43}]
  reg        arFIFOMap_8_count;	// @[Xbar.scala:120:34]
  wire       _awFIFOMap_8_T_2 = auto_in_aw_bits_id == 4'h8 & _awFIFOMap_15_T_1;	// @[Decoupled.scala:51:35, OneHot.scala:64:12, Xbar.scala:139:{20,25}]
  wire       _awFIFOMap_8_T_5 = _WIRE_11 == 4'h8 & _awFIFOMap_15_T_4;	// @[Decoupled.scala:51:35, Mux.scala:27:73, OneHot.scala:64:12, Xbar.scala:140:{19,24}]
  reg        awFIFOMap_8_count;	// @[Xbar.scala:120:34]
  wire       _arFIFOMap_9_T_2 = auto_in_ar_bits_id == 4'h9 & _arFIFOMap_15_T_1;	// @[Decoupled.scala:51:35, OneHot.scala:64:12, Xbar.scala:135:{20,25}]
  wire       _arFIFOMap_9_T_6 = _WIRE_6 == 4'h9 & _arFIFOMap_15_T_4 & _WIRE_1;	// @[Decoupled.scala:51:35, Mux.scala:27:73, OneHot.scala:64:12, Xbar.scala:136:{19,43}]
  reg        arFIFOMap_9_count;	// @[Xbar.scala:120:34]
  wire       _awFIFOMap_9_T_2 = auto_in_aw_bits_id == 4'h9 & _awFIFOMap_15_T_1;	// @[Decoupled.scala:51:35, OneHot.scala:64:12, Xbar.scala:139:{20,25}]
  wire       _awFIFOMap_9_T_5 = _WIRE_11 == 4'h9 & _awFIFOMap_15_T_4;	// @[Decoupled.scala:51:35, Mux.scala:27:73, OneHot.scala:64:12, Xbar.scala:140:{19,24}]
  reg        awFIFOMap_9_count;	// @[Xbar.scala:120:34]
  reg        latched;	// @[Xbar.scala:153:30]
  wire       _bundleIn_0_aw_ready_T = latched | _awIn_0_io_enq_ready;	// @[Xbar.scala:71:47, :153:30, :154:57]
  wire       in_0_aw_valid = auto_in_aw_valid & _bundleIn_0_aw_ready_T;	// @[Xbar.scala:154:{45,57}]
  assign io_in_0_aw_ready = _portsAWOI_in_0_aw_ready_WIRE & _bundleIn_0_aw_ready_T;	// @[Mux.scala:27:73, Xbar.scala:154:57, :155:45]
  wire       _awIn_0_io_enq_valid_T_1 = auto_in_aw_valid & ~latched;	// @[Xbar.scala:153:30, :156:{51,54}]
  wire       in_0_w_valid = auto_in_w_valid & _awIn_0_io_deq_valid;	// @[Xbar.scala:71:47, :161:43]
  assign _portsAROI_in_0_ar_ready_WIRE = ~(auto_in_ar_bits_addr[31]) & auto_out_0_ar_ready | requestARIO_0_1 & auto_out_1_ar_ready | (&(auto_in_ar_bits_addr[31:30])) & auto_out_2_ar_ready;	// @[Mux.scala:27:73, Parameters.scala:137:{45,65}]
  assign _portsAWOI_in_0_aw_ready_WIRE = ~(auto_in_aw_bits_addr[31]) & auto_out_0_aw_ready | requestAWIO_0_1 & auto_out_1_aw_ready | (&(auto_in_aw_bits_addr[31:30])) & auto_out_2_aw_ready;	// @[Mux.scala:27:73, Parameters.scala:137:{45,65}]
  assign _portsWOI_in_0_w_ready_WIRE = _awIn_0_io_deq_bits[0] & auto_out_0_w_ready | _awIn_0_io_deq_bits[1] & auto_out_1_w_ready | _awIn_0_io_deq_bits[2] & auto_out_2_w_ready;	// @[Mux.scala:27:73, Xbar.scala:71:47, :81:73]
  reg        idle_3;	// @[Xbar.scala:262:23]
  wire       anyValid = auto_out_0_r_valid | auto_out_1_r_valid | auto_out_2_r_valid;	// @[Xbar.scala:266:36]
  wire [2:0] readys_valid = {auto_out_2_r_valid, auto_out_1_r_valid, auto_out_0_r_valid};	// @[Cat.scala:33:92]
  reg  [2:0] readys_mask;	// @[Arbiter.scala:24:23]
  wire [2:0] _readys_filter_T_1 = readys_valid & ~readys_mask;	// @[Arbiter.scala:24:23, :25:{28,30}, Cat.scala:33:92]
  wire [1:0] _GEN = _readys_filter_T_1[1:0] | _readys_filter_T_1[2:1];	// @[Arbiter.scala:25:28, package.scala:254:43]
  wire [2:0] readys_readys = ~({readys_mask[2], _readys_filter_T_1[2] | readys_mask[1], _GEN[1] | readys_mask[0]} & {_GEN[0] | _readys_filter_T_1[2], auto_out_2_r_valid | _readys_filter_T_1[0] | _GEN[1], auto_out_1_r_valid | auto_out_2_r_valid | _GEN[0]});	// @[Arbiter.scala:24:23, :25:28, :26:58, :27:{18,29,39,48}, package.scala:254:43]
  wire       winner_3_0 = readys_readys[0] & auto_out_0_r_valid;	// @[Arbiter.scala:27:18, Xbar.scala:268:73, :270:67]
  wire       winner_3_1 = readys_readys[1] & auto_out_1_r_valid;	// @[Arbiter.scala:27:18, Xbar.scala:268:73, :270:67]
  wire       winner_3_2 = readys_readys[2] & auto_out_2_r_valid;	// @[Arbiter.scala:27:18, Xbar.scala:268:73, :270:67]
  reg        state_3_0;	// @[Xbar.scala:281:24]
  reg        state_3_1;	// @[Xbar.scala:281:24]
  reg        state_3_2;	// @[Xbar.scala:281:24]
  wire       muxState_3_0 = idle_3 ? winner_3_0 : state_3_0;	// @[Xbar.scala:262:23, :270:67, :281:24, :282:23]
  wire       muxState_3_1 = idle_3 ? winner_3_1 : state_3_1;	// @[Xbar.scala:262:23, :270:67, :281:24, :282:23]
  wire       muxState_3_2 = idle_3 ? winner_3_2 : state_3_2;	// @[Xbar.scala:262:23, :270:67, :281:24, :282:23]
  assign in_0_r_valid = idle_3 ? anyValid : state_3_0 & auto_out_0_r_valid | state_3_1 & auto_out_1_r_valid | state_3_2 & auto_out_2_r_valid;	// @[Mux.scala:27:73, Xbar.scala:262:23, :266:36, :281:24, :298:22]
  assign _WIRE_1 = muxState_3_0 & auto_out_0_r_bits_last | muxState_3_1 & auto_out_1_r_bits_last | muxState_3_2 & auto_out_2_r_bits_last;	// @[Mux.scala:27:73, Xbar.scala:282:23]
  assign _WIRE_6 = (muxState_3_0 ? auto_out_0_r_bits_id : 4'h0) | (muxState_3_1 ? auto_out_1_r_bits_id : 4'h0) | (muxState_3_2 ? auto_out_2_r_bits_id : 4'h0);	// @[Mux.scala:27:73, Xbar.scala:282:23]
  reg        idle_4;	// @[Xbar.scala:262:23]
  wire       anyValid_1 = auto_out_0_b_valid | auto_out_1_b_valid | auto_out_2_b_valid;	// @[Xbar.scala:266:36]
  wire [2:0] readys_valid_1 = {auto_out_2_b_valid, auto_out_1_b_valid, auto_out_0_b_valid};	// @[Cat.scala:33:92]
  reg  [2:0] readys_mask_1;	// @[Arbiter.scala:24:23]
  wire [2:0] _readys_filter_T_3 = readys_valid_1 & ~readys_mask_1;	// @[Arbiter.scala:24:23, :25:{28,30}, Cat.scala:33:92]
  wire [1:0] _GEN_0 = _readys_filter_T_3[1:0] | _readys_filter_T_3[2:1];	// @[Arbiter.scala:25:28, package.scala:254:43]
  wire [2:0] readys_readys_1 = ~({readys_mask_1[2], _readys_filter_T_3[2] | readys_mask_1[1], _GEN_0[1] | readys_mask_1[0]} & {_GEN_0[0] | _readys_filter_T_3[2], auto_out_2_b_valid | _readys_filter_T_3[0] | _GEN_0[1], auto_out_1_b_valid | auto_out_2_b_valid | _GEN_0[0]});	// @[Arbiter.scala:24:23, :25:28, :26:58, :27:{18,29,39,48}, package.scala:254:43]
  wire       winner_4_0 = readys_readys_1[0] & auto_out_0_b_valid;	// @[Arbiter.scala:27:18, Xbar.scala:268:73, :270:67]
  wire       winner_4_1 = readys_readys_1[1] & auto_out_1_b_valid;	// @[Arbiter.scala:27:18, Xbar.scala:268:73, :270:67]
  wire       winner_4_2 = readys_readys_1[2] & auto_out_2_b_valid;	// @[Arbiter.scala:27:18, Xbar.scala:268:73, :270:67]
  reg        state_4_0;	// @[Xbar.scala:281:24]
  reg        state_4_1;	// @[Xbar.scala:281:24]
  reg        state_4_2;	// @[Xbar.scala:281:24]
  wire       muxState_4_0 = idle_4 ? winner_4_0 : state_4_0;	// @[Xbar.scala:262:23, :270:67, :281:24, :282:23]
  wire       muxState_4_1 = idle_4 ? winner_4_1 : state_4_1;	// @[Xbar.scala:262:23, :270:67, :281:24, :282:23]
  wire       muxState_4_2 = idle_4 ? winner_4_2 : state_4_2;	// @[Xbar.scala:262:23, :270:67, :281:24, :282:23]
  assign in_0_b_valid = idle_4 ? anyValid_1 : state_4_0 & auto_out_0_b_valid | state_4_1 & auto_out_1_b_valid | state_4_2 & auto_out_2_b_valid;	// @[Mux.scala:27:73, Xbar.scala:262:23, :266:36, :281:24, :298:22]
  assign _WIRE_11 = (muxState_4_0 ? auto_out_0_b_bits_id : 4'h0) | (muxState_4_1 ? auto_out_1_b_bits_id : 4'h0) | (muxState_4_2 ? auto_out_2_b_bits_id : 4'h0);	// @[Mux.scala:27:73, Xbar.scala:282:23]
  wire [2:0] _readys_mask_T = readys_readys & readys_valid;	// @[Arbiter.scala:27:18, :29:29, Cat.scala:33:92]
  wire [2:0] _readys_mask_T_3 = _readys_mask_T | {_readys_mask_T[1:0], 1'h0};	// @[Arbiter.scala:29:29, Parameters.scala:137:31, package.scala:245:{43,53}]
  wire [2:0] _readys_mask_T_8 = readys_readys_1 & readys_valid_1;	// @[Arbiter.scala:27:18, :29:29, Cat.scala:33:92]
  wire [2:0] _readys_mask_T_11 = _readys_mask_T_8 | {_readys_mask_T_8[1:0], 1'h0};	// @[Arbiter.scala:29:29, Parameters.scala:137:31, package.scala:245:{43,53}]
  always @(posedge clock) begin
    if (reset) begin
      arFIFOMap_0_count <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:120:34]
      awFIFOMap_0_count <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:120:34]
      arFIFOMap_1_count <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:120:34]
      awFIFOMap_1_count <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:120:34]
      arFIFOMap_2_count <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:120:34]
      awFIFOMap_2_count <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:120:34]
      arFIFOMap_3_count <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:120:34]
      awFIFOMap_3_count <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:120:34]
      arFIFOMap_4_count <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:120:34]
      awFIFOMap_4_count <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:120:34]
      arFIFOMap_5_count <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:120:34]
      awFIFOMap_5_count <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:120:34]
      arFIFOMap_6_count <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:120:34]
      awFIFOMap_6_count <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:120:34]
      arFIFOMap_7_count <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:120:34]
      awFIFOMap_7_count <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:120:34]
      arFIFOMap_8_count <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:120:34]
      awFIFOMap_8_count <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:120:34]
      arFIFOMap_9_count <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:120:34]
      awFIFOMap_9_count <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:120:34]
      latched <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:153:30]
      idle_3 <= 1'h1;	// @[Xbar.scala:103:57, :262:23]
      readys_mask <= 3'h7;	// @[Arbiter.scala:24:23]
      state_3_0 <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:281:24]
      state_3_1 <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:281:24]
      state_3_2 <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:281:24]
      idle_4 <= 1'h1;	// @[Xbar.scala:103:57, :262:23]
      readys_mask_1 <= 3'h7;	// @[Arbiter.scala:24:23]
      state_4_0 <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:281:24]
      state_4_1 <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:281:24]
      state_4_2 <= 1'h0;	// @[Parameters.scala:137:31, Xbar.scala:281:24]
    end
    else begin
      arFIFOMap_0_count <= arFIFOMap_0_count + _arFIFOMap_0_T_2 - _arFIFOMap_0_T_6;	// @[Xbar.scala:120:34, :122:{30,48}, :135:25, :136:43]
      awFIFOMap_0_count <= awFIFOMap_0_count + _awFIFOMap_0_T_2 - _awFIFOMap_0_T_5;	// @[Xbar.scala:120:34, :122:{30,48}, :139:25, :140:24]
      arFIFOMap_1_count <= arFIFOMap_1_count + _arFIFOMap_1_T_2 - _arFIFOMap_1_T_6;	// @[Xbar.scala:120:34, :122:{30,48}, :135:25, :136:43]
      awFIFOMap_1_count <= awFIFOMap_1_count + _awFIFOMap_1_T_2 - _awFIFOMap_1_T_5;	// @[Xbar.scala:120:34, :122:{30,48}, :139:25, :140:24]
      arFIFOMap_2_count <= arFIFOMap_2_count + _arFIFOMap_2_T_2 - _arFIFOMap_2_T_6;	// @[Xbar.scala:120:34, :122:{30,48}, :135:25, :136:43]
      awFIFOMap_2_count <= awFIFOMap_2_count + _awFIFOMap_2_T_2 - _awFIFOMap_2_T_5;	// @[Xbar.scala:120:34, :122:{30,48}, :139:25, :140:24]
      arFIFOMap_3_count <= arFIFOMap_3_count + _arFIFOMap_3_T_2 - _arFIFOMap_3_T_6;	// @[Xbar.scala:120:34, :122:{30,48}, :135:25, :136:43]
      awFIFOMap_3_count <= awFIFOMap_3_count + _awFIFOMap_3_T_2 - _awFIFOMap_3_T_5;	// @[Xbar.scala:120:34, :122:{30,48}, :139:25, :140:24]
      arFIFOMap_4_count <= arFIFOMap_4_count + _arFIFOMap_4_T_2 - _arFIFOMap_4_T_6;	// @[Xbar.scala:120:34, :122:{30,48}, :135:25, :136:43]
      awFIFOMap_4_count <= awFIFOMap_4_count + _awFIFOMap_4_T_2 - _awFIFOMap_4_T_5;	// @[Xbar.scala:120:34, :122:{30,48}, :139:25, :140:24]
      arFIFOMap_5_count <= arFIFOMap_5_count + _arFIFOMap_5_T_2 - _arFIFOMap_5_T_6;	// @[Xbar.scala:120:34, :122:{30,48}, :135:25, :136:43]
      awFIFOMap_5_count <= awFIFOMap_5_count + _awFIFOMap_5_T_2 - _awFIFOMap_5_T_5;	// @[Xbar.scala:120:34, :122:{30,48}, :139:25, :140:24]
      arFIFOMap_6_count <= arFIFOMap_6_count + _arFIFOMap_6_T_2 - _arFIFOMap_6_T_6;	// @[Xbar.scala:120:34, :122:{30,48}, :135:25, :136:43]
      awFIFOMap_6_count <= awFIFOMap_6_count + _awFIFOMap_6_T_2 - _awFIFOMap_6_T_5;	// @[Xbar.scala:120:34, :122:{30,48}, :139:25, :140:24]
      arFIFOMap_7_count <= arFIFOMap_7_count + _arFIFOMap_7_T_2 - _arFIFOMap_7_T_6;	// @[Xbar.scala:120:34, :122:{30,48}, :135:25, :136:43]
      awFIFOMap_7_count <= awFIFOMap_7_count + _awFIFOMap_7_T_2 - _awFIFOMap_7_T_5;	// @[Xbar.scala:120:34, :122:{30,48}, :139:25, :140:24]
      arFIFOMap_8_count <= arFIFOMap_8_count + _arFIFOMap_8_T_2 - _arFIFOMap_8_T_6;	// @[Xbar.scala:120:34, :122:{30,48}, :135:25, :136:43]
      awFIFOMap_8_count <= awFIFOMap_8_count + _awFIFOMap_8_T_2 - _awFIFOMap_8_T_5;	// @[Xbar.scala:120:34, :122:{30,48}, :139:25, :140:24]
      arFIFOMap_9_count <= arFIFOMap_9_count + _arFIFOMap_9_T_2 - _arFIFOMap_9_T_6;	// @[Xbar.scala:120:34, :122:{30,48}, :135:25, :136:43]
      awFIFOMap_9_count <= awFIFOMap_9_count + _awFIFOMap_9_T_2 - _awFIFOMap_9_T_5;	// @[Xbar.scala:120:34, :122:{30,48}, :139:25, :140:24]
      latched <= ~(_portsAWOI_in_0_aw_ready_WIRE & in_0_aw_valid) & (_awIn_0_io_enq_ready & _awIn_0_io_enq_valid_T_1 | latched);	// @[Decoupled.scala:51:35, Mux.scala:27:73, Xbar.scala:71:47, :153:30, :154:45, :156:51, :157:{36,46}, :158:{30,40}]
      idle_3 <= auto_in_r_ready & in_0_r_valid | ~anyValid & idle_3;	// @[Decoupled.scala:51:35, Xbar.scala:262:23, :266:36, :286:{21,28}, :287:{22,29}, :298:22]
      if (idle_3 & (|readys_valid))	// @[Arbiter.scala:28:{18,27}, Cat.scala:33:92, Xbar.scala:262:23]
        readys_mask <= _readys_mask_T_3 | {_readys_mask_T_3[0], 2'h0};	// @[Arbiter.scala:24:23, Mux.scala:27:73, package.scala:245:{43,53}]
      if (idle_3) begin	// @[Xbar.scala:262:23]
        state_3_0 <= winner_3_0;	// @[Xbar.scala:270:67, :281:24]
        state_3_1 <= winner_3_1;	// @[Xbar.scala:270:67, :281:24]
        state_3_2 <= winner_3_2;	// @[Xbar.scala:270:67, :281:24]
      end
      idle_4 <= auto_in_b_ready & in_0_b_valid | ~anyValid_1 & idle_4;	// @[Decoupled.scala:51:35, Xbar.scala:262:23, :266:36, :286:{21,28}, :287:{22,29}, :298:22]
      if (idle_4 & (|readys_valid_1))	// @[Arbiter.scala:28:{18,27}, Cat.scala:33:92, Xbar.scala:262:23]
        readys_mask_1 <= _readys_mask_T_11 | {_readys_mask_T_11[0], 2'h0};	// @[Arbiter.scala:24:23, Mux.scala:27:73, package.scala:245:{43,53}]
      if (idle_4) begin	// @[Xbar.scala:262:23]
        state_4_0 <= winner_4_0;	// @[Xbar.scala:270:67, :281:24]
        state_4_1 <= winner_4_1;	// @[Xbar.scala:270:67, :281:24]
        state_4_2 <= winner_4_2;	// @[Xbar.scala:270:67, :281:24]
      end
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    always @(posedge clock) begin	// @[Xbar.scala:123:22]
      if (~reset & ~(~_arFIFOMap_0_T_6 | arFIFOMap_0_count)) begin	// @[Xbar.scala:120:34, :123:{22,23,34}, :136:43]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:123:22]
          $error("Assertion failed\n    at Xbar.scala:123 assert (!resp_fire || count =/= 0.U)\n");	// @[Xbar.scala:123:22]
        if (`STOP_COND_)	// @[Xbar.scala:123:22]
          $fatal;	// @[Xbar.scala:123:22]
      end
      if (~reset & ~(~_arFIFOMap_0_T_2 | ~arFIFOMap_0_count)) begin	// @[Xbar.scala:120:34, :124:{22,23,34,43}, :135:25]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:124:22]
          $error("Assertion failed\n    at Xbar.scala:124 assert (!req_fire  || count =/= flight.U)\n");	// @[Xbar.scala:124:22]
        if (`STOP_COND_)	// @[Xbar.scala:124:22]
          $fatal;	// @[Xbar.scala:124:22]
      end
      if (~reset & ~(~_awFIFOMap_0_T_5 | awFIFOMap_0_count)) begin	// @[Xbar.scala:120:34, :123:{22,23,34}, :140:24]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:123:22]
          $error("Assertion failed\n    at Xbar.scala:123 assert (!resp_fire || count =/= 0.U)\n");	// @[Xbar.scala:123:22]
        if (`STOP_COND_)	// @[Xbar.scala:123:22]
          $fatal;	// @[Xbar.scala:123:22]
      end
      if (~reset & ~(~_awFIFOMap_0_T_2 | ~awFIFOMap_0_count)) begin	// @[Xbar.scala:120:34, :124:{22,23,34,43}, :139:25]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:124:22]
          $error("Assertion failed\n    at Xbar.scala:124 assert (!req_fire  || count =/= flight.U)\n");	// @[Xbar.scala:124:22]
        if (`STOP_COND_)	// @[Xbar.scala:124:22]
          $fatal;	// @[Xbar.scala:124:22]
      end
      if (~reset & ~(~_arFIFOMap_1_T_6 | arFIFOMap_1_count)) begin	// @[Xbar.scala:120:34, :123:{22,23,34}, :136:43]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:123:22]
          $error("Assertion failed\n    at Xbar.scala:123 assert (!resp_fire || count =/= 0.U)\n");	// @[Xbar.scala:123:22]
        if (`STOP_COND_)	// @[Xbar.scala:123:22]
          $fatal;	// @[Xbar.scala:123:22]
      end
      if (~reset & ~(~_arFIFOMap_1_T_2 | ~arFIFOMap_1_count)) begin	// @[Xbar.scala:120:34, :124:{22,23,34,43}, :135:25]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:124:22]
          $error("Assertion failed\n    at Xbar.scala:124 assert (!req_fire  || count =/= flight.U)\n");	// @[Xbar.scala:124:22]
        if (`STOP_COND_)	// @[Xbar.scala:124:22]
          $fatal;	// @[Xbar.scala:124:22]
      end
      if (~reset & ~(~_awFIFOMap_1_T_5 | awFIFOMap_1_count)) begin	// @[Xbar.scala:120:34, :123:{22,23,34}, :140:24]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:123:22]
          $error("Assertion failed\n    at Xbar.scala:123 assert (!resp_fire || count =/= 0.U)\n");	// @[Xbar.scala:123:22]
        if (`STOP_COND_)	// @[Xbar.scala:123:22]
          $fatal;	// @[Xbar.scala:123:22]
      end
      if (~reset & ~(~_awFIFOMap_1_T_2 | ~awFIFOMap_1_count)) begin	// @[Xbar.scala:120:34, :124:{22,23,34,43}, :139:25]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:124:22]
          $error("Assertion failed\n    at Xbar.scala:124 assert (!req_fire  || count =/= flight.U)\n");	// @[Xbar.scala:124:22]
        if (`STOP_COND_)	// @[Xbar.scala:124:22]
          $fatal;	// @[Xbar.scala:124:22]
      end
      if (~reset & ~(~_arFIFOMap_2_T_6 | arFIFOMap_2_count)) begin	// @[Xbar.scala:120:34, :123:{22,23,34}, :136:43]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:123:22]
          $error("Assertion failed\n    at Xbar.scala:123 assert (!resp_fire || count =/= 0.U)\n");	// @[Xbar.scala:123:22]
        if (`STOP_COND_)	// @[Xbar.scala:123:22]
          $fatal;	// @[Xbar.scala:123:22]
      end
      if (~reset & ~(~_arFIFOMap_2_T_2 | ~arFIFOMap_2_count)) begin	// @[Xbar.scala:120:34, :124:{22,23,34,43}, :135:25]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:124:22]
          $error("Assertion failed\n    at Xbar.scala:124 assert (!req_fire  || count =/= flight.U)\n");	// @[Xbar.scala:124:22]
        if (`STOP_COND_)	// @[Xbar.scala:124:22]
          $fatal;	// @[Xbar.scala:124:22]
      end
      if (~reset & ~(~_awFIFOMap_2_T_5 | awFIFOMap_2_count)) begin	// @[Xbar.scala:120:34, :123:{22,23,34}, :140:24]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:123:22]
          $error("Assertion failed\n    at Xbar.scala:123 assert (!resp_fire || count =/= 0.U)\n");	// @[Xbar.scala:123:22]
        if (`STOP_COND_)	// @[Xbar.scala:123:22]
          $fatal;	// @[Xbar.scala:123:22]
      end
      if (~reset & ~(~_awFIFOMap_2_T_2 | ~awFIFOMap_2_count)) begin	// @[Xbar.scala:120:34, :124:{22,23,34,43}, :139:25]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:124:22]
          $error("Assertion failed\n    at Xbar.scala:124 assert (!req_fire  || count =/= flight.U)\n");	// @[Xbar.scala:124:22]
        if (`STOP_COND_)	// @[Xbar.scala:124:22]
          $fatal;	// @[Xbar.scala:124:22]
      end
      if (~reset & ~(~_arFIFOMap_3_T_6 | arFIFOMap_3_count)) begin	// @[Xbar.scala:120:34, :123:{22,23,34}, :136:43]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:123:22]
          $error("Assertion failed\n    at Xbar.scala:123 assert (!resp_fire || count =/= 0.U)\n");	// @[Xbar.scala:123:22]
        if (`STOP_COND_)	// @[Xbar.scala:123:22]
          $fatal;	// @[Xbar.scala:123:22]
      end
      if (~reset & ~(~_arFIFOMap_3_T_2 | ~arFIFOMap_3_count)) begin	// @[Xbar.scala:120:34, :124:{22,23,34,43}, :135:25]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:124:22]
          $error("Assertion failed\n    at Xbar.scala:124 assert (!req_fire  || count =/= flight.U)\n");	// @[Xbar.scala:124:22]
        if (`STOP_COND_)	// @[Xbar.scala:124:22]
          $fatal;	// @[Xbar.scala:124:22]
      end
      if (~reset & ~(~_awFIFOMap_3_T_5 | awFIFOMap_3_count)) begin	// @[Xbar.scala:120:34, :123:{22,23,34}, :140:24]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:123:22]
          $error("Assertion failed\n    at Xbar.scala:123 assert (!resp_fire || count =/= 0.U)\n");	// @[Xbar.scala:123:22]
        if (`STOP_COND_)	// @[Xbar.scala:123:22]
          $fatal;	// @[Xbar.scala:123:22]
      end
      if (~reset & ~(~_awFIFOMap_3_T_2 | ~awFIFOMap_3_count)) begin	// @[Xbar.scala:120:34, :124:{22,23,34,43}, :139:25]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:124:22]
          $error("Assertion failed\n    at Xbar.scala:124 assert (!req_fire  || count =/= flight.U)\n");	// @[Xbar.scala:124:22]
        if (`STOP_COND_)	// @[Xbar.scala:124:22]
          $fatal;	// @[Xbar.scala:124:22]
      end
      if (~reset & ~(~_arFIFOMap_4_T_6 | arFIFOMap_4_count)) begin	// @[Xbar.scala:120:34, :123:{22,23,34}, :136:43]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:123:22]
          $error("Assertion failed\n    at Xbar.scala:123 assert (!resp_fire || count =/= 0.U)\n");	// @[Xbar.scala:123:22]
        if (`STOP_COND_)	// @[Xbar.scala:123:22]
          $fatal;	// @[Xbar.scala:123:22]
      end
      if (~reset & ~(~_arFIFOMap_4_T_2 | ~arFIFOMap_4_count)) begin	// @[Xbar.scala:120:34, :124:{22,23,34,43}, :135:25]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:124:22]
          $error("Assertion failed\n    at Xbar.scala:124 assert (!req_fire  || count =/= flight.U)\n");	// @[Xbar.scala:124:22]
        if (`STOP_COND_)	// @[Xbar.scala:124:22]
          $fatal;	// @[Xbar.scala:124:22]
      end
      if (~reset & ~(~_awFIFOMap_4_T_5 | awFIFOMap_4_count)) begin	// @[Xbar.scala:120:34, :123:{22,23,34}, :140:24]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:123:22]
          $error("Assertion failed\n    at Xbar.scala:123 assert (!resp_fire || count =/= 0.U)\n");	// @[Xbar.scala:123:22]
        if (`STOP_COND_)	// @[Xbar.scala:123:22]
          $fatal;	// @[Xbar.scala:123:22]
      end
      if (~reset & ~(~_awFIFOMap_4_T_2 | ~awFIFOMap_4_count)) begin	// @[Xbar.scala:120:34, :124:{22,23,34,43}, :139:25]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:124:22]
          $error("Assertion failed\n    at Xbar.scala:124 assert (!req_fire  || count =/= flight.U)\n");	// @[Xbar.scala:124:22]
        if (`STOP_COND_)	// @[Xbar.scala:124:22]
          $fatal;	// @[Xbar.scala:124:22]
      end
      if (~reset & ~(~_arFIFOMap_5_T_6 | arFIFOMap_5_count)) begin	// @[Xbar.scala:120:34, :123:{22,23,34}, :136:43]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:123:22]
          $error("Assertion failed\n    at Xbar.scala:123 assert (!resp_fire || count =/= 0.U)\n");	// @[Xbar.scala:123:22]
        if (`STOP_COND_)	// @[Xbar.scala:123:22]
          $fatal;	// @[Xbar.scala:123:22]
      end
      if (~reset & ~(~_arFIFOMap_5_T_2 | ~arFIFOMap_5_count)) begin	// @[Xbar.scala:120:34, :124:{22,23,34,43}, :135:25]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:124:22]
          $error("Assertion failed\n    at Xbar.scala:124 assert (!req_fire  || count =/= flight.U)\n");	// @[Xbar.scala:124:22]
        if (`STOP_COND_)	// @[Xbar.scala:124:22]
          $fatal;	// @[Xbar.scala:124:22]
      end
      if (~reset & ~(~_awFIFOMap_5_T_5 | awFIFOMap_5_count)) begin	// @[Xbar.scala:120:34, :123:{22,23,34}, :140:24]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:123:22]
          $error("Assertion failed\n    at Xbar.scala:123 assert (!resp_fire || count =/= 0.U)\n");	// @[Xbar.scala:123:22]
        if (`STOP_COND_)	// @[Xbar.scala:123:22]
          $fatal;	// @[Xbar.scala:123:22]
      end
      if (~reset & ~(~_awFIFOMap_5_T_2 | ~awFIFOMap_5_count)) begin	// @[Xbar.scala:120:34, :124:{22,23,34,43}, :139:25]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:124:22]
          $error("Assertion failed\n    at Xbar.scala:124 assert (!req_fire  || count =/= flight.U)\n");	// @[Xbar.scala:124:22]
        if (`STOP_COND_)	// @[Xbar.scala:124:22]
          $fatal;	// @[Xbar.scala:124:22]
      end
      if (~reset & ~(~_arFIFOMap_6_T_6 | arFIFOMap_6_count)) begin	// @[Xbar.scala:120:34, :123:{22,23,34}, :136:43]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:123:22]
          $error("Assertion failed\n    at Xbar.scala:123 assert (!resp_fire || count =/= 0.U)\n");	// @[Xbar.scala:123:22]
        if (`STOP_COND_)	// @[Xbar.scala:123:22]
          $fatal;	// @[Xbar.scala:123:22]
      end
      if (~reset & ~(~_arFIFOMap_6_T_2 | ~arFIFOMap_6_count)) begin	// @[Xbar.scala:120:34, :124:{22,23,34,43}, :135:25]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:124:22]
          $error("Assertion failed\n    at Xbar.scala:124 assert (!req_fire  || count =/= flight.U)\n");	// @[Xbar.scala:124:22]
        if (`STOP_COND_)	// @[Xbar.scala:124:22]
          $fatal;	// @[Xbar.scala:124:22]
      end
      if (~reset & ~(~_awFIFOMap_6_T_5 | awFIFOMap_6_count)) begin	// @[Xbar.scala:120:34, :123:{22,23,34}, :140:24]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:123:22]
          $error("Assertion failed\n    at Xbar.scala:123 assert (!resp_fire || count =/= 0.U)\n");	// @[Xbar.scala:123:22]
        if (`STOP_COND_)	// @[Xbar.scala:123:22]
          $fatal;	// @[Xbar.scala:123:22]
      end
      if (~reset & ~(~_awFIFOMap_6_T_2 | ~awFIFOMap_6_count)) begin	// @[Xbar.scala:120:34, :124:{22,23,34,43}, :139:25]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:124:22]
          $error("Assertion failed\n    at Xbar.scala:124 assert (!req_fire  || count =/= flight.U)\n");	// @[Xbar.scala:124:22]
        if (`STOP_COND_)	// @[Xbar.scala:124:22]
          $fatal;	// @[Xbar.scala:124:22]
      end
      if (~reset & ~(~_arFIFOMap_7_T_6 | arFIFOMap_7_count)) begin	// @[Xbar.scala:120:34, :123:{22,23,34}, :136:43]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:123:22]
          $error("Assertion failed\n    at Xbar.scala:123 assert (!resp_fire || count =/= 0.U)\n");	// @[Xbar.scala:123:22]
        if (`STOP_COND_)	// @[Xbar.scala:123:22]
          $fatal;	// @[Xbar.scala:123:22]
      end
      if (~reset & ~(~_arFIFOMap_7_T_2 | ~arFIFOMap_7_count)) begin	// @[Xbar.scala:120:34, :124:{22,23,34,43}, :135:25]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:124:22]
          $error("Assertion failed\n    at Xbar.scala:124 assert (!req_fire  || count =/= flight.U)\n");	// @[Xbar.scala:124:22]
        if (`STOP_COND_)	// @[Xbar.scala:124:22]
          $fatal;	// @[Xbar.scala:124:22]
      end
      if (~reset & ~(~_awFIFOMap_7_T_5 | awFIFOMap_7_count)) begin	// @[Xbar.scala:120:34, :123:{22,23,34}, :140:24]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:123:22]
          $error("Assertion failed\n    at Xbar.scala:123 assert (!resp_fire || count =/= 0.U)\n");	// @[Xbar.scala:123:22]
        if (`STOP_COND_)	// @[Xbar.scala:123:22]
          $fatal;	// @[Xbar.scala:123:22]
      end
      if (~reset & ~(~_awFIFOMap_7_T_2 | ~awFIFOMap_7_count)) begin	// @[Xbar.scala:120:34, :124:{22,23,34,43}, :139:25]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:124:22]
          $error("Assertion failed\n    at Xbar.scala:124 assert (!req_fire  || count =/= flight.U)\n");	// @[Xbar.scala:124:22]
        if (`STOP_COND_)	// @[Xbar.scala:124:22]
          $fatal;	// @[Xbar.scala:124:22]
      end
      if (~reset & ~(~_arFIFOMap_8_T_6 | arFIFOMap_8_count)) begin	// @[Xbar.scala:120:34, :123:{22,23,34}, :136:43]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:123:22]
          $error("Assertion failed\n    at Xbar.scala:123 assert (!resp_fire || count =/= 0.U)\n");	// @[Xbar.scala:123:22]
        if (`STOP_COND_)	// @[Xbar.scala:123:22]
          $fatal;	// @[Xbar.scala:123:22]
      end
      if (~reset & ~(~_arFIFOMap_8_T_2 | ~arFIFOMap_8_count)) begin	// @[Xbar.scala:120:34, :124:{22,23,34,43}, :135:25]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:124:22]
          $error("Assertion failed\n    at Xbar.scala:124 assert (!req_fire  || count =/= flight.U)\n");	// @[Xbar.scala:124:22]
        if (`STOP_COND_)	// @[Xbar.scala:124:22]
          $fatal;	// @[Xbar.scala:124:22]
      end
      if (~reset & ~(~_awFIFOMap_8_T_5 | awFIFOMap_8_count)) begin	// @[Xbar.scala:120:34, :123:{22,23,34}, :140:24]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:123:22]
          $error("Assertion failed\n    at Xbar.scala:123 assert (!resp_fire || count =/= 0.U)\n");	// @[Xbar.scala:123:22]
        if (`STOP_COND_)	// @[Xbar.scala:123:22]
          $fatal;	// @[Xbar.scala:123:22]
      end
      if (~reset & ~(~_awFIFOMap_8_T_2 | ~awFIFOMap_8_count)) begin	// @[Xbar.scala:120:34, :124:{22,23,34,43}, :139:25]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:124:22]
          $error("Assertion failed\n    at Xbar.scala:124 assert (!req_fire  || count =/= flight.U)\n");	// @[Xbar.scala:124:22]
        if (`STOP_COND_)	// @[Xbar.scala:124:22]
          $fatal;	// @[Xbar.scala:124:22]
      end
      if (~reset & ~(~_arFIFOMap_9_T_6 | arFIFOMap_9_count)) begin	// @[Xbar.scala:120:34, :123:{22,23,34}, :136:43]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:123:22]
          $error("Assertion failed\n    at Xbar.scala:123 assert (!resp_fire || count =/= 0.U)\n");	// @[Xbar.scala:123:22]
        if (`STOP_COND_)	// @[Xbar.scala:123:22]
          $fatal;	// @[Xbar.scala:123:22]
      end
      if (~reset & ~(~_arFIFOMap_9_T_2 | ~arFIFOMap_9_count)) begin	// @[Xbar.scala:120:34, :124:{22,23,34,43}, :135:25]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:124:22]
          $error("Assertion failed\n    at Xbar.scala:124 assert (!req_fire  || count =/= flight.U)\n");	// @[Xbar.scala:124:22]
        if (`STOP_COND_)	// @[Xbar.scala:124:22]
          $fatal;	// @[Xbar.scala:124:22]
      end
      if (~reset & ~(~_awFIFOMap_9_T_5 | awFIFOMap_9_count)) begin	// @[Xbar.scala:120:34, :123:{22,23,34}, :140:24]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:123:22]
          $error("Assertion failed\n    at Xbar.scala:123 assert (!resp_fire || count =/= 0.U)\n");	// @[Xbar.scala:123:22]
        if (`STOP_COND_)	// @[Xbar.scala:123:22]
          $fatal;	// @[Xbar.scala:123:22]
      end
      if (~reset & ~(~_awFIFOMap_9_T_2 | ~awFIFOMap_9_count)) begin	// @[Xbar.scala:120:34, :124:{22,23,34,43}, :139:25]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:124:22]
          $error("Assertion failed\n    at Xbar.scala:124 assert (!req_fire  || count =/= flight.U)\n");	// @[Xbar.scala:124:22]
        if (`STOP_COND_)	// @[Xbar.scala:124:22]
          $fatal;	// @[Xbar.scala:124:22]
      end
      if (~reset & ~((~winner_3_0 | ~winner_3_1) & (~(winner_3_0 | winner_3_1) | ~winner_3_2))) begin	// @[Xbar.scala:270:67, :275:46, :276:{11,54,57,60,75}]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:276:11]
          $error("Assertion failed\n    at Xbar.scala:276 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");	// @[Xbar.scala:276:11]
        if (`STOP_COND_)	// @[Xbar.scala:276:11]
          $fatal;	// @[Xbar.scala:276:11]
      end
      if (~reset & ~(~anyValid | winner_3_0 | winner_3_1 | winner_3_2)) begin	// @[Xbar.scala:266:36, :270:67, :278:{12,13,23}]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:278:12]
          $error("Assertion failed\n    at Xbar.scala:278 assert (!anyValid || winner.reduce(_||_))\n");	// @[Xbar.scala:278:12]
        if (`STOP_COND_)	// @[Xbar.scala:278:12]
          $fatal;	// @[Xbar.scala:278:12]
      end
      if (~reset & ~((~winner_4_0 | ~winner_4_1) & (~(winner_4_0 | winner_4_1) | ~winner_4_2))) begin	// @[Xbar.scala:270:67, :275:46, :276:{11,54,57,60,75}]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:276:11]
          $error("Assertion failed\n    at Xbar.scala:276 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");	// @[Xbar.scala:276:11]
        if (`STOP_COND_)	// @[Xbar.scala:276:11]
          $fatal;	// @[Xbar.scala:276:11]
      end
      if (~reset & ~(~anyValid_1 | winner_4_0 | winner_4_1 | winner_4_2)) begin	// @[Xbar.scala:266:36, :270:67, :278:{12,13,23}]
        if (`ASSERT_VERBOSE_COND_)	// @[Xbar.scala:278:12]
          $error("Assertion failed\n    at Xbar.scala:278 assert (!anyValid || winner.reduce(_||_))\n");	// @[Xbar.scala:278:12]
        if (`STOP_COND_)	// @[Xbar.scala:278:12]
          $fatal;	// @[Xbar.scala:278:12]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        arFIFOMap_0_count = _RANDOM_0[0];	// @[Xbar.scala:120:34]
        awFIFOMap_0_count = _RANDOM_0[3];	// @[Xbar.scala:120:34]
        arFIFOMap_1_count = _RANDOM_0[6];	// @[Xbar.scala:120:34]
        awFIFOMap_1_count = _RANDOM_0[9];	// @[Xbar.scala:120:34]
        arFIFOMap_2_count = _RANDOM_0[12];	// @[Xbar.scala:120:34]
        awFIFOMap_2_count = _RANDOM_0[15];	// @[Xbar.scala:120:34]
        arFIFOMap_3_count = _RANDOM_0[18];	// @[Xbar.scala:120:34]
        awFIFOMap_3_count = _RANDOM_0[21];	// @[Xbar.scala:120:34]
        arFIFOMap_4_count = _RANDOM_0[24];	// @[Xbar.scala:120:34]
        awFIFOMap_4_count = _RANDOM_0[27];	// @[Xbar.scala:120:34]
        arFIFOMap_5_count = _RANDOM_0[30];	// @[Xbar.scala:120:34]
        awFIFOMap_5_count = _RANDOM_1[1];	// @[Xbar.scala:120:34]
        arFIFOMap_6_count = _RANDOM_1[4];	// @[Xbar.scala:120:34]
        awFIFOMap_6_count = _RANDOM_1[7];	// @[Xbar.scala:120:34]
        arFIFOMap_7_count = _RANDOM_1[10];	// @[Xbar.scala:120:34]
        awFIFOMap_7_count = _RANDOM_1[13];	// @[Xbar.scala:120:34]
        arFIFOMap_8_count = _RANDOM_1[16];	// @[Xbar.scala:120:34]
        awFIFOMap_8_count = _RANDOM_1[19];	// @[Xbar.scala:120:34]
        arFIFOMap_9_count = _RANDOM_1[22];	// @[Xbar.scala:120:34]
        awFIFOMap_9_count = _RANDOM_1[25];	// @[Xbar.scala:120:34]
        latched = _RANDOM_1[28];	// @[Xbar.scala:120:34, :153:30]
        idle_3 = _RANDOM_2[9];	// @[Xbar.scala:262:23]
        readys_mask = _RANDOM_2[12:10];	// @[Arbiter.scala:24:23, Xbar.scala:262:23]
        state_3_0 = _RANDOM_2[13];	// @[Xbar.scala:262:23, :281:24]
        state_3_1 = _RANDOM_2[14];	// @[Xbar.scala:262:23, :281:24]
        state_3_2 = _RANDOM_2[15];	// @[Xbar.scala:262:23, :281:24]
        idle_4 = _RANDOM_2[16];	// @[Xbar.scala:262:23]
        readys_mask_1 = _RANDOM_2[19:17];	// @[Arbiter.scala:24:23, Xbar.scala:262:23]
        state_4_0 = _RANDOM_2[20];	// @[Xbar.scala:262:23, :281:24]
        state_4_1 = _RANDOM_2[21];	// @[Xbar.scala:262:23, :281:24]
        state_4_2 = _RANDOM_2[22];	// @[Xbar.scala:262:23, :281:24]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  Queue_142 awIn_0 (	// @[Xbar.scala:71:47]
    .clock        (clock),
    .reset        (reset),
    .io_enq_valid (_awIn_0_io_enq_valid_T_1),	// @[Xbar.scala:156:51]
    .io_enq_bits  ({&(auto_in_aw_bits_addr[31:30]), requestAWIO_0_1, ~(auto_in_aw_bits_addr[31])}),	// @[Parameters.scala:137:{45,65}, Xbar.scala:80:75]
    .io_deq_ready (auto_in_w_valid & auto_in_w_bits_last & _portsWOI_in_0_w_ready_WIRE),	// @[Mux.scala:27:73, Xbar.scala:163:74]
    .io_enq_ready (_awIn_0_io_enq_ready),
    .io_deq_valid (_awIn_0_io_deq_valid),
    .io_deq_bits  (_awIn_0_io_deq_bits)
  );
  assign auto_in_aw_ready = io_in_0_aw_ready;	// @[Xbar.scala:155:45]
  assign auto_in_w_ready = _portsWOI_in_0_w_ready_WIRE & _awIn_0_io_deq_valid;	// @[Mux.scala:27:73, Xbar.scala:71:47, :162:43]
  assign auto_in_b_valid = in_0_b_valid;	// @[Xbar.scala:298:22]
  assign auto_in_b_bits_id = _WIRE_11;	// @[Mux.scala:27:73]
  assign auto_in_b_bits_resp = (muxState_4_0 ? auto_out_0_b_bits_resp : 2'h0) | (muxState_4_1 ? auto_out_1_b_bits_resp : 2'h0) | (muxState_4_2 ? auto_out_2_b_bits_resp : 2'h0);	// @[Mux.scala:27:73, Xbar.scala:282:23]
  assign auto_in_ar_ready = _portsAROI_in_0_ar_ready_WIRE;	// @[Mux.scala:27:73]
  assign auto_in_r_valid = in_0_r_valid;	// @[Xbar.scala:298:22]
  assign auto_in_r_bits_id = _WIRE_6;	// @[Mux.scala:27:73]
  assign auto_in_r_bits_data = (muxState_3_0 ? auto_out_0_r_bits_data : 128'h0) | (muxState_3_1 ? auto_out_1_r_bits_data : 128'h0) | (muxState_3_2 ? auto_out_2_r_bits_data : 128'h0);	// @[Mux.scala:27:73, Xbar.scala:282:23]
  assign auto_in_r_bits_resp = (muxState_3_0 ? auto_out_0_r_bits_resp : 2'h0) | (muxState_3_1 ? auto_out_1_r_bits_resp : 2'h0) | (muxState_3_2 ? auto_out_2_r_bits_resp : 2'h0);	// @[Mux.scala:27:73, Xbar.scala:282:23]
  assign auto_in_r_bits_last = _WIRE_1;	// @[Mux.scala:27:73]
  assign auto_out_2_aw_valid = in_0_aw_valid & (&(auto_in_aw_bits_addr[31:30]));	// @[Parameters.scala:137:65, Xbar.scala:154:45, :242:40]
  assign auto_out_2_aw_bits_id = auto_in_aw_bits_id;
  assign auto_out_2_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_2_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_2_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_2_aw_bits_burst = auto_in_aw_bits_burst;
  assign auto_out_2_aw_bits_lock = auto_in_aw_bits_lock;
  assign auto_out_2_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_2_aw_bits_prot = auto_in_aw_bits_prot;
  assign auto_out_2_aw_bits_qos = auto_in_aw_bits_qos;
  assign auto_out_2_w_valid = in_0_w_valid & _awIn_0_io_deq_bits[2];	// @[Xbar.scala:71:47, :81:73, :161:43, :242:40]
  assign auto_out_2_w_bits_data = auto_in_w_bits_data;
  assign auto_out_2_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_2_w_bits_last = auto_in_w_bits_last;
  assign auto_out_2_b_ready = auto_in_b_ready & (idle_4 ? readys_readys_1[2] : state_4_2);	// @[Arbiter.scala:27:18, Xbar.scala:262:23, :268:73, :281:24, :290:24, :292:31]
  assign auto_out_2_ar_valid = auto_in_ar_valid & (&(auto_in_ar_bits_addr[31:30]));	// @[Parameters.scala:137:65, Xbar.scala:242:40]
  assign auto_out_2_ar_bits_id = auto_in_ar_bits_id;
  assign auto_out_2_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_2_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_2_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_2_ar_bits_burst = auto_in_ar_bits_burst;
  assign auto_out_2_ar_bits_lock = auto_in_ar_bits_lock;
  assign auto_out_2_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_2_ar_bits_prot = auto_in_ar_bits_prot;
  assign auto_out_2_ar_bits_qos = auto_in_ar_bits_qos;
  assign auto_out_2_r_ready = auto_in_r_ready & (idle_3 ? readys_readys[2] : state_3_2);	// @[Arbiter.scala:27:18, Xbar.scala:262:23, :268:73, :281:24, :290:24, :292:31]
  assign auto_out_1_aw_valid = in_0_aw_valid & requestAWIO_0_1;	// @[Parameters.scala:137:65, Xbar.scala:154:45, :242:40]
  assign auto_out_1_aw_bits_id = auto_in_aw_bits_id;
  assign auto_out_1_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_1_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_1_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_1_aw_bits_burst = auto_in_aw_bits_burst;
  assign auto_out_1_aw_bits_lock = auto_in_aw_bits_lock;
  assign auto_out_1_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_1_aw_bits_prot = auto_in_aw_bits_prot;
  assign auto_out_1_aw_bits_qos = auto_in_aw_bits_qos;
  assign auto_out_1_w_valid = in_0_w_valid & _awIn_0_io_deq_bits[1];	// @[Xbar.scala:71:47, :81:73, :161:43, :242:40]
  assign auto_out_1_w_bits_data = auto_in_w_bits_data;
  assign auto_out_1_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_1_w_bits_last = auto_in_w_bits_last;
  assign auto_out_1_b_ready = auto_in_b_ready & (idle_4 ? readys_readys_1[1] : state_4_1);	// @[Arbiter.scala:27:18, Xbar.scala:262:23, :268:73, :281:24, :290:24, :292:31]
  assign auto_out_1_ar_valid = auto_in_ar_valid & requestARIO_0_1;	// @[Parameters.scala:137:65, Xbar.scala:242:40]
  assign auto_out_1_ar_bits_id = auto_in_ar_bits_id;
  assign auto_out_1_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_1_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_1_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_1_ar_bits_burst = auto_in_ar_bits_burst;
  assign auto_out_1_ar_bits_lock = auto_in_ar_bits_lock;
  assign auto_out_1_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_1_ar_bits_prot = auto_in_ar_bits_prot;
  assign auto_out_1_ar_bits_qos = auto_in_ar_bits_qos;
  assign auto_out_1_r_ready = auto_in_r_ready & (idle_3 ? readys_readys[1] : state_3_1);	// @[Arbiter.scala:27:18, Xbar.scala:262:23, :268:73, :281:24, :290:24, :292:31]
  assign auto_out_0_aw_valid = in_0_aw_valid & ~(auto_in_aw_bits_addr[31]);	// @[Parameters.scala:137:{45,65}, Xbar.scala:154:45, :242:40]
  assign auto_out_0_aw_bits_id = auto_in_aw_bits_id;
  assign auto_out_0_aw_bits_addr = auto_in_aw_bits_addr[30:0];	// @[BundleMap.scala:247:19]
  assign auto_out_0_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_0_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_0_aw_bits_burst = auto_in_aw_bits_burst;
  assign auto_out_0_aw_bits_lock = auto_in_aw_bits_lock;
  assign auto_out_0_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_0_aw_bits_prot = auto_in_aw_bits_prot;
  assign auto_out_0_aw_bits_qos = auto_in_aw_bits_qos;
  assign auto_out_0_w_valid = in_0_w_valid & _awIn_0_io_deq_bits[0];	// @[Xbar.scala:71:47, :81:73, :161:43, :242:40]
  assign auto_out_0_w_bits_data = auto_in_w_bits_data;
  assign auto_out_0_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_0_w_bits_last = auto_in_w_bits_last;
  assign auto_out_0_b_ready = auto_in_b_ready & (idle_4 ? readys_readys_1[0] : state_4_0);	// @[Arbiter.scala:27:18, Xbar.scala:262:23, :268:73, :281:24, :290:24, :292:31]
  assign auto_out_0_ar_valid = auto_in_ar_valid & ~(auto_in_ar_bits_addr[31]);	// @[Parameters.scala:137:{45,65}, Xbar.scala:242:40]
  assign auto_out_0_ar_bits_id = auto_in_ar_bits_id;
  assign auto_out_0_ar_bits_addr = auto_in_ar_bits_addr[30:0];	// @[BundleMap.scala:247:19]
  assign auto_out_0_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_0_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_0_ar_bits_burst = auto_in_ar_bits_burst;
  assign auto_out_0_ar_bits_lock = auto_in_ar_bits_lock;
  assign auto_out_0_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_0_ar_bits_prot = auto_in_ar_bits_prot;
  assign auto_out_0_ar_bits_qos = auto_in_ar_bits_qos;
  assign auto_out_0_r_ready = auto_in_r_ready & (idle_3 ? readys_readys[0] : state_3_0);	// @[Arbiter.scala:27:18, Xbar.scala:262:23, :268:73, :281:24, :290:24, :292:31]
endmodule

