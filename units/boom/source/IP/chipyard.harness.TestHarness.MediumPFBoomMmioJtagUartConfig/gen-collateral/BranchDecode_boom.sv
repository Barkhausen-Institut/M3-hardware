// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module BranchDecode_boom(
  input  [31:0] io_inst,
  input  [39:0] io_pc,
  output        io_out_is_ret,
                io_out_is_call,
  output [39:0] io_out_target,
  output [2:0]  io_out_cfi_type,
  output        io_out_sfb_offset_valid,
  output [5:0]  io_out_sfb_offset_bits,
  output        io_out_shadowable
);

  wire [29:0] _GEN = ~(io_inst[31:2]);	// @[pla.scala:78:21]
  wire [14:0] _bpd_csignals_decoded_T_4 = {io_inst[0], io_inst[1], _GEN[0], io_inst[4], io_inst[5], _GEN[4], _GEN[10], _GEN[11], _GEN[12], _GEN[23], _GEN[24], _GEN[25], _GEN[26], _GEN[27], _GEN[29]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [13:0] _bpd_csignals_decoded_T_6 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], io_inst[5], _GEN[4], _GEN[23], _GEN[24], _GEN[25], _GEN[26], _GEN[27], _GEN[28], _GEN[29]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [9:0]  _bpd_csignals_decoded_T_14 = {io_inst[0], io_inst[1], io_inst[2], _GEN[1], _GEN[2], io_inst[5], io_inst[6], _GEN[10], _GEN[11], _GEN[12]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [6:0]  _bpd_csignals_decoded_T_16 = {io_inst[0], io_inst[1], io_inst[2], io_inst[3], _GEN[2], io_inst[5], io_inst[6]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [14:0] _bpd_csignals_decoded_T_30 = {io_inst[0], io_inst[1], _GEN[0], io_inst[4], io_inst[5], _GEN[4], io_inst[12], _GEN[11], io_inst[14], _GEN[23], _GEN[24], _GEN[25], _GEN[26], _GEN[27], _GEN[29]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [1:0]  _bpd_csignals_decoded_orMatrixOutputs_T_6 = {&{io_inst[0], io_inst[1], _GEN[0], _GEN[1], _GEN[2], io_inst[5], io_inst[6], _GEN[11]}, &{io_inst[0], io_inst[1], _GEN[0], _GEN[1], _GEN[2], io_inst[5], io_inst[6], io_inst[14]}};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29, :98:74]
  assign io_out_is_ret = (&_bpd_csignals_decoded_T_14) & {io_inst[19:18], io_inst[16:15]} == 4'h1 & io_inst[11:7] == 5'h0;	// @[Cat.scala:33:92, consts.scala:326:38, decode.scala:694:65, :695:{51,72,90}, pla.scala:98:74]
  assign io_out_is_call = ((&_bpd_csignals_decoded_T_16) | (&_bpd_csignals_decoded_T_14)) & io_inst[11:7] == 5'h1;	// @[Cat.scala:33:92, consts.scala:326:38, decode.scala:694:{32,47,65}, pla.scala:98:74]
  assign io_out_target = (|_bpd_csignals_decoded_orMatrixOutputs_T_6) ? io_pc + {{28{io_inst[31]}}, io_inst[7], io_inst[30:25], io_inst[11:8], 1'h0} & 40'hFFFFFFFFFE : io_pc + {{20{io_inst[31]}}, io_inst[19:12], io_inst[20], io_inst[30:21], 1'h0} & 40'hFFFFFFFFFE;	// @[Cat.scala:33:92, consts.scala:337:{35,46,55,68}, :338:{17,42}, :343:{46,59}, :344:{17,42}, decode.scala:695:90, :697:23, pla.scala:114:39]
  assign io_out_cfi_type = (&_bpd_csignals_decoded_T_14) ? 3'h3 : (&_bpd_csignals_decoded_T_16) ? 3'h2 : {2'h0, |_bpd_csignals_decoded_orMatrixOutputs_T_6};	// @[Cat.scala:33:92, decode.scala:700:8, :702:8, :704:8, pla.scala:98:74, :114:39]
  assign io_out_sfb_offset_valid = (|_bpd_csignals_decoded_orMatrixOutputs_T_6) & ~(io_inst[31]) & (|{io_inst[7], io_inst[30:25], io_inst[11:8]}) & {io_inst[7], io_inst[30:26]} == 6'h0;	// @[Cat.scala:33:92, consts.scala:337:{35,46,55,68}, decode.scala:710:{42,68,76,90,117}, pla.scala:114:39]
  assign io_out_sfb_offset_bits = {io_inst[25], io_inst[11:8], 1'h0};	// @[consts.scala:337:68, decode.scala:695:90, :711:27]
  assign io_out_shadowable = (|{&{io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], _GEN[3], _GEN[4], _GEN[10]}, &{io_inst[0], io_inst[1], _GEN[0], io_inst[4], _GEN[3], _GEN[4], _GEN[10], _GEN[11], _GEN[12]}, &_bpd_csignals_decoded_T_4, &_bpd_csignals_decoded_T_6, &{io_inst[0], io_inst[1], io_inst[2], _GEN[1], io_inst[4], io_inst[5], _GEN[4]}, &{io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], _GEN[3], _GEN[4], io_inst[12], _GEN[11], _GEN[24], _GEN[25], _GEN[26], _GEN[27], _GEN[28], _GEN[29]}, &{io_inst[0], io_inst[1], _GEN[0], io_inst[3], io_inst[4], _GEN[4], io_inst[12], _GEN[11], _GEN[23], _GEN[24], _GEN[25], _GEN[26], _GEN[27], _GEN[28], _GEN[29]}, &{io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], _GEN[3], _GEN[4], io_inst[13]}, &{io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], _GEN[3], _GEN[4], io_inst[12], _GEN[11], io_inst[14], _GEN[24], _GEN[25], _GEN[26], _GEN[27], _GEN[29]}, &{io_inst[0], io_inst[1], _GEN[0], io_inst[3], io_inst[4], _GEN[4], io_inst[12], _GEN[11], io_inst[14], _GEN[23], _GEN[24], _GEN[25], _GEN[26], _GEN[27], _GEN[29]}, &_bpd_csignals_decoded_T_30}) & ({&_bpd_csignals_decoded_T_4, &_bpd_csignals_decoded_T_6, &{io_inst[0], io_inst[1], _GEN[0], io_inst[4], io_inst[5], _GEN[4], _GEN[11], _GEN[12], _GEN[23], _GEN[24], _GEN[25], _GEN[26], _GEN[27], _GEN[28], _GEN[29]}, &_bpd_csignals_decoded_T_30} == 4'h0 | io_inst[19:15] == io_inst[11:7] | {io_inst[31:25], io_inst[14:12], io_inst[6:0]} == 17'h33 & io_inst[19:15] == 5'h0);	// @[Cat.scala:33:92, consts.scala:326:38, :327:38, decode.scala:695:90, :712:41, :714:{22,42}, :715:{14,22,41}, pla.scala:78:21, :90:45, :91:29, :98:74, :114:39]
endmodule

