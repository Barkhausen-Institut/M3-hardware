// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module AXI4Fragmenter_boom(
  input          clock,
                 reset,
                 auto_in_aw_valid,
                 auto_in_aw_bits_id,
  input  [31:0]  auto_in_aw_bits_addr,
  input  [7:0]   auto_in_aw_bits_len,
  input  [2:0]   auto_in_aw_bits_size,
  input  [1:0]   auto_in_aw_bits_burst,
  input          auto_in_aw_bits_lock,
  input  [3:0]   auto_in_aw_bits_cache,
  input  [2:0]   auto_in_aw_bits_prot,
  input  [3:0]   auto_in_aw_bits_qos,
  input  [2:0]   auto_in_aw_bits_echo_extra_id,
  input          auto_in_w_valid,
  input  [127:0] auto_in_w_bits_data,
  input  [15:0]  auto_in_w_bits_strb,
  input          auto_in_w_bits_last,
                 auto_in_b_ready,
                 auto_in_ar_valid,
                 auto_in_ar_bits_id,
  input  [31:0]  auto_in_ar_bits_addr,
  input  [7:0]   auto_in_ar_bits_len,
  input  [2:0]   auto_in_ar_bits_size,
  input  [1:0]   auto_in_ar_bits_burst,
  input          auto_in_ar_bits_lock,
  input  [3:0]   auto_in_ar_bits_cache,
  input  [2:0]   auto_in_ar_bits_prot,
  input  [3:0]   auto_in_ar_bits_qos,
  input  [2:0]   auto_in_ar_bits_echo_extra_id,
  input          auto_in_r_ready,
                 auto_out_aw_ready,
                 auto_out_w_ready,
                 auto_out_b_valid,
                 auto_out_b_bits_id,
  input  [1:0]   auto_out_b_bits_resp,
  input  [2:0]   auto_out_b_bits_echo_extra_id,
  input          auto_out_b_bits_echo_real_last,
                 auto_out_ar_ready,
                 auto_out_r_valid,
                 auto_out_r_bits_id,
  input  [127:0] auto_out_r_bits_data,
  input  [1:0]   auto_out_r_bits_resp,
  input  [2:0]   auto_out_r_bits_echo_extra_id,
  input          auto_out_r_bits_echo_real_last,
                 auto_out_r_bits_last,
  output         auto_in_aw_ready,
                 auto_in_w_ready,
                 auto_in_b_valid,
                 auto_in_b_bits_id,
  output [1:0]   auto_in_b_bits_resp,
  output [2:0]   auto_in_b_bits_echo_extra_id,
  output         auto_in_ar_ready,
                 auto_in_r_valid,
                 auto_in_r_bits_id,
  output [127:0] auto_in_r_bits_data,
  output [1:0]   auto_in_r_bits_resp,
  output [2:0]   auto_in_r_bits_echo_extra_id,
  output         auto_in_r_bits_last,
                 auto_out_aw_valid,
                 auto_out_aw_bits_id,
  output [31:0]  auto_out_aw_bits_addr,
  output [7:0]   auto_out_aw_bits_len,
  output [2:0]   auto_out_aw_bits_size,
  output [3:0]   auto_out_aw_bits_cache,
  output [2:0]   auto_out_aw_bits_prot,
                 auto_out_aw_bits_echo_extra_id,
  output         auto_out_aw_bits_echo_real_last,
                 auto_out_w_valid,
  output [127:0] auto_out_w_bits_data,
  output [15:0]  auto_out_w_bits_strb,
  output         auto_out_w_bits_last,
                 auto_out_b_ready,
                 auto_out_ar_valid,
                 auto_out_ar_bits_id,
  output [31:0]  auto_out_ar_bits_addr,
  output [7:0]   auto_out_ar_bits_len,
  output [2:0]   auto_out_ar_bits_size,
  output [3:0]   auto_out_ar_bits_cache,
  output [2:0]   auto_out_ar_bits_prot,
                 auto_out_ar_bits_echo_extra_id,
  output         auto_out_ar_bits_echo_real_last,
                 auto_out_r_ready
);

  wire        x1_w_valid;	// @[Fragmenter.scala:178:33]
  wire        wbeats_ready;	// @[Fragmenter.scala:170:30]
  wire        in_aw_ready;	// @[Fragmenter.scala:163:35]
  wire        _in_w_deq_io_deq_valid;	// @[Decoupled.scala:375:21]
  wire        _in_w_deq_io_deq_bits_last;	// @[Decoupled.scala:375:21]
  wire        _deq_1_io_deq_valid;	// @[Decoupled.scala:375:21]
  wire [31:0] _deq_1_io_deq_bits_addr;	// @[Decoupled.scala:375:21]
  wire [7:0]  _deq_1_io_deq_bits_len;	// @[Decoupled.scala:375:21]
  wire [2:0]  _deq_1_io_deq_bits_size;	// @[Decoupled.scala:375:21]
  wire [1:0]  _deq_1_io_deq_bits_burst;	// @[Decoupled.scala:375:21]
  wire        _deq_io_deq_valid;	// @[Decoupled.scala:375:21]
  wire [31:0] _deq_io_deq_bits_addr;	// @[Decoupled.scala:375:21]
  wire [7:0]  _deq_io_deq_bits_len;	// @[Decoupled.scala:375:21]
  wire [2:0]  _deq_io_deq_bits_size;	// @[Decoupled.scala:375:21]
  wire [1:0]  _deq_io_deq_bits_burst;	// @[Decoupled.scala:375:21]
  reg         busy;	// @[Fragmenter.scala:65:29]
  reg  [31:0] r_addr;	// @[Fragmenter.scala:66:25]
  reg  [7:0]  r_len;	// @[Fragmenter.scala:67:25]
  wire [7:0]  len = busy ? r_len : _deq_io_deq_bits_len;	// @[Decoupled.scala:375:21, Fragmenter.scala:65:29, :67:25, :69:23]
  wire [31:0] addr = busy ? r_addr : _deq_io_deq_bits_addr;	// @[Decoupled.scala:375:21, Fragmenter.scala:65:29, :66:25, :70:23]
  wire [10:0] _GEN = addr[26:16] ^ 11'h201;	// @[Fragmenter.scala:70:23, Parameters.scala:137:31]
  wire [1:0]  _GEN_0 = addr[26:25] ^ 2'h2;	// @[Fragmenter.scala:70:23, :108:28, Parameters.scala:137:{31,45}]
  wire [6:0]  _GEN_1 = len[7:1] | {1'h0, len[7:2]};	// @[Fragmenter.scala:65:29, :69:23, package.scala:254:43]
  wire [6:0]  _GEN_2 = _GEN_1 | {2'h0, _GEN_1[6:2]};	// @[Fragmenter.scala:97:34, package.scala:254:43]
  wire [7:0]  _wipeHigh_T = ~len;	// @[Fragmenter.scala:69:23, :91:33]
  wire [7:0]  _wipeHigh_T_3 = _wipeHigh_T | {_wipeHigh_T[6:0], 1'h0};	// @[Fragmenter.scala:65:29, :91:33, package.scala:245:{43,53}]
  wire [7:0]  _wipeHigh_T_6 = _wipeHigh_T_3 | {_wipeHigh_T_3[5:0], 2'h0};	// @[Fragmenter.scala:97:34, package.scala:245:{43,53}]
  wire [7:0]  _align1_T_2 = addr[11:4] | {addr[10:4], 1'h0};	// @[Fragmenter.scala:65:29, :70:23, :74:29, package.scala:245:{43,53}]
  wire [7:0]  _align1_T_5 = _align1_T_2 | {_align1_T_2[5:0], 2'h0};	// @[Fragmenter.scala:97:34, package.scala:245:{43,53}]
  wire        fixed = _deq_io_deq_bits_burst == 2'h0;	// @[Decoupled.scala:375:21, Fragmenter.scala:97:34]
  wire [7:0]  in_ar_bits_len = fixed | _deq_io_deq_bits_size != 3'h4 ? 8'h0 : ({1'h0, _GEN_2 | {4'h0, _GEN_2[6:4]}} | ~(_wipeHigh_T_6 | {_wipeHigh_T_6[3:0], 4'h0})) & ~(_align1_T_5 | {_align1_T_5[3:0], 4'h0}) & ({6'h0, {2{{addr[31:28], addr[26:25], addr[13]} == 7'h0 | {addr[31:28], addr[26:25], ~(addr[16])} == 7'h0 | {addr[31:28], addr[26:25] ^ 2'h1, addr[16]} == 7'h0 | {addr[31:28], _GEN[10:9], _GEN[0], addr[13]} == 8'h0 | {addr[31:28], _GEN_0[1]} == 5'h0 | {addr[31:28], _GEN_0, addr[16], addr[13]} == 8'h0 | addr[31:28] == 4'h1 | addr[31:29] == 3'h1 | addr[31:30] == 2'h1 | addr[31]}}} | {8{{addr[31:28], addr[26:25], addr[16], ~(addr[13])} == 8'h0}});	// @[Decoupled.scala:375:21, Fragmenter.scala:65:29, :70:23, :81:100, :91:24, :92:32, :93:24, :94:46, :97:34, :98:34, :99:25, :102:25, :105:38, Mux.scala:27:73, Parameters.scala:137:{31,45,65}, package.scala:245:{43,53}, :254:43]
  wire        x1_ar_bits_echo_real_last = in_ar_bits_len == len;	// @[Fragmenter.scala:69:23, :102:25, :115:27]
  wire [10:0] _out_bits_addr_T_2 = 11'hF << _deq_io_deq_bits_size;	// @[Decoupled.scala:375:21, package.scala:235:71]
  reg         busy_1;	// @[Fragmenter.scala:65:29]
  reg  [31:0] r_addr_1;	// @[Fragmenter.scala:66:25]
  reg  [7:0]  r_len_1;	// @[Fragmenter.scala:67:25]
  wire [7:0]  len_1 = busy_1 ? r_len_1 : _deq_1_io_deq_bits_len;	// @[Decoupled.scala:375:21, Fragmenter.scala:65:29, :67:25, :69:23]
  wire [31:0] addr_1 = busy_1 ? r_addr_1 : _deq_1_io_deq_bits_addr;	// @[Decoupled.scala:375:21, Fragmenter.scala:65:29, :66:25, :70:23]
  wire [1:0]  _GEN_3 = addr_1[26:25] ^ 2'h1;	// @[Fragmenter.scala:70:23, Parameters.scala:137:{31,45}]
  wire [1:0]  _GEN_4 = addr_1[26:25] ^ 2'h2;	// @[Fragmenter.scala:70:23, :108:28, Parameters.scala:137:{31,45}]
  wire [1:0]  _GEN_5 = {2{&(addr_1[31:28])}};	// @[Fragmenter.scala:70:23, Mux.scala:27:73, Parameters.scala:137:{45,65}]
  wire [6:0]  _GEN_6 = len_1[7:1] | {1'h0, len_1[7:2]};	// @[Fragmenter.scala:65:29, :69:23, package.scala:254:43]
  wire [6:0]  _GEN_7 = _GEN_6 | {2'h0, _GEN_6[6:2]};	// @[Fragmenter.scala:97:34, package.scala:254:43]
  wire [7:0]  _wipeHigh_T_11 = ~len_1;	// @[Fragmenter.scala:69:23, :91:33]
  wire [7:0]  _wipeHigh_T_14 = _wipeHigh_T_11 | {_wipeHigh_T_11[6:0], 1'h0};	// @[Fragmenter.scala:65:29, :91:33, package.scala:245:{43,53}]
  wire [7:0]  _wipeHigh_T_17 = _wipeHigh_T_14 | {_wipeHigh_T_14[5:0], 2'h0};	// @[Fragmenter.scala:97:34, package.scala:245:{43,53}]
  wire [7:0]  _align1_T_12 = addr_1[11:4] | {addr_1[10:4], 1'h0};	// @[Fragmenter.scala:65:29, :70:23, :74:29, package.scala:245:{43,53}]
  wire [7:0]  _align1_T_15 = _align1_T_12 | {_align1_T_12[5:0], 2'h0};	// @[Fragmenter.scala:97:34, package.scala:245:{43,53}]
  wire        fixed_1 = _deq_1_io_deq_bits_burst == 2'h0;	// @[Decoupled.scala:375:21, Fragmenter.scala:97:34]
  wire [7:0]  in_aw_bits_len = fixed_1 | _deq_1_io_deq_bits_size != 3'h4 ? 8'h0 : ({1'h0, _GEN_7 | {4'h0, _GEN_7[6:4]}} | ~(_wipeHigh_T_17 | {_wipeHigh_T_17[3:0], 4'h0})) & ~(_align1_T_15 | {_align1_T_15[3:0], 4'h0}) & ({8{{addr_1[31:28], addr_1[26:25], addr_1[20], ~(addr_1[13])} == 8'h0}} | {4'h0, _GEN_5, {2{{addr_1[31:28], addr_1[26:25], addr_1[13]} == 7'h0 | {addr_1[31:28], _GEN_3, addr_1[20]} == 7'h0 | {addr_1[31:28], _GEN_3, addr_1[20], addr_1[13]} == 8'h0 | {addr_1[31:28], _GEN_4[1]} == 5'h0 | {addr_1[31:28], _GEN_4, addr_1[20], addr_1[13]} == 8'h0 | addr_1[31:28] == 4'h1 | addr_1[31:29] == 3'h1 | addr_1[31:30] == 2'h1 | addr_1[31:30] == 2'h2 | addr_1[31:29] == 3'h6 | addr_1[31:28] == 4'hE}} | _GEN_5});	// @[Decoupled.scala:375:21, Fragmenter.scala:65:29, :70:23, :81:100, :91:24, :92:32, :93:24, :94:46, :97:34, :98:34, :99:25, :102:25, :105:38, :108:28, Mux.scala:27:73, Parameters.scala:137:{31,45,65}, package.scala:245:{43,53}, :254:43]
  wire [8:0]  w_beats = {in_aw_bits_len, 1'h1} & {1'h1, ~in_aw_bits_len};	// @[Cat.scala:33:92, Fragmenter.scala:102:25, package.scala:233:{35,40,47,49}]
  wire        x1_aw_bits_echo_real_last = in_aw_bits_len == len_1;	// @[Fragmenter.scala:69:23, :102:25, :115:27]
  wire [10:0] _out_bits_addr_T_9 = 11'hF << _deq_1_io_deq_bits_size;	// @[Decoupled.scala:375:21, package.scala:235:71]
  reg         wbeats_latched;	// @[Fragmenter.scala:155:35]
  wire        _in_aw_ready_T = wbeats_ready | wbeats_latched;	// @[Fragmenter.scala:155:35, :162:52, :170:30]
  wire        x1_aw_valid = _deq_1_io_deq_valid & _in_aw_ready_T;	// @[Decoupled.scala:375:21, Fragmenter.scala:162:{35,52}]
  assign in_aw_ready = auto_out_aw_ready & _in_aw_ready_T;	// @[Fragmenter.scala:162:52, :163:35]
  wire        wbeats_valid = _deq_1_io_deq_valid & ~wbeats_latched;	// @[Decoupled.scala:375:21, Fragmenter.scala:155:35, :164:{35,38}]
  reg  [8:0]  w_counter;	// @[Fragmenter.scala:169:30]
  assign wbeats_ready = w_counter == 9'h0;	// @[Fragmenter.scala:169:30, :170:30]
  wire [8:0]  w_todo = wbeats_ready ? (wbeats_valid ? w_beats : 9'h0) : w_counter;	// @[Fragmenter.scala:164:35, :169:30, :170:30, :171:{23,35}, package.scala:233:47]
  wire        x1_w_bits_last = w_todo == 9'h1;	// @[Fragmenter.scala:171:23, :172:27, package.scala:233:40]
  wire        _T_8 = auto_out_w_ready & x1_w_valid;	// @[Decoupled.scala:51:35, Fragmenter.scala:178:33]
  assign x1_w_valid = _in_w_deq_io_deq_valid & (~wbeats_ready | wbeats_valid);	// @[Decoupled.scala:375:21, Fragmenter.scala:164:35, :170:30, :178:{33,37,51}]
  wire        x1_b_ready = auto_in_b_ready | ~auto_out_b_bits_echo_real_last;	// @[Fragmenter.scala:194:{33,36}]
  reg  [1:0]  error_0;	// @[Fragmenter.scala:197:26]
  reg  [1:0]  error_1;	// @[Fragmenter.scala:197:26]
  wire        _T_28 = x1_b_ready & auto_out_b_valid;	// @[Decoupled.scala:51:35, Fragmenter.scala:194:33]
  wire [22:0] _wrapMask_T_1 = {7'h0, _deq_io_deq_bits_len, 8'hFF} << _deq_io_deq_bits_size;	// @[Bundles.scala:33:21, Decoupled.scala:375:21, Fragmenter.scala:105:38, Mux.scala:27:73]
  wire [31:0] _GEN_8 = {17'h0, _wrapMask_T_1[22:8]};	// @[Bundles.scala:33:{21,30}, Fragmenter.scala:105:29, :109:33]
  wire [8:0]  beats = {in_ar_bits_len, 1'h1} & {1'h1, ~in_ar_bits_len};	// @[Cat.scala:33:92, Fragmenter.scala:102:25, package.scala:233:{35,40,47,49}]
  wire [31:0] inc_addr = addr + {16'h0, {7'h0, beats} << _deq_io_deq_bits_size};	// @[Decoupled.scala:375:21, Fragmenter.scala:70:23, :105:{29,38}, package.scala:233:47]
  wire [22:0] _wrapMask_T_3 = {7'h0, _deq_1_io_deq_bits_len, 8'hFF} << _deq_1_io_deq_bits_size;	// @[Bundles.scala:33:21, Decoupled.scala:375:21, Fragmenter.scala:105:38, Mux.scala:27:73]
  wire [31:0] _GEN_9 = {17'h0, _wrapMask_T_3[22:8]};	// @[Bundles.scala:33:{21,30}, Fragmenter.scala:105:29, :109:33]
  wire [31:0] inc_addr_1 = addr_1 + {16'h0, {7'h0, w_beats} << _deq_1_io_deq_bits_size};	// @[Decoupled.scala:375:21, Fragmenter.scala:70:23, :105:{29,38}, package.scala:233:47]
  wire        _T_2 = auto_out_ar_ready & _deq_io_deq_valid;	// @[Decoupled.scala:51:35, :375:21]
  wire        _T_5 = in_aw_ready & _deq_1_io_deq_valid;	// @[Decoupled.scala:51:35, :375:21, Fragmenter.scala:163:35]
  always @(posedge clock) begin
    if (reset) begin
      busy <= 1'h0;	// @[Fragmenter.scala:65:29]
      busy_1 <= 1'h0;	// @[Fragmenter.scala:65:29]
      wbeats_latched <= 1'h0;	// @[Fragmenter.scala:65:29, :155:35]
      w_counter <= 9'h0;	// @[Fragmenter.scala:169:30]
      error_0 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
      error_1 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
    end
    else begin
      if (_T_2)	// @[Decoupled.scala:51:35]
        busy <= ~x1_ar_bits_echo_real_last;	// @[Fragmenter.scala:65:29, :115:27, :130:19]
      if (_T_5)	// @[Decoupled.scala:51:35]
        busy_1 <= ~x1_aw_bits_echo_real_last;	// @[Fragmenter.scala:65:29, :115:27, :130:19]
      wbeats_latched <= ~(auto_out_aw_ready & x1_aw_valid) & (wbeats_valid & wbeats_ready | wbeats_latched);	// @[Decoupled.scala:51:35, Fragmenter.scala:155:35, :158:{26,43,60}, :159:{26,43}, :162:35, :164:35, :170:30]
      w_counter <= w_todo - {8'h0, _T_8};	// @[Decoupled.scala:51:35, Fragmenter.scala:169:30, :171:23, :173:27, Mux.scala:27:73]
      if (~auto_out_b_bits_id & _T_28) begin	// @[Decoupled.scala:51:35, Fragmenter.scala:199:63, :200:19]
        if (auto_out_b_bits_echo_real_last)
          error_0 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
        else
          error_0 <= error_0 | auto_out_b_bits_resp;	// @[Fragmenter.scala:197:26, :200:64]
      end
      if (auto_out_b_bits_id & _T_28) begin	// @[Decoupled.scala:51:35, Fragmenter.scala:200:19]
        if (auto_out_b_bits_echo_real_last)
          error_1 <= 2'h0;	// @[Fragmenter.scala:97:34, :197:26]
        else
          error_1 <= error_1 | auto_out_b_bits_resp;	// @[Fragmenter.scala:197:26, :200:64]
      end
    end
    if (_T_2) begin	// @[Decoupled.scala:51:35]
      if (fixed)	// @[Fragmenter.scala:97:34]
        r_addr <= _deq_io_deq_bits_addr;	// @[Decoupled.scala:375:21, Fragmenter.scala:66:25]
      else if (_deq_io_deq_bits_burst == 2'h2)	// @[Decoupled.scala:375:21, Fragmenter.scala:108:28]
        r_addr <= inc_addr & _GEN_8 | ~(~_deq_io_deq_bits_addr | _GEN_8);	// @[Decoupled.scala:375:21, Fragmenter.scala:66:25, :105:29, :109:{33,45,47,49,62}]
      else	// @[Fragmenter.scala:108:28]
        r_addr <= inc_addr;	// @[Fragmenter.scala:66:25, :105:29]
      r_len <= len - beats[7:0];	// @[Fragmenter.scala:67:25, :69:23, :132:25, package.scala:233:47]
    end
    if (_T_5) begin	// @[Decoupled.scala:51:35]
      if (fixed_1)	// @[Fragmenter.scala:97:34]
        r_addr_1 <= _deq_1_io_deq_bits_addr;	// @[Decoupled.scala:375:21, Fragmenter.scala:66:25]
      else if (_deq_1_io_deq_bits_burst == 2'h2)	// @[Decoupled.scala:375:21, Fragmenter.scala:108:28]
        r_addr_1 <= inc_addr_1 & _GEN_9 | ~(~_deq_1_io_deq_bits_addr | _GEN_9);	// @[Decoupled.scala:375:21, Fragmenter.scala:66:25, :105:29, :109:{33,45,47,49,62}]
      else	// @[Fragmenter.scala:108:28]
        r_addr_1 <= inc_addr_1;	// @[Fragmenter.scala:66:25, :105:29]
      r_len_1 <= len_1 - w_beats[7:0];	// @[Fragmenter.scala:67:25, :69:23, :132:25, package.scala:233:47]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    always @(posedge clock) begin	// @[Fragmenter.scala:174:14]
      if (~reset & ~(~_T_8 | (|w_todo))) begin	// @[Decoupled.scala:51:35, Fragmenter.scala:171:23, :174:{14,15,27,37}]
        if (`ASSERT_VERBOSE_COND_)	// @[Fragmenter.scala:174:14]
          $error("Assertion failed\n    at Fragmenter.scala:174 assert (!out.w.fire || w_todo =/= 0.U) // underflow impossible\n");	// @[Fragmenter.scala:174:14]
        if (`STOP_COND_)	// @[Fragmenter.scala:174:14]
          $fatal;	// @[Fragmenter.scala:174:14]
      end
      if (~reset & ~(~x1_w_valid | ~_in_w_deq_io_deq_bits_last | x1_w_bits_last)) begin	// @[Decoupled.scala:375:21, Fragmenter.scala:172:27, :178:33, :183:{14,15,31,47}]
        if (`ASSERT_VERBOSE_COND_)	// @[Fragmenter.scala:183:14]
          $error("Assertion failed\n    at Fragmenter.scala:183 assert (!out.w.valid || !in_w.bits.last || w_last)\n");	// @[Fragmenter.scala:183:14]
        if (`STOP_COND_)	// @[Fragmenter.scala:183:14]
          $fatal;	// @[Fragmenter.scala:183:14]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        busy = _RANDOM_0[0];	// @[Fragmenter.scala:65:29]
        r_addr = {_RANDOM_0[31:1], _RANDOM_1[0]};	// @[Fragmenter.scala:65:29, :66:25]
        r_len = _RANDOM_1[8:1];	// @[Fragmenter.scala:66:25, :67:25]
        busy_1 = _RANDOM_1[9];	// @[Fragmenter.scala:65:29, :66:25]
        r_addr_1 = {_RANDOM_1[31:10], _RANDOM_2[9:0]};	// @[Fragmenter.scala:66:25]
        r_len_1 = _RANDOM_2[17:10];	// @[Fragmenter.scala:66:25, :67:25]
        wbeats_latched = _RANDOM_2[18];	// @[Fragmenter.scala:66:25, :155:35]
        w_counter = _RANDOM_2[27:19];	// @[Fragmenter.scala:66:25, :169:30]
        error_0 = _RANDOM_2[29:28];	// @[Fragmenter.scala:66:25, :197:26]
        error_1 = _RANDOM_2[31:30];	// @[Fragmenter.scala:66:25, :197:26]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  Queue_69_boom deq (	// @[Decoupled.scala:375:21]
    .clock                     (clock),
    .reset                     (reset),
    .io_enq_valid              (auto_in_ar_valid),
    .io_enq_bits_id            (auto_in_ar_bits_id),
    .io_enq_bits_addr          (auto_in_ar_bits_addr),
    .io_enq_bits_len           (auto_in_ar_bits_len),
    .io_enq_bits_size          (auto_in_ar_bits_size),
    .io_enq_bits_burst         (auto_in_ar_bits_burst),
    .io_enq_bits_lock          (auto_in_ar_bits_lock),
    .io_enq_bits_cache         (auto_in_ar_bits_cache),
    .io_enq_bits_prot          (auto_in_ar_bits_prot),
    .io_enq_bits_qos           (auto_in_ar_bits_qos),
    .io_enq_bits_echo_extra_id (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready              (auto_out_ar_ready & x1_ar_bits_echo_real_last),	// @[Fragmenter.scala:115:27, :116:30]
    .io_enq_ready              (auto_in_ar_ready),
    .io_deq_valid              (_deq_io_deq_valid),
    .io_deq_bits_id            (auto_out_ar_bits_id),
    .io_deq_bits_addr          (_deq_io_deq_bits_addr),
    .io_deq_bits_len           (_deq_io_deq_bits_len),
    .io_deq_bits_size          (_deq_io_deq_bits_size),
    .io_deq_bits_burst         (_deq_io_deq_bits_burst),
    .io_deq_bits_cache         (auto_out_ar_bits_cache),
    .io_deq_bits_prot          (auto_out_ar_bits_prot),
    .io_deq_bits_echo_extra_id (auto_out_ar_bits_echo_extra_id)
  );
  Queue_69_boom deq_1 (	// @[Decoupled.scala:375:21]
    .clock                     (clock),
    .reset                     (reset),
    .io_enq_valid              (auto_in_aw_valid),
    .io_enq_bits_id            (auto_in_aw_bits_id),
    .io_enq_bits_addr          (auto_in_aw_bits_addr),
    .io_enq_bits_len           (auto_in_aw_bits_len),
    .io_enq_bits_size          (auto_in_aw_bits_size),
    .io_enq_bits_burst         (auto_in_aw_bits_burst),
    .io_enq_bits_lock          (auto_in_aw_bits_lock),
    .io_enq_bits_cache         (auto_in_aw_bits_cache),
    .io_enq_bits_prot          (auto_in_aw_bits_prot),
    .io_enq_bits_qos           (auto_in_aw_bits_qos),
    .io_enq_bits_echo_extra_id (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready              (in_aw_ready & x1_aw_bits_echo_real_last),	// @[Fragmenter.scala:115:27, :116:30, :163:35]
    .io_enq_ready              (auto_in_aw_ready),
    .io_deq_valid              (_deq_1_io_deq_valid),
    .io_deq_bits_id            (auto_out_aw_bits_id),
    .io_deq_bits_addr          (_deq_1_io_deq_bits_addr),
    .io_deq_bits_len           (_deq_1_io_deq_bits_len),
    .io_deq_bits_size          (_deq_1_io_deq_bits_size),
    .io_deq_bits_burst         (_deq_1_io_deq_bits_burst),
    .io_deq_bits_cache         (auto_out_aw_bits_cache),
    .io_deq_bits_prot          (auto_out_aw_bits_prot),
    .io_deq_bits_echo_extra_id (auto_out_aw_bits_echo_extra_id)
  );
  Queue_71_boom in_w_deq (	// @[Decoupled.scala:375:21]
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (auto_in_w_valid),
    .io_enq_bits_data (auto_in_w_bits_data),
    .io_enq_bits_strb (auto_in_w_bits_strb),
    .io_enq_bits_last (auto_in_w_bits_last),
    .io_deq_ready     (auto_out_w_ready & (~wbeats_ready | wbeats_valid)),	// @[Fragmenter.scala:164:35, :170:30, :178:37, :179:{33,51}]
    .io_enq_ready     (auto_in_w_ready),
    .io_deq_valid     (_in_w_deq_io_deq_valid),
    .io_deq_bits_data (auto_out_w_bits_data),
    .io_deq_bits_strb (auto_out_w_bits_strb),
    .io_deq_bits_last (_in_w_deq_io_deq_bits_last)
  );
  assign auto_in_b_valid = auto_out_b_valid & auto_out_b_bits_echo_real_last;	// @[Fragmenter.scala:193:33]
  assign auto_in_b_bits_id = auto_out_b_bits_id;
  assign auto_in_b_bits_resp = auto_out_b_bits_resp | (auto_out_b_bits_id ? error_1 : error_0);	// @[Fragmenter.scala:197:26, :198:41]
  assign auto_in_b_bits_echo_extra_id = auto_out_b_bits_echo_extra_id;
  assign auto_in_r_valid = auto_out_r_valid;
  assign auto_in_r_bits_id = auto_out_r_bits_id;
  assign auto_in_r_bits_data = auto_out_r_bits_data;
  assign auto_in_r_bits_resp = auto_out_r_bits_resp;
  assign auto_in_r_bits_echo_extra_id = auto_out_r_bits_echo_extra_id;
  assign auto_in_r_bits_last = auto_out_r_bits_last & auto_out_r_bits_echo_real_last;	// @[Fragmenter.scala:188:41]
  assign auto_out_aw_valid = x1_aw_valid;	// @[Fragmenter.scala:162:35]
  assign auto_out_aw_bits_addr = ~(~addr_1 | {28'h0, ~(_out_bits_addr_T_9[3:0])});	// @[Fragmenter.scala:70:23, :127:{26,28,34}, package.scala:235:{46,71,76}]
  assign auto_out_aw_bits_len = in_aw_bits_len;	// @[Fragmenter.scala:102:25]
  assign auto_out_aw_bits_size = _deq_1_io_deq_bits_size;	// @[Decoupled.scala:375:21]
  assign auto_out_aw_bits_echo_real_last = x1_aw_bits_echo_real_last;	// @[Fragmenter.scala:115:27]
  assign auto_out_w_valid = x1_w_valid;	// @[Fragmenter.scala:178:33]
  assign auto_out_w_bits_last = x1_w_bits_last;	// @[Fragmenter.scala:172:27]
  assign auto_out_b_ready = x1_b_ready;	// @[Fragmenter.scala:194:33]
  assign auto_out_ar_valid = _deq_io_deq_valid;	// @[Decoupled.scala:375:21]
  assign auto_out_ar_bits_addr = ~(~addr | {28'h0, ~(_out_bits_addr_T_2[3:0])});	// @[Fragmenter.scala:70:23, :127:{26,28,34}, package.scala:235:{46,71,76}]
  assign auto_out_ar_bits_len = in_ar_bits_len;	// @[Fragmenter.scala:102:25]
  assign auto_out_ar_bits_size = _deq_io_deq_bits_size;	// @[Decoupled.scala:375:21]
  assign auto_out_ar_bits_echo_real_last = x1_ar_bits_echo_real_last;	// @[Fragmenter.scala:115:27]
  assign auto_out_r_ready = auto_in_r_ready;
endmodule

