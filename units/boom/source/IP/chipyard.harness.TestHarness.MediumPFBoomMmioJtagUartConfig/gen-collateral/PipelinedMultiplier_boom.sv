// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module PipelinedMultiplier_boom(
  input         clock,
                reset,
                io_req_valid,
  input  [3:0]  io_req_bits_fn,
  input         io_req_bits_dw,
  input  [63:0] io_req_bits_in1,
                io_req_bits_in2,
  output [63:0] io_resp_bits_data
);

  reg          inPipe_valid;	// @[Valid.scala:130:22]
  reg  [3:0]   inPipe_bits_fn;	// @[Reg.scala:19:16]
  reg          inPipe_bits_dw;	// @[Reg.scala:19:16]
  reg  [63:0]  inPipe_bits_in1;	// @[Reg.scala:19:16]
  reg  [63:0]  inPipe_bits_in2;	// @[Reg.scala:19:16]
  reg          io_resp_bits_data_v;	// @[Valid.scala:130:22]
  reg  [63:0]  io_resp_bits_data_b;	// @[Reg.scala:19:16]
  reg  [63:0]  io_resp_bits_data_outPipe_bits;	// @[Reg.scala:19:16]
  wire [1:0]   decoded_invInputs = ~(inPipe_bits_fn[1:0]);	// @[Reg.scala:19:16, decoder.scala:40:16, pla.scala:78:21]
  wire [127:0] _GEN = {{64{(|{decoded_invInputs[1], &{decoded_invInputs[0], inPipe_bits_fn[1]}}) & inPipe_bits_in1[63]}}, inPipe_bits_in1} * {{64{decoded_invInputs[1] & inPipe_bits_in2[63]}}, inPipe_bits_in2};	// @[Cat.scala:33:92, Multiplier.scala:199:{27,41}, :200:{27,41}, :201:18, Reg.scala:19:16, pla.scala:78:21, :90:45, :91:29, :98:74, :114:39]
  always @(posedge clock) begin
    if (reset) begin
      inPipe_valid <= 1'h0;	// @[Valid.scala:130:22]
      io_resp_bits_data_v <= 1'h0;	// @[Valid.scala:130:22]
    end
    else begin
      inPipe_valid <= io_req_valid;	// @[Valid.scala:130:22]
      io_resp_bits_data_v <= inPipe_valid;	// @[Valid.scala:130:22]
    end
    if (io_req_valid) begin
      inPipe_bits_fn <= io_req_bits_fn;	// @[Reg.scala:19:16]
      inPipe_bits_dw <= io_req_bits_dw;	// @[Reg.scala:19:16]
      inPipe_bits_in1 <= io_req_bits_in1;	// @[Reg.scala:19:16]
      inPipe_bits_in2 <= io_req_bits_in2;	// @[Reg.scala:19:16]
    end
    if (inPipe_valid) begin	// @[Valid.scala:130:22]
      if (|{inPipe_bits_fn[0], inPipe_bits_fn[1]})	// @[Cat.scala:33:92, Reg.scala:19:16, pla.scala:90:45, :114:39]
        io_resp_bits_data_b <= _GEN[127:64];	// @[Multiplier.scala:201:18, :202:30, Reg.scala:19:16]
      else if (inPipe_bits_dw)	// @[Reg.scala:19:16]
        io_resp_bits_data_b <= _GEN[63:0];	// @[Multiplier.scala:201:18, :202:101, Reg.scala:19:16]
      else	// @[Reg.scala:19:16]
        io_resp_bits_data_b <= {{32{_GEN[31]}}, _GEN[31:0]};	// @[Bitwise.scala:77:12, Cat.scala:33:92, Multiplier.scala:201:18, :202:67, Reg.scala:19:16, package.scala:124:38]
    end
    if (io_resp_bits_data_v)	// @[Valid.scala:130:22]
      io_resp_bits_data_outPipe_bits <= io_resp_bits_data_b;	// @[Reg.scala:19:16]
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    logic [31:0] _RANDOM_9;
    logic [31:0] _RANDOM_10;
    logic [31:0] _RANDOM_11;
    logic [31:0] _RANDOM_12;
    logic [31:0] _RANDOM_13;
    logic [31:0] _RANDOM_14;
    logic [31:0] _RANDOM_15;
    logic [31:0] _RANDOM_16;
    logic [31:0] _RANDOM_17;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        inPipe_valid = _RANDOM_0[0];	// @[Valid.scala:130:22]
        inPipe_bits_fn = _RANDOM_0[4:1];	// @[Reg.scala:19:16, Valid.scala:130:22]
        inPipe_bits_dw = _RANDOM_0[5];	// @[Reg.scala:19:16, Valid.scala:130:22]
        inPipe_bits_in1 = {_RANDOM_0[31:6], _RANDOM_1, _RANDOM_2[5:0]};	// @[Reg.scala:19:16, Valid.scala:130:22]
        inPipe_bits_in2 = {_RANDOM_2[31:6], _RANDOM_3, _RANDOM_4[5:0]};	// @[Reg.scala:19:16]
        io_resp_bits_data_v = _RANDOM_13[1];	// @[Valid.scala:130:22]
        io_resp_bits_data_b = {_RANDOM_13[31:2], _RANDOM_14, _RANDOM_15[1:0]};	// @[Reg.scala:19:16, Valid.scala:130:22]
        io_resp_bits_data_outPipe_bits = {_RANDOM_15[31:3], _RANDOM_16, _RANDOM_17[2:0]};	// @[Reg.scala:19:16]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_resp_bits_data = io_resp_bits_data_outPipe_bits;	// @[Reg.scala:19:16]
endmodule

