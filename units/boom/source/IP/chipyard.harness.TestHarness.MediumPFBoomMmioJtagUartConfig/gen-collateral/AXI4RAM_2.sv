// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module AXI4RAM_2(
  input          clock,
                 reset,
                 auto_in_aw_valid,
  input  [3:0]   auto_in_aw_bits_id,
  input  [31:0]  auto_in_aw_bits_addr,
  input          auto_in_aw_bits_echo_real_last,
                 auto_in_w_valid,
  input  [127:0] auto_in_w_bits_data,
  input  [15:0]  auto_in_w_bits_strb,
  input          auto_in_b_ready,
                 auto_in_ar_valid,
  input  [3:0]   auto_in_ar_bits_id,
  input  [31:0]  auto_in_ar_bits_addr,
  input          auto_in_ar_bits_echo_real_last,
                 auto_in_r_ready,
  output         auto_in_aw_ready,
                 auto_in_w_ready,
                 auto_in_b_valid,
  output [3:0]   auto_in_b_bits_id,
  output [1:0]   auto_in_b_bits_resp,
  output         auto_in_b_bits_echo_real_last,
                 auto_in_ar_ready,
                 auto_in_r_valid,
  output [3:0]   auto_in_r_bits_id,
  output [127:0] auto_in_r_bits_data,
  output [1:0]   auto_in_r_bits_resp,
  output         auto_in_r_bits_echo_real_last
);

  wire         in_ar_ready;	// @[SRAM.scala:117:31]
  wire         in_aw_ready;	// @[SRAM.scala:92:32]
  wire [127:0] _mem_R0_data;	// @[DescribedSRAM.scala:17:26]
  wire         w_sel0 = auto_in_aw_bits_addr[31:30] == 2'h2;	// @[Parameters.scala:137:{31,65}]
  reg          w_full;	// @[SRAM.scala:70:25]
  reg  [3:0]   w_id;	// @[SRAM.scala:71:21]
  reg          w_echo_real_last;	// @[SRAM.scala:72:21]
  reg          r_sel1;	// @[SRAM.scala:73:25]
  reg          w_sel1;	// @[SRAM.scala:74:25]
  wire         _T_3 = in_aw_ready & auto_in_aw_valid;	// @[Decoupled.scala:51:35, SRAM.scala:92:32]
  assign in_aw_ready = auto_in_w_valid & (auto_in_b_ready | ~w_full);	// @[SRAM.scala:70:25, :92:{32,47,50}]
  reg          r_full;	// @[SRAM.scala:99:25]
  reg  [3:0]   r_id;	// @[SRAM.scala:100:21]
  reg          r_echo_real_last;	// @[SRAM.scala:101:21]
  wire         mem_rdata_MPORT_en = in_ar_ready & auto_in_ar_valid;	// @[Decoupled.scala:51:35, SRAM.scala:117:31]
  reg          rdata_REG;	// @[package.scala:92:91]
  reg  [7:0]   rdata_r_0;	// @[Reg.scala:19:16]
  reg  [7:0]   rdata_r_1;	// @[Reg.scala:19:16]
  reg  [7:0]   rdata_r_2;	// @[Reg.scala:19:16]
  reg  [7:0]   rdata_r_3;	// @[Reg.scala:19:16]
  reg  [7:0]   rdata_r_4;	// @[Reg.scala:19:16]
  reg  [7:0]   rdata_r_5;	// @[Reg.scala:19:16]
  reg  [7:0]   rdata_r_6;	// @[Reg.scala:19:16]
  reg  [7:0]   rdata_r_7;	// @[Reg.scala:19:16]
  reg  [7:0]   rdata_r_8;	// @[Reg.scala:19:16]
  reg  [7:0]   rdata_r_9;	// @[Reg.scala:19:16]
  reg  [7:0]   rdata_r_10;	// @[Reg.scala:19:16]
  reg  [7:0]   rdata_r_11;	// @[Reg.scala:19:16]
  reg  [7:0]   rdata_r_12;	// @[Reg.scala:19:16]
  reg  [7:0]   rdata_r_13;	// @[Reg.scala:19:16]
  reg  [7:0]   rdata_r_14;	// @[Reg.scala:19:16]
  reg  [7:0]   rdata_r_15;	// @[Reg.scala:19:16]
  assign in_ar_ready = auto_in_r_ready | ~r_full;	// @[SRAM.scala:99:25, :117:{31,34}]
  always @(posedge clock) begin
    if (reset) begin
      w_full <= 1'h0;	// @[SRAM.scala:70:25]
      r_full <= 1'h0;	// @[SRAM.scala:99:25]
    end
    else begin
      w_full <= _T_3 | ~(auto_in_b_ready & w_full) & w_full;	// @[Decoupled.scala:51:35, SRAM.scala:70:25, :76:{23,32}, :77:{23,32}]
      r_full <= mem_rdata_MPORT_en | ~(auto_in_r_ready & r_full) & r_full;	// @[Decoupled.scala:51:35, SRAM.scala:99:25, :103:{23,32}, :104:{23,32}]
    end
    if (_T_3) begin	// @[Decoupled.scala:51:35]
      w_id <= auto_in_aw_bits_id;	// @[SRAM.scala:71:21]
      w_echo_real_last <= auto_in_aw_bits_echo_real_last;	// @[SRAM.scala:72:21]
    end
    r_sel1 <= auto_in_ar_bits_addr[31:30] == 2'h2;	// @[Parameters.scala:137:{31,65}, SRAM.scala:73:25]
    w_sel1 <= w_sel0;	// @[Parameters.scala:137:65, SRAM.scala:74:25]
    if (mem_rdata_MPORT_en) begin	// @[Decoupled.scala:51:35]
      r_id <= auto_in_ar_bits_id;	// @[SRAM.scala:100:21]
      r_echo_real_last <= auto_in_ar_bits_echo_real_last;	// @[SRAM.scala:101:21]
    end
    rdata_REG <= mem_rdata_MPORT_en;	// @[Decoupled.scala:51:35, package.scala:92:91]
    if (rdata_REG) begin	// @[package.scala:92:91]
      rdata_r_0 <= _mem_R0_data[7:0];	// @[DescribedSRAM.scala:17:26, Reg.scala:19:16]
      rdata_r_1 <= _mem_R0_data[15:8];	// @[DescribedSRAM.scala:17:26, Reg.scala:19:16]
      rdata_r_2 <= _mem_R0_data[23:16];	// @[DescribedSRAM.scala:17:26, Reg.scala:19:16]
      rdata_r_3 <= _mem_R0_data[31:24];	// @[DescribedSRAM.scala:17:26, Reg.scala:19:16]
      rdata_r_4 <= _mem_R0_data[39:32];	// @[DescribedSRAM.scala:17:26, Reg.scala:19:16]
      rdata_r_5 <= _mem_R0_data[47:40];	// @[DescribedSRAM.scala:17:26, Reg.scala:19:16]
      rdata_r_6 <= _mem_R0_data[55:48];	// @[DescribedSRAM.scala:17:26, Reg.scala:19:16]
      rdata_r_7 <= _mem_R0_data[63:56];	// @[DescribedSRAM.scala:17:26, Reg.scala:19:16]
      rdata_r_8 <= _mem_R0_data[71:64];	// @[DescribedSRAM.scala:17:26, Reg.scala:19:16]
      rdata_r_9 <= _mem_R0_data[79:72];	// @[DescribedSRAM.scala:17:26, Reg.scala:19:16]
      rdata_r_10 <= _mem_R0_data[87:80];	// @[DescribedSRAM.scala:17:26, Reg.scala:19:16]
      rdata_r_11 <= _mem_R0_data[95:88];	// @[DescribedSRAM.scala:17:26, Reg.scala:19:16]
      rdata_r_12 <= _mem_R0_data[103:96];	// @[DescribedSRAM.scala:17:26, Reg.scala:19:16]
      rdata_r_13 <= _mem_R0_data[111:104];	// @[DescribedSRAM.scala:17:26, Reg.scala:19:16]
      rdata_r_14 <= _mem_R0_data[119:112];	// @[DescribedSRAM.scala:17:26, Reg.scala:19:16]
      rdata_r_15 <= _mem_R0_data[127:120];	// @[DescribedSRAM.scala:17:26, Reg.scala:19:16]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        w_full = _RANDOM_0[0];	// @[SRAM.scala:70:25]
        w_id = _RANDOM_0[4:1];	// @[SRAM.scala:70:25, :71:21]
        w_echo_real_last = _RANDOM_0[5];	// @[SRAM.scala:70:25, :72:21]
        r_sel1 = _RANDOM_0[6];	// @[SRAM.scala:70:25, :73:25]
        w_sel1 = _RANDOM_0[7];	// @[SRAM.scala:70:25, :74:25]
        r_full = _RANDOM_0[8];	// @[SRAM.scala:70:25, :99:25]
        r_id = _RANDOM_0[12:9];	// @[SRAM.scala:70:25, :100:21]
        r_echo_real_last = _RANDOM_0[13];	// @[SRAM.scala:70:25, :101:21]
        rdata_REG = _RANDOM_0[14];	// @[SRAM.scala:70:25, package.scala:92:91]
        rdata_r_0 = _RANDOM_0[22:15];	// @[Reg.scala:19:16, SRAM.scala:70:25]
        rdata_r_1 = _RANDOM_0[30:23];	// @[Reg.scala:19:16, SRAM.scala:70:25]
        rdata_r_2 = {_RANDOM_0[31], _RANDOM_1[6:0]};	// @[Reg.scala:19:16, SRAM.scala:70:25]
        rdata_r_3 = _RANDOM_1[14:7];	// @[Reg.scala:19:16]
        rdata_r_4 = _RANDOM_1[22:15];	// @[Reg.scala:19:16]
        rdata_r_5 = _RANDOM_1[30:23];	// @[Reg.scala:19:16]
        rdata_r_6 = {_RANDOM_1[31], _RANDOM_2[6:0]};	// @[Reg.scala:19:16]
        rdata_r_7 = _RANDOM_2[14:7];	// @[Reg.scala:19:16]
        rdata_r_8 = _RANDOM_2[22:15];	// @[Reg.scala:19:16]
        rdata_r_9 = _RANDOM_2[30:23];	// @[Reg.scala:19:16]
        rdata_r_10 = {_RANDOM_2[31], _RANDOM_3[6:0]};	// @[Reg.scala:19:16]
        rdata_r_11 = _RANDOM_3[14:7];	// @[Reg.scala:19:16]
        rdata_r_12 = _RANDOM_3[22:15];	// @[Reg.scala:19:16]
        rdata_r_13 = _RANDOM_3[30:23];	// @[Reg.scala:19:16]
        rdata_r_14 = {_RANDOM_3[31], _RANDOM_4[6:0]};	// @[Reg.scala:19:16]
        rdata_r_15 = _RANDOM_4[14:7];	// @[Reg.scala:19:16]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  mem_1 mem (	// @[DescribedSRAM.scala:17:26]
    .R0_addr (auto_in_ar_bits_addr[29:4]),	// @[Cat.scala:33:92]
    .R0_en   (mem_rdata_MPORT_en),	// @[Decoupled.scala:51:35]
    .R0_clk  (clock),
    .W0_addr (auto_in_aw_bits_addr[29:4]),	// @[Cat.scala:33:92]
    .W0_en   (_T_3 & w_sel0),	// @[Decoupled.scala:51:35, Parameters.scala:137:65, SRAM.scala:86:22]
    .W0_clk  (clock),
    .W0_data (auto_in_w_bits_data),
    .W0_mask (auto_in_w_bits_strb),
    .R0_data (_mem_R0_data)
  );
  assign auto_in_aw_ready = in_aw_ready;	// @[SRAM.scala:92:32]
  assign auto_in_w_ready = auto_in_aw_valid & (auto_in_b_ready | ~w_full);	// @[SRAM.scala:70:25, :92:50, :93:{32,47}]
  assign auto_in_b_valid = w_full;	// @[SRAM.scala:70:25]
  assign auto_in_b_bits_id = w_id;	// @[SRAM.scala:71:21]
  assign auto_in_b_bits_resp = w_sel1 ? 2'h0 : 2'h3;	// @[SRAM.scala:74:25, :96:26]
  assign auto_in_b_bits_echo_real_last = w_echo_real_last;	// @[SRAM.scala:72:21]
  assign auto_in_ar_ready = in_ar_ready;	// @[SRAM.scala:117:31]
  assign auto_in_r_valid = r_full;	// @[SRAM.scala:99:25]
  assign auto_in_r_bits_id = r_id;	// @[SRAM.scala:100:21]
  assign auto_in_r_bits_data = {rdata_REG ? _mem_R0_data[127:120] : rdata_r_15, rdata_REG ? _mem_R0_data[119:112] : rdata_r_14, rdata_REG ? _mem_R0_data[111:104] : rdata_r_13, rdata_REG ? _mem_R0_data[103:96] : rdata_r_12, rdata_REG ? _mem_R0_data[95:88] : rdata_r_11, rdata_REG ? _mem_R0_data[87:80] : rdata_r_10, rdata_REG ? _mem_R0_data[79:72] : rdata_r_9, rdata_REG ? _mem_R0_data[71:64] : rdata_r_8, rdata_REG ? _mem_R0_data[63:56] : rdata_r_7, rdata_REG ? _mem_R0_data[55:48] : rdata_r_6, rdata_REG ? _mem_R0_data[47:40] : rdata_r_5, rdata_REG ? _mem_R0_data[39:32] : rdata_r_4, rdata_REG ? _mem_R0_data[31:24] : rdata_r_3, rdata_REG ? _mem_R0_data[23:16] : rdata_r_2, rdata_REG ? _mem_R0_data[15:8] : rdata_r_1, rdata_REG ? _mem_R0_data[7:0] : rdata_r_0};	// @[Cat.scala:33:92, DescribedSRAM.scala:17:26, Reg.scala:19:16, package.scala:80:42, :92:91]
  assign auto_in_r_bits_resp = r_sel1 ? 2'h0 : 2'h3;	// @[SRAM.scala:73:25, :96:26, :120:26]
  assign auto_in_r_bits_echo_real_last = r_echo_real_last;	// @[SRAM.scala:101:21]
endmodule

